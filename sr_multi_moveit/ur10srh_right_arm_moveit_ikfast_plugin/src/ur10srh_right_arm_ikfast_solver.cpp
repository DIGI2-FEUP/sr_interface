/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
///
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2017-02-10 00:55:25.238120
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h"  // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[static_cast<int>(x)]
IKFAST_COMPILE_ASSERT ( IKFAST_VERSION == 0x10000049 );

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if ( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
    void dgetrf_ ( const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info );
    void zgetrf_ ( const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info );
    void dgetri_ ( const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info );
    void dgesv_ ( const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info );
    void dgetrs_ ( const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info );
    void dgeev_ ( const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi, double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info );
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs ( float f ) {
    return fabsf ( f );
}
inline double IKabs ( double f ) {
    return fabs ( f );
}

inline float IKsqr ( float f ) {
    return f * f;
}
inline double IKsqr ( double f ) {
    return f * f;
}

inline float IKlog ( float f ) {
    return logf ( f );
}
inline double IKlog ( double f ) {
    return log ( f );
}

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin ( float f )
{
    IKFAST_ASSERT ( f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if ( f <= -1 ) return float ( -IKPI_2 );
    else if ( f >= 1 ) return float ( IKPI_2 );
    return asinf ( f );
}
inline double IKasin ( double f )
{
    IKFAST_ASSERT ( f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if ( f <= -1 ) return -IKPI_2;
    else if ( f >= 1 ) return IKPI_2;
    return asin ( f );
}

// return positive value in [0,y)
inline float IKfmod ( float x, float y )
{
    while ( x < 0 ) {
        x += y;
    }
    return fmodf ( x, y );
}

// return positive value in [0,y)
inline double IKfmod ( double x, double y )
{
    while ( x < 0 ) {
        x += y;
    }
    return fmod ( x, y );
}

inline float IKacos ( float f )
{
    IKFAST_ASSERT ( f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if ( f <= -1 ) return float ( IKPI );
    else if ( f >= 1 ) return float ( 0 );
    return acosf ( f );
}
inline double IKacos ( double f )
{
    IKFAST_ASSERT ( f > -1 - IKFAST_SINCOS_THRESH && f < 1 + IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
    if ( f <= -1 ) return IKPI;
    else if ( f >= 1 ) return 0;
    return acos ( f );
}
inline float IKsin ( float f ) {
    return sinf ( f );
}
inline double IKsin ( double f ) {
    return sin ( f );
}
inline float IKcos ( float f ) {
    return cosf ( f );
}
inline double IKcos ( double f ) {
    return cos ( f );
}
inline float IKtan ( float f ) {
    return tanf ( f );
}
inline double IKtan ( double f ) {
    return tan ( f );
}
inline float IKsqrt ( float f ) {
    if ( f <= 0.0f ) return 0.0f;
    return sqrtf ( f );
}
inline double IKsqrt ( double f ) {
    if ( f <= 0.0 ) return 0.0;
    return sqrt ( f );
}
inline float IKatan2Simple ( float fy, float fx ) {
    return atan2f ( fy, fx );
}
inline float IKatan2 ( float fy, float fx ) {
    if ( isnan ( fy ) ) {
        IKFAST_ASSERT ( !isnan ( fx ) ); // if both are nan, probably wrong value will be returned
        return float ( IKPI_2 );
    }
    else if ( isnan ( fx ) ) {
        return 0;
    }
    return atan2f ( fy, fx );
}
inline double IKatan2Simple ( double fy, double fx ) {
    return atan2 ( fy, fx );
}
inline double IKatan2 ( double fy, double fx ) {
    if ( isnan ( fy ) ) {
        IKFAST_ASSERT ( !isnan ( fx ) ); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if ( isnan ( fx ) ) {
        return 0;
    }
    return atan2 ( fy, fx );
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck ( T fy, T fx, T epsilon )
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if ( !isnan ( fy ) && !isnan ( fx ) ) {
        if ( IKabs ( fy ) >= IKFAST_ATAN2_MAGTHRESH || IKabs ( fx ) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple ( fy, fx );
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign ( float f ) {
    if ( f > 0 ) {
        return float ( 1 );
    }
    else if ( f < 0 ) {
        return float ( -1 );
    }
    return 0;
}

inline double IKsign ( double f ) {
    if ( f > 0 ) {
        return 1.0;
    }
    else if ( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck ( T f, int n )
{
    CheckValue<T> ret;
    ret.valid = true;
    if ( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if ( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if ( n < 0 )
    {
        if ( f == 0 )
        {
            ret.valid = false;
            ret.value = ( T ) 1.0e30;
            return ret;
        }
        if ( n == -1 ) {
            ret.value = T ( 1.0 ) / f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if ( num == 2 ) {
        ret.value = f * f;
    }
    else if ( num == 3 ) {
        ret.value = f * f * f;
    }
    else {
        ret.value = 1.0;
        while ( num > 0 ) {
            if ( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }

    if ( n < 0 ) {
        ret.value = T ( 1.0 ) / ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk ( const IkReal* j, IkReal* eetrans, IkReal* eerot ) {
    IkReal x0, x1, x2, x3, x4, x5, x6, x7, x8, x9, x10, x11, x12, x13, x14, x15, x16, x17, x18, x19, x20, x21, x22, x23, x24, x25, x26, x27, x28, x29, x30, x31, x32, x33, x34, x35, x36, x37, x38, x39, x40, x41, x42, x43, x44, x45, x46, x47, x48, x49;
    x0 = IKcos ( j[0] );
    x1 = IKcos ( j[1] );
    x2 = IKsin ( j[2] );
    x3 = IKcos ( j[2] );
    x4 = IKsin ( j[1] );
    x5 = IKsin ( j[0] );
    x6 = IKsin ( j[4] );
    x7 = IKcos ( j[4] );
    x8 = IKcos ( j[3] );
    x9 = IKsin ( j[3] );
    x10 = IKsin ( j[5] );
    x11 = IKcos ( j[5] );
    x12 = ( ( 0.1157 ) * x4 );
    x13 = ( ( 0.5723 ) * x1 );
    x14 = ( ( 0.1157 ) * x1 );
    x15 = ( ( 0.5723 ) * x4 );
    x16 = ( ( 0.612 ) * x1 );
    x17 = ( ( 1.0 ) * x6 );
    x18 = ( ( 1.0 ) * x9 );
    x19 = ( ( 1.0 ) * x7 );
    x20 = ( ( 1.0 ) * x8 );
    x21 = ( ( 0.0922 ) * x8 );
    x22 = ( ( 1.0 ) * x4 );
    x23 = ( ( 1.0 ) * x1 );
    x24 = ( ( 0.0922 ) * x9 );
    x25 = ( x0 * x3 );
    x26 = ( x0 * x2 );
    x27 = ( x5 * x7 );
    x28 = ( x2 * x5 );
    x29 = ( x3 * x4 );
    x30 = ( x0 * x7 );
    x31 = ( x3 * x5 );
    x32 = ( x17 * x5 );
    x33 = ( x23 * x3 );
    x34 = ( x23 * x25 );
    x35 = ( x23 * x31 );
    x36 = ( ( ( x1 * x2 ) ) + x29 );
    x37 = ( ( ( ( -1.0 ) * x2 * x22 ) ) + x33 );
    x38 = ( ( ( ( -1.0 ) * x34 ) ) + ( ( x26 * x4 ) ) );
    x39 = ( ( ( ( -1.0 ) * x35 ) ) + ( ( x28 * x4 ) ) );
    x40 = ( ( ( x22 * x25 ) ) + ( ( x23 * x26 ) ) );
    x41 = ( ( ( x23 * x28 ) ) + ( ( x22 * x31 ) ) );
    x42 = ( x41 * x9 );
    x43 = ( ( ( ( -1.0 ) * x18 * x37 ) ) + ( ( ( -1.0 ) * x20 * x36 ) ) );
    x44 = ( ( ( x9 * ( ( ( ( ( 1.0 ) * x22 * x3 ) ) + ( ( ( 1.0 ) * x2 * x23 ) ) ) ) ) ) + ( ( ( -1.0 ) * x37 * x8 ) ) );
    x45 = ( ( ( x40 * x9 ) ) + ( ( x38 * x8 ) ) );
    x46 = ( x42 + ( ( x39 * x8 ) ) );
    x47 = ( x46 * x7 );
    x48 = ( ( ( ( -1.0 ) * x20 * x40 ) ) + ( ( x18 * ( ( ( ( ( -1.0 ) * x34 ) ) + ( ( x22 * x26 ) ) ) ) ) ) );
    x49 = ( ( ( x18 * ( ( ( ( ( -1.0 ) * x35 ) ) + ( ( x22 * x28 ) ) ) ) ) ) + ( ( ( -1.0 ) * x20 * x41 ) ) );
    eerot[0] = ( ( ( x6 * ( ( ( ( ( -1.0 ) * x18 * x40 ) ) + ( ( ( -1.0 ) * x20 * x38 ) ) ) ) ) ) + ( ( ( -1.0 ) * x19 * x5 ) ) );
    eerot[1] = ( ( ( x11 * ( ( ( ( ( -1.0 ) * x19 * x45 ) ) + x32 ) ) ) ) + ( ( x10 * x48 ) ) );
    eerot[2] = ( ( ( x11 * x48 ) ) + ( ( x10 * ( ( ( ( ( -1.0 ) * x32 ) ) + ( ( x45 * x7 ) ) ) ) ) ) );
    IkReal x50 = ( ( 1.0 ) * x26 );
    IkReal x51 = ( ( 1.0 ) * x25 );
    eetrans[0] = ( ( ( x8 * ( ( ( ( ( -1.0 ) * x14 * x50 ) ) + ( ( ( -1.0 ) * x12 * x51 ) ) ) ) ) ) + ( ( x0 * x16 ) ) + ( ( ( -0.0922 ) * x27 ) ) + ( ( ( -1.0 ) * x15 * x50 ) ) + ( ( ( -0.163941 ) * x5 ) ) + ( ( x9 * ( ( ( ( ( -1.0 ) * x14 * x51 ) ) + ( ( x12 * x26 ) ) ) ) ) ) + ( ( x6 * ( ( ( ( ( -1.0 ) * x24 * x40 ) ) + ( ( ( -1.0 ) * x21 * x38 ) ) ) ) ) ) + ( ( x13 * x25 ) ) );
    eerot[3] = ( ( ( x6 * ( ( ( ( ( -1.0 ) * x18 * x41 ) ) + ( ( ( -1.0 ) * x20 * x39 ) ) ) ) ) ) + x30 );
    eerot[4] = ( ( ( x10 * x49 ) ) + ( ( x11 * ( ( ( ( ( -1.0 ) * x0 * x17 ) ) + ( ( ( -1.0 ) * x19 * x46 ) ) ) ) ) ) );
    eerot[5] = ( ( ( x10 * ( ( ( ( x0 * x6 ) ) + x47 ) ) ) ) + ( ( x11 * x49 ) ) );
    IkReal x52 = ( ( 1.0 ) * x14 );
    eetrans[1] = ( ( ( ( -1.0 ) * x15 * x28 ) ) + ( ( x9 * ( ( ( ( ( -1.0 ) * x31 * x52 ) ) + ( ( x12 * x28 ) ) ) ) ) ) + ( ( ( 0.0922 ) * x30 ) ) + ( ( x8 * ( ( ( ( ( -1.0 ) * x12 * x31 ) ) + ( ( ( -1.0 ) * x28 * x52 ) ) ) ) ) ) + ( ( x13 * x31 ) ) + ( ( x16 * x5 ) ) + ( ( x6 * ( ( ( ( ( -1.0 ) * x24 * x41 ) ) + ( ( ( -1.0 ) * x21 * x39 ) ) ) ) ) ) + ( ( ( 0.163941 ) * x0 ) ) );
    eerot[6] = ( x43 * x6 );
    eerot[7] = ( ( ( x10 * x44 ) ) + ( ( x11 * x43 * x7 ) ) );
    eerot[8] = ( ( ( x11 * x44 ) ) + ( ( x10 * x7 * ( ( ( ( x36 * x8 ) ) + ( ( x37 * x9 ) ) ) ) ) ) );
    IkReal x53 = ( ( 1.0 ) * x3 );
    eetrans[2] = ( ( 0.1273 ) + ( ( ( -0.612 ) * x4 ) ) + ( ( ( -1.0 ) * x15 * x53 ) ) + ( ( x8 * ( ( ( ( ( -1.0 ) * x14 * x53 ) ) + ( ( x12 * x2 ) ) ) ) ) ) + ( ( x6 * ( ( ( ( ( -1.0 ) * x24 * x37 ) ) + ( ( ( -1.0 ) * x21 * x36 ) ) ) ) ) ) + ( ( x9 * ( ( ( ( x14 * x2 ) ) + ( ( x12 * x3 ) ) ) ) ) ) + ( ( ( -1.0 ) * x13 * x2 ) ) );
}

IKFAST_API int GetNumFreeParameters() {
    return 0;
}
IKFAST_API int* GetFreeParameters() {
    return NULL;
}
IKFAST_API int GetNumJoints() {
    return 6;
}

IKFAST_API int GetIkRealSize() {
    return sizeof ( IkReal );
}

IKFAST_API int GetIkType() {
    return 0x67000001;
}

class IKSolver {
public:
    IkReal j9, cj9, sj9, htj9, j9mul, j8, cj8, sj8, htj8, j8mul, j7, cj7, sj7, htj7, j7mul, j10, cj10, sj10, htj10, j10mul, j11, cj11, sj11, htj11, j11mul, j12, cj12, sj12, htj12, j12mul, new_r00, r00, rxp0_0, new_r01, r01, rxp0_1, new_r02, r02, rxp0_2, new_r10, r10, rxp1_0, new_r11, r11, rxp1_1, new_r12, r12, rxp1_2, new_r20, r20, rxp2_0, new_r21, r21, rxp2_1, new_r22, r22, rxp2_2, new_px, px, npx, new_py, py, npy, new_pz, pz, npz, pp;
    unsigned char _ij9[2], _nj9, _ij8[2], _nj8, _ij7[2], _nj7, _ij10[2], _nj10, _ij11[2], _nj11, _ij12[2], _nj12;

    IkReal j100, cj100, sj100;
    unsigned char _ij100[2], _nj100;
    bool ComputeIk ( const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions ) {
        j9 = numeric_limits<IkReal>::quiet_NaN();
        _ij9[0] = -1;
        _ij9[1] = -1;
        _nj9 = -1;
        j8 = numeric_limits<IkReal>::quiet_NaN();
        _ij8[0] = -1;
        _ij8[1] = -1;
        _nj8 = -1;
        j7 = numeric_limits<IkReal>::quiet_NaN();
        _ij7[0] = -1;
        _ij7[1] = -1;
        _nj7 = -1;
        j10 = numeric_limits<IkReal>::quiet_NaN();
        _ij10[0] = -1;
        _ij10[1] = -1;
        _nj10 = -1;
        j11 = numeric_limits<IkReal>::quiet_NaN();
        _ij11[0] = -1;
        _ij11[1] = -1;
        _nj11 = -1;
        j12 = numeric_limits<IkReal>::quiet_NaN();
        _ij12[0] = -1;
        _ij12[1] = -1;
        _nj12 = -1;
        for ( int dummyiter = 0; dummyiter < 1; ++dummyiter ) {
            solutions.Clear();
            r00 = eerot[0 * 3 + 0];
            r01 = eerot[0 * 3 + 1];
            r02 = eerot[0 * 3 + 2];
            r10 = eerot[1 * 3 + 0];
            r11 = eerot[1 * 3 + 1];
            r12 = eerot[1 * 3 + 2];
            r20 = eerot[2 * 3 + 0];
            r21 = eerot[2 * 3 + 1];
            r22 = eerot[2 * 3 + 2];
            px = eetrans[0];
            py = eetrans[1];
            pz = eetrans[2];

            new_r00 = ( ( -1.0 ) * r01 );
            new_r01 = ( ( -1.0 ) * r02 );
            new_r02 = r00;
            new_px = ( ( ( ( -0.0922 ) * r00 ) ) + px );
            new_r10 = ( ( -1.0 ) * r11 );
            new_r11 = ( ( -1.0 ) * r12 );
            new_r12 = r10;
            new_py = ( ( ( ( -0.0922 ) * r10 ) ) + py );
            new_r20 = ( ( -1.0 ) * r21 );
            new_r21 = ( ( -1.0 ) * r22 );
            new_r22 = r20;
            new_pz = ( ( -0.1273 ) + ( ( ( -0.0922 ) * r20 ) ) + pz );
            r00 = new_r00;
            r01 = new_r01;
            r02 = new_r02;
            r10 = new_r10;
            r11 = new_r11;
            r12 = new_r12;
            r20 = new_r20;
            r21 = new_r21;
            r22 = new_r22;
            px = new_px;
            py = new_py;
            pz = new_pz;
            IkReal x54 = ( ( 1.0 ) * px );
            IkReal x55 = ( ( 1.0 ) * pz );
            IkReal x56 = ( ( 1.0 ) * py );
            pp = ( ( px * px ) + ( py * py ) + ( pz * pz ) );
            npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) + ( ( pz * r20 ) ) );
            npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) + ( ( pz * r21 ) ) );
            npz = ( ( ( px * r02 ) ) + ( ( py * r12 ) ) + ( ( pz * r22 ) ) );
            rxp0_0 = ( ( ( ( -1.0 ) * r20 * x56 ) ) + ( ( pz * r10 ) ) );
            rxp0_1 = ( ( ( px * r20 ) ) + ( ( ( -1.0 ) * r00 * x55 ) ) );
            rxp0_2 = ( ( ( ( -1.0 ) * r10 * x54 ) ) + ( ( py * r00 ) ) );
            rxp1_0 = ( ( ( ( -1.0 ) * r21 * x56 ) ) + ( ( pz * r11 ) ) );
            rxp1_1 = ( ( ( px * r21 ) ) + ( ( ( -1.0 ) * r01 * x55 ) ) );
            rxp1_2 = ( ( ( ( -1.0 ) * r11 * x54 ) ) + ( ( py * r01 ) ) );
            rxp2_0 = ( ( ( pz * r12 ) ) + ( ( ( -1.0 ) * r22 * x56 ) ) );
            rxp2_1 = ( ( ( px * r22 ) ) + ( ( ( -1.0 ) * r02 * x55 ) ) );
            rxp2_2 = ( ( ( ( -1.0 ) * r12 * x54 ) ) + ( ( py * r02 ) ) );
            IkReal IKFAST_ALIGNED16 ( matrixinvcoeffs[256] );
            IkReal x57 = ( ( 0.2314 ) * npx );
            IkReal x58 = ( ( 0.2314 ) * npy );
            IkReal x59 = ( ( 0.1157 ) * r22 );
            IkReal x60 = ( ( 0.1157 ) * r21 );
            IkReal x61 = ( ( -0.1157 ) * r20 );
            IkReal x62 = ( ( -1.0 ) * r20 );
            IkReal x63 = ( ( -1.0 ) * rxp0_2 );
            IkReal x64 = ( ( -0.1157 ) * r21 );
            IkReal x65 = ( ( -1.0 ) * r21 );
            IkReal x66 = ( ( -1.0 ) * rxp1_2 );
            IkReal x67 = ( ( -1.0 ) * npx );
            IkReal x68 = ( ( -1.0 ) * r22 );
            IkReal x69 = ( ( -1.0 ) * npz );
            matrixinvcoeffs[0] = x61;
            matrixinvcoeffs[1] = x57;
            matrixinvcoeffs[2] = 0;
            matrixinvcoeffs[3] = 0;
            matrixinvcoeffs[4] = 0;
            matrixinvcoeffs[5] = 0;
            matrixinvcoeffs[6] = 0;
            matrixinvcoeffs[7] = 0;
            matrixinvcoeffs[8] = 0;
            matrixinvcoeffs[9] = npx;
            matrixinvcoeffs[10] = x62;
            matrixinvcoeffs[11] = 0;
            matrixinvcoeffs[12] = 0;
            matrixinvcoeffs[13] = 0;
            matrixinvcoeffs[14] = 0;
            matrixinvcoeffs[15] = x63;
            matrixinvcoeffs[16] = 0;
            matrixinvcoeffs[17] = 0;
            matrixinvcoeffs[18] = x61;
            matrixinvcoeffs[19] = x57;
            matrixinvcoeffs[20] = 0;
            matrixinvcoeffs[21] = 0;
            matrixinvcoeffs[22] = 0;
            matrixinvcoeffs[23] = 0;
            matrixinvcoeffs[24] = npx;
            matrixinvcoeffs[25] = 0;
            matrixinvcoeffs[26] = 0;
            matrixinvcoeffs[27] = x62;
            matrixinvcoeffs[28] = 0;
            matrixinvcoeffs[29] = 0;
            matrixinvcoeffs[30] = x63;
            matrixinvcoeffs[31] = 0;
            matrixinvcoeffs[32] = x64;
            matrixinvcoeffs[33] = x58;
            matrixinvcoeffs[34] = 0;
            matrixinvcoeffs[35] = 0;
            matrixinvcoeffs[36] = 0;
            matrixinvcoeffs[37] = 0;
            matrixinvcoeffs[38] = 0;
            matrixinvcoeffs[39] = 0;
            matrixinvcoeffs[40] = 0;
            matrixinvcoeffs[41] = npy;
            matrixinvcoeffs[42] = x65;
            matrixinvcoeffs[43] = 0;
            matrixinvcoeffs[44] = 0;
            matrixinvcoeffs[45] = 0;
            matrixinvcoeffs[46] = 0;
            matrixinvcoeffs[47] = x66;
            matrixinvcoeffs[48] = 0;
            matrixinvcoeffs[49] = 0;
            matrixinvcoeffs[50] = x64;
            matrixinvcoeffs[51] = x58;
            matrixinvcoeffs[52] = 0;
            matrixinvcoeffs[53] = 0;
            matrixinvcoeffs[54] = 0;
            matrixinvcoeffs[55] = 0;
            matrixinvcoeffs[56] = npy;
            matrixinvcoeffs[57] = 0;
            matrixinvcoeffs[58] = 0;
            matrixinvcoeffs[59] = x65;
            matrixinvcoeffs[60] = 0;
            matrixinvcoeffs[61] = 0;
            matrixinvcoeffs[62] = x66;
            matrixinvcoeffs[63] = 0;
            matrixinvcoeffs[64] = 0;
            matrixinvcoeffs[65] = 0;
            matrixinvcoeffs[66] = 0;
            matrixinvcoeffs[67] = 0;
            matrixinvcoeffs[68] = 0;
            matrixinvcoeffs[69] = 0;
            matrixinvcoeffs[70] = 0;
            matrixinvcoeffs[71] = 0;
            matrixinvcoeffs[72] = npz;
            matrixinvcoeffs[73] = 0;
            matrixinvcoeffs[74] = 0;
            matrixinvcoeffs[75] = x68;
            matrixinvcoeffs[76] = x59;
            matrixinvcoeffs[77] = 0;
            matrixinvcoeffs[78] = ( ( -1.0 ) * rxp2_2 );
            matrixinvcoeffs[79] = 0;
            matrixinvcoeffs[80] = 0;
            matrixinvcoeffs[81] = 0;
            matrixinvcoeffs[82] = 0;
            matrixinvcoeffs[83] = 0;
            matrixinvcoeffs[84] = 0;
            matrixinvcoeffs[85] = 0;
            matrixinvcoeffs[86] = 0;
            matrixinvcoeffs[87] = 0;
            matrixinvcoeffs[88] = 0;
            matrixinvcoeffs[89] = x69;
            matrixinvcoeffs[90] = r22;
            matrixinvcoeffs[91] = 0;
            matrixinvcoeffs[92] = 0;
            matrixinvcoeffs[93] = x59;
            matrixinvcoeffs[94] = 0;
            matrixinvcoeffs[95] = rxp2_2;
            matrixinvcoeffs[96] = 0;
            matrixinvcoeffs[97] = 0;
            matrixinvcoeffs[98] = 0;
            matrixinvcoeffs[99] = 0;
            matrixinvcoeffs[100] = r21;
            matrixinvcoeffs[101] = npy;
            matrixinvcoeffs[102] = 0;
            matrixinvcoeffs[103] = 0;
            matrixinvcoeffs[104] = 0;
            matrixinvcoeffs[105] = 0;
            matrixinvcoeffs[106] = 0;
            matrixinvcoeffs[107] = 0;
            matrixinvcoeffs[108] = x66;
            matrixinvcoeffs[109] = 0;
            matrixinvcoeffs[110] = x64;
            matrixinvcoeffs[111] = 0;
            matrixinvcoeffs[112] = 0;
            matrixinvcoeffs[113] = 0;
            matrixinvcoeffs[114] = 0;
            matrixinvcoeffs[115] = 0;
            matrixinvcoeffs[116] = 0;
            matrixinvcoeffs[117] = 0;
            matrixinvcoeffs[118] = r21;
            matrixinvcoeffs[119] = npy;
            matrixinvcoeffs[120] = 0;
            matrixinvcoeffs[121] = 0;
            matrixinvcoeffs[122] = 0;
            matrixinvcoeffs[123] = 0;
            matrixinvcoeffs[124] = 0;
            matrixinvcoeffs[125] = x66;
            matrixinvcoeffs[126] = 0;
            matrixinvcoeffs[127] = x60;
            matrixinvcoeffs[128] = 0;
            matrixinvcoeffs[129] = 0;
            matrixinvcoeffs[130] = 0;
            matrixinvcoeffs[131] = 0;
            matrixinvcoeffs[132] = x62;
            matrixinvcoeffs[133] = x67;
            matrixinvcoeffs[134] = 0;
            matrixinvcoeffs[135] = 0;
            matrixinvcoeffs[136] = 0;
            matrixinvcoeffs[137] = 0;
            matrixinvcoeffs[138] = 0;
            matrixinvcoeffs[139] = 0;
            matrixinvcoeffs[140] = rxp0_2;
            matrixinvcoeffs[141] = 0;
            matrixinvcoeffs[142] = ( ( 0.1157 ) * r20 );
            matrixinvcoeffs[143] = 0;
            matrixinvcoeffs[144] = 0;
            matrixinvcoeffs[145] = 0;
            matrixinvcoeffs[146] = 0;
            matrixinvcoeffs[147] = 0;
            matrixinvcoeffs[148] = 0;
            matrixinvcoeffs[149] = 0;
            matrixinvcoeffs[150] = x62;
            matrixinvcoeffs[151] = x67;
            matrixinvcoeffs[152] = 0;
            matrixinvcoeffs[153] = 0;
            matrixinvcoeffs[154] = 0;
            matrixinvcoeffs[155] = 0;
            matrixinvcoeffs[156] = 0;
            matrixinvcoeffs[157] = rxp0_2;
            matrixinvcoeffs[158] = 0;
            matrixinvcoeffs[159] = x61;
            matrixinvcoeffs[160] = 0;
            matrixinvcoeffs[161] = 0;
            matrixinvcoeffs[162] = 0;
            matrixinvcoeffs[163] = 0;
            matrixinvcoeffs[164] = x68;
            matrixinvcoeffs[165] = x69;
            matrixinvcoeffs[166] = 0;
            matrixinvcoeffs[167] = 0;
            matrixinvcoeffs[168] = 0;
            matrixinvcoeffs[169] = 0;
            matrixinvcoeffs[170] = 0;
            matrixinvcoeffs[171] = 0;
            matrixinvcoeffs[172] = rxp2_2;
            matrixinvcoeffs[173] = 0;
            matrixinvcoeffs[174] = x59;
            matrixinvcoeffs[175] = 0;
            matrixinvcoeffs[176] = 0;
            matrixinvcoeffs[177] = 0;
            matrixinvcoeffs[178] = 0;
            matrixinvcoeffs[179] = 0;
            matrixinvcoeffs[180] = 0;
            matrixinvcoeffs[181] = 0;
            matrixinvcoeffs[182] = x68;
            matrixinvcoeffs[183] = x69;
            matrixinvcoeffs[184] = 0;
            matrixinvcoeffs[185] = 0;
            matrixinvcoeffs[186] = 0;
            matrixinvcoeffs[187] = 0;
            matrixinvcoeffs[188] = 0;
            matrixinvcoeffs[189] = rxp2_2;
            matrixinvcoeffs[190] = 0;
            matrixinvcoeffs[191] = ( ( -0.1157 ) * r22 );
            matrixinvcoeffs[192] = 0;
            matrixinvcoeffs[193] = 0;
            matrixinvcoeffs[194] = 0;
            matrixinvcoeffs[195] = 0;
            matrixinvcoeffs[196] = 0;
            matrixinvcoeffs[197] = 0;
            matrixinvcoeffs[198] = 0;
            matrixinvcoeffs[199] = 0;
            matrixinvcoeffs[200] = npy;
            matrixinvcoeffs[201] = 0;
            matrixinvcoeffs[202] = 0;
            matrixinvcoeffs[203] = x65;
            matrixinvcoeffs[204] = x60;
            matrixinvcoeffs[205] = 0;
            matrixinvcoeffs[206] = x66;
            matrixinvcoeffs[207] = 0;
            matrixinvcoeffs[208] = 0;
            matrixinvcoeffs[209] = 0;
            matrixinvcoeffs[210] = 0;
            matrixinvcoeffs[211] = 0;
            matrixinvcoeffs[212] = 0;
            matrixinvcoeffs[213] = 0;
            matrixinvcoeffs[214] = 0;
            matrixinvcoeffs[215] = 0;
            matrixinvcoeffs[216] = 0;
            matrixinvcoeffs[217] = ( ( -1.0 ) * npy );
            matrixinvcoeffs[218] = r21;
            matrixinvcoeffs[219] = 0;
            matrixinvcoeffs[220] = 0;
            matrixinvcoeffs[221] = x60;
            matrixinvcoeffs[222] = 0;
            matrixinvcoeffs[223] = rxp1_2;
            matrixinvcoeffs[224] = 0;
            matrixinvcoeffs[225] = 0;
            matrixinvcoeffs[226] = 0;
            matrixinvcoeffs[227] = 0;
            matrixinvcoeffs[228] = 0;
            matrixinvcoeffs[229] = 0;
            matrixinvcoeffs[230] = 0;
            matrixinvcoeffs[231] = 0;
            matrixinvcoeffs[232] = x67;
            matrixinvcoeffs[233] = 0;
            matrixinvcoeffs[234] = 0;
            matrixinvcoeffs[235] = r20;
            matrixinvcoeffs[236] = x61;
            matrixinvcoeffs[237] = 0;
            matrixinvcoeffs[238] = rxp0_2;
            matrixinvcoeffs[239] = 0;
            matrixinvcoeffs[240] = 0;
            matrixinvcoeffs[241] = 0;
            matrixinvcoeffs[242] = 0;
            matrixinvcoeffs[243] = 0;
            matrixinvcoeffs[244] = 0;
            matrixinvcoeffs[245] = 0;
            matrixinvcoeffs[246] = 0;
            matrixinvcoeffs[247] = 0;
            matrixinvcoeffs[248] = 0;
            matrixinvcoeffs[249] = npx;
            matrixinvcoeffs[250] = x62;
            matrixinvcoeffs[251] = 0;
            matrixinvcoeffs[252] = 0;
            matrixinvcoeffs[253] = x61;
            matrixinvcoeffs[254] = 0;
            matrixinvcoeffs[255] = x63;
            if ( !matrixinverse<16> ( matrixinvcoeffs ) ) {
                continue;
            }
            IkReal gclwh0_0 = matrixinvcoeffs[0], gclwh0_1 = matrixinvcoeffs[16], gclwh1_2 = matrixinvcoeffs[33], gclwh1_3 = matrixinvcoeffs[49], gclwh2_0 = matrixinvcoeffs[2], gclwh2_1 = matrixinvcoeffs[18], gclwh3_2 = matrixinvcoeffs[35], gclwh3_3 = matrixinvcoeffs[51], gclwh4_2 = matrixinvcoeffs[36], gclwh4_3 = matrixinvcoeffs[52], gclwh4_4 = matrixinvcoeffs[68], gclwh4_8 = matrixinvcoeffs[132], gclwh4_11 = matrixinvcoeffs[180], gclwh4_14 = matrixinvcoeffs[228], gclwh5_0 = matrixinvcoeffs[5], gclwh5_1 = matrixinvcoeffs[21], gclwh5_6 = matrixinvcoeffs[101], gclwh5_9 = matrixinvcoeffs[149], gclwh5_10 = matrixinvcoeffs[165], gclwh5_15 = matrixinvcoeffs[245], gclwh6_2 = matrixinvcoeffs[38], gclwh6_4 = matrixinvcoeffs[70], gclwh6_5 = matrixinvcoeffs[86], gclwh6_11 = matrixinvcoeffs[182], gclwh6_12 = matrixinvcoeffs[198], gclwh7_0 = matrixinvcoeffs[7], gclwh7_6 = matrixinvcoeffs[103], gclwh7_7 = matrixinvcoeffs[119], gclwh7_10 = matrixinvcoeffs[167], gclwh7_13 = matrixinvcoeffs[215], gclwh8_2 = matrixinvcoeffs[40], gclwh8_4 = matrixinvcoeffs[72], gclwh8_5 = matrixinvcoeffs[88], gclwh8_11 = matrixinvcoeffs[184], gclwh8_12 = matrixinvcoeffs[200], gclwh9_0 = matrixinvcoeffs[9], gclwh9_6 = matrixinvcoeffs[105], gclwh9_7 = matrixinvcoeffs[121], gclwh9_10 = matrixinvcoeffs[169], gclwh9_13 = matrixinvcoeffs[217], gclwh10_2 = matrixinvcoeffs[42], gclwh10_4 = matrixinvcoeffs[74], gclwh10_5 = matrixinvcoeffs[90], gclwh10_11 = matrixinvcoeffs[186], gclwh10_12 = matrixinvcoeffs[202], gclwh11_0 = matrixinvcoeffs[11], gclwh11_6 = matrixinvcoeffs[107], gclwh11_7 = matrixinvcoeffs[123], gclwh11_10 = matrixinvcoeffs[171], gclwh11_13 = matrixinvcoeffs[219], gclwh12_2 = matrixinvcoeffs[44], gclwh12_3 = matrixinvcoeffs[60], gclwh12_4 = matrixinvcoeffs[76], gclwh12_8 = matrixinvcoeffs[140], gclwh12_11 = matrixinvcoeffs[188], gclwh12_14 = matrixinvcoeffs[236], gclwh13_0 = matrixinvcoeffs[13], gclwh13_1 = matrixinvcoeffs[29], gclwh13_6 = matrixinvcoeffs[109], gclwh13_9 = matrixinvcoeffs[157], gclwh13_10 = matrixinvcoeffs[173], gclwh13_15 = matrixinvcoeffs[253], gclwh14_2 = matrixinvcoeffs[46], gclwh14_3 = matrixinvcoeffs[62], gclwh14_4 = matrixinvcoeffs[78], gclwh14_8 = matrixinvcoeffs[142], gclwh14_11 = matrixinvcoeffs[190], gclwh14_14 = matrixinvcoeffs[238], gclwh15_0 = matrixinvcoeffs[15], gclwh15_1 = matrixinvcoeffs[31], gclwh15_6 = matrixinvcoeffs[111], gclwh15_9 = matrixinvcoeffs[159], gclwh15_10 = matrixinvcoeffs[175], gclwh15_15 = matrixinvcoeffs[255];
            IkReal op[72], zeror[48];
            int numroots;;
            IkReal x70 = pz * pz;
            IkReal x71 = pp * pp;
            IkReal x72 = ( ( 0.2314 ) * pz );
            IkReal x73 = ( pp * r21 );
            IkReal x74 = ( ( 0.2314 ) * rxp0_2 );
            IkReal x75 = ( ( 0.01338649 ) * r22 );
            IkReal x76 = ( gclwh9_0 * pz );
            IkReal x77 = ( gclwh4_3 * r22 );
            IkReal x78 = ( pp * r20 );
            IkReal x79 = ( ( 0.327882 ) * gclwh14_14 );
            IkReal x80 = ( npy * pz );
            IkReal x81 = ( ( 0.01338649 ) * r21 );
            IkReal x82 = ( ( 0.26486044 ) * rxp0_2 );
            IkReal x83 = ( ( 0.00219459455709 ) * r21 );
            IkReal x84 = ( npz * pz );
            IkReal x85 = ( pp * r22 );
            IkReal x86 = ( gclwh15_1 * r20 );
            IkReal x87 = ( gclwh14_8 * r20 );
            IkReal x88 = ( gclwh13_9 * r21 );
            IkReal x89 = ( ( 0.27404702 ) * rxp2_2 );
            IkReal x90 = ( ( 0.02677298 ) * r22 );
            IkReal x91 = ( ( 2.0 ) * gclwh11_10 );
            IkReal x92 = ( ( 0.26486044 ) * rxp2_2 );
            IkReal x93 = ( gclwh14_2 * pz );
            IkReal x94 = ( gclwh11_0 * pz );
            IkReal x95 = ( ( 1.0 ) * pz );
            IkReal x96 = ( gclwh5_15 * rxp2_2 );
            IkReal x97 = ( ( 0.00219459455709 ) * r20 );
            IkReal x98 = ( ( 2.0 ) * gclwh4_11 );
            IkReal x99 = ( ( 0.000201684224787892 ) * r20 );
            IkReal x100 = ( ( 4.7372 ) * npx );
            IkReal x101 = ( gclwh13_1 * r21 );
            IkReal x102 = ( ( 0.2314 ) * rxp2_2 );
            IkReal x103 = ( gclwh11_13 * r22 );
            IkReal x104 = ( ( 0.01338649 ) * r20 );
            IkReal x105 = ( npx * pz );
            IkReal x106 = ( ( 0.327882 ) * gclwh15_15 );
            IkReal x107 = ( ( 0.327675509152703 ) * rxp0_2 );
            IkReal x108 = ( ( 0.9256 ) * rxp2_2 );
            IkReal x109 = ( ( 0.0379359474 ) * rxp1_2 );
            IkReal x110 = ( gclwh4_14 * rxp2_2 );
            IkReal x111 = ( gclwh13_0 * rxp1_2 );
            IkReal x112 = ( gclwh12_8 * r21 );
            IkReal x113 = ( gclwh6_2 * r21 );
            IkReal x114 = ( gclwh14_11 * rxp0_2 );
            IkReal x115 = ( ( 0.1517437896 ) * rxp1_2 );
            IkReal x116 = ( ( 0.031707240214 ) * r22 );
            IkReal x117 = ( ( 0.015322176454 ) * r22 );
            IkReal x118 = ( ( 0.015322176454 ) * r20 );
            IkReal x119 = ( ( 0.001062887306 ) * r22 );
            IkReal x120 = ( ( 2.0 ) * gclwh9_10 );
            IkReal x121 = ( gclwh12_3 * rxp1_2 );
            IkReal x122 = ( ( 0.2832336 ) * rxp2_2 );
            IkReal x123 = ( ( 0.02677298 ) * r20 );
            IkReal x124 = ( gclwh6_12 * r21 );
            IkReal x125 = ( gclwh12_3 * r21 );
            IkReal x126 = ( gclwh15_9 * r20 );
            IkReal x127 = ( ( 0.05354596 ) * r20 );
            IkReal x128 = ( ( 0.02677298 ) * r21 );
            IkReal x129 = ( ( 0.0379359474 ) * rxp0_2 );
            IkReal x130 = ( gclwh5_0 * rxp2_2 );
            IkReal x131 = ( ( 0.00918658 ) * rxp2_2 );
            IkReal x132 = ( gclwh4_3 * rxp2_2 );
            IkReal x133 = ( ( 0.031707240214 ) * r21 );
            IkReal x134 = ( ( 2.0 ) * gclwh10_11 );
            IkReal x135 = ( ( 4.0 ) * gclwh8_11 );
            IkReal x136 = ( ( 2.0 ) * pp );
            IkReal x137 = ( ( 4.0 ) * gclwh11_10 );
            IkReal x138 = ( gclwh13_9 * rxp1_2 );
            IkReal x139 = ( ( 0.00918658 ) * rxp0_2 );
            IkReal x140 = ( ( 0.015853620107 ) * r22 );
            IkReal x141 = ( gclwh7_13 * r21 );
            IkReal x142 = ( gclwh1_2 * pz );
            IkReal x143 = ( ( 2.0 ) * gclwh7_10 );
            IkReal x144 = ( ( 0.030644352908 ) * r20 );
            IkReal x145 = ( ( 0.2314 ) * rxp1_2 );
            IkReal x146 = ( gclwh5_1 * rxp2_2 );
            IkReal x147 = ( gclwh12_2 * rxp1_2 );
            IkReal x148 = ( gclwh15_0 * pz );
            IkReal x149 = ( gclwh15_9 * rxp0_2 );
            IkReal x150 = ( gclwh4_2 * rxp2_2 );
            IkReal x151 = ( gclwh5_9 * r22 );
            IkReal x152 = ( gclwh12_8 * rxp1_2 );
            IkReal x153 = ( ( 0.4628 ) * rxp1_2 );
            IkReal x154 = ( gclwh7_13 * rxp1_2 );
            IkReal x155 = ( ( 0.26486044 ) * rxp1_2 );
            IkReal x156 = ( gclwh6_2 * rxp1_2 );
            IkReal x157 = ( ( 0.05354596 ) * r21 );
            IkReal x158 = ( gclwh8_2 * pz );
            IkReal x159 = ( ( 0.05354596 ) * r22 );
            IkReal x160 = ( ( 4.0 ) * gclwh9_10 );
            IkReal x161 = ( gclwh5_0 * pz );
            IkReal x162 = ( ( 0.54809404 ) * rxp0_2 );
            IkReal x163 = ( gclwh4_2 * pz );
            IkReal x164 = ( ( 0.015322176454 ) * r21 );
            IkReal x165 = ( gclwh9_0 * r20 );
            IkReal x166 = ( gclwh15_15 * rxp0_2 );
            IkReal x167 = ( ( 4.0 ) * gclwh7_10 );
            IkReal x168 = ( gclwh10_2 * pz );
            IkReal x169 = ( ( 0.327882 ) * gclwh12_14 );
            IkReal x170 = ( gclwh10_12 * r22 );
            IkReal x171 = ( gclwh13_1 * rxp1_2 );
            IkReal x172 = ( ( 0.4628 ) * rxp0_2 );
            IkReal x173 = ( gclwh13_0 * pz );
            IkReal x174 = ( ( 0.0189560282044839 ) * r20 );
            IkReal x175 = ( ( 0.031707240214 ) * r20 );
            IkReal x176 = ( gclwh8_12 * r20 );
            IkReal x177 = ( ( 2.0 ) * gclwh6_11 );
            IkReal x178 = ( ( 2.2892 ) * npx );
            IkReal x179 = ( gclwh2_1 * r21 );
            IkReal x180 = ( ( 2.0 ) * gclwh12_11 );
            IkReal x181 = ( ( 0.00438918911418 ) * r21 );
            IkReal x182 = ( gclwh14_14 * rxp0_2 );
            IkReal x183 = ( ( 0.27404702 ) * rxp0_2 );
            IkReal x184 = ( ( 0.327882 ) * gclwh5_15 );
            IkReal x185 = ( ( 0.0379359474 ) * rxp2_2 );
            IkReal x186 = ( ( 2.0 ) * gclwh8_11 );
            IkReal x187 = ( ( 4.0 ) * gclwh10_11 );
            IkReal x188 = ( gclwh3_3 * r21 );
            IkReal x189 = ( gclwh9_13 * r20 );
            IkReal x190 = ( gclwh5_1 * r22 );
            IkReal x191 = ( ( 0.00438918911418 ) * r22 );
            IkReal x192 = ( ( 2.0 ) * gclwh5_10 );
            IkReal x193 = ( gclwh6_12 * rxp1_2 );
            IkReal x194 = ( ( 2.0 ) * gclwh15_10 );
            IkReal x195 = ( ( 0.0758718948 ) * rxp1_2 );
            IkReal x196 = ( ( 0.327882 ) * gclwh4_14 );
            IkReal x197 = ( ( 0.00438918911418 ) * r20 );
            IkReal x198 = ( ( 0.4628 ) * rxp2_2 );
            IkReal x199 = ( ( 4.0 ) * gclwh6_11 );
            IkReal x200 = ( ( 0.327882 ) * gclwh13_15 );
            IkReal x201 = ( ( 0.01837316 ) * rxp0_2 );
            IkReal x202 = ( ( 0.9256 ) * rxp1_2 );
            IkReal x203 = ( ( 2.0 ) * gclwh13_10 );
            IkReal x204 = ( ( 0.0034863305927034 ) * rxp0_2 );
            IkReal x205 = ( ( 0.00219459455709 ) * r22 );
            IkReal x206 = ( gclwh14_8 * rxp0_2 );
            IkReal x207 = ( gclwh4_8 * r22 );
            IkReal x208 = ( ( 0.02677298 ) * rxp2_2 );
            IkReal x209 = ( ( 2.0 ) * gclwh14_11 );
            IkReal x210 = ( gclwh14_14 * x129 );
            IkReal x211 = ( gclwh6_5 * x83 );
            IkReal x212 = ( gclwh10_5 * x205 );
            IkReal x213 = ( gclwh12_14 * x109 );
            IkReal x214 = ( gclwh8_5 * x97 );
            IkReal x215 = ( ( 0.0379359474 ) * x110 );
            IkReal x216 = ( gclwh4_11 * x102 );
            IkReal x217 = ( gclwh12_11 * x145 );
            IkReal x218 = ( gclwh6_11 * x81 );
            IkReal x219 = ( gclwh4_8 * x208 );
            IkReal x220 = ( ( 0.02677298 ) * x152 );
            IkReal x221 = ( gclwh14_11 * x74 );
            IkReal x222 = ( gclwh10_11 * x75 );
            IkReal x223 = ( gclwh8_11 * x104 );
            IkReal x224 = ( ( 0.02677298 ) * x206 );
            IkReal x225 = ( gclwh11_10 * x75 );
            IkReal x226 = ( gclwh9_10 * x104 );
            IkReal x227 = ( ( 0.02677298 ) * x138 );
            IkReal x228 = ( gclwh15_10 * x74 );
            IkReal x229 = ( gclwh5_9 * x208 );
            IkReal x230 = ( gclwh5_10 * x102 );
            IkReal x231 = ( gclwh13_10 * x145 );
            IkReal x232 = ( ( 0.02677298 ) * x149 );
            IkReal x233 = ( gclwh7_10 * x81 );
            IkReal x234 = ( gclwh15_15 * x129 );
            IkReal x235 = ( gclwh7_7 * x83 );
            IkReal x236 = ( gclwh9_7 * x97 );
            IkReal x237 = ( ( 0.0379359474 ) * x96 );
            IkReal x238 = ( gclwh13_15 * x109 );
            IkReal x239 = ( gclwh11_7 * x205 );
            IkReal x240 = ( gclwh8_5 * x129 );
            IkReal x241 = ( gclwh14_14 * x97 );
            IkReal x242 = ( gclwh10_5 * x185 );
            IkReal x243 = ( gclwh4_14 * x205 );
            IkReal x244 = ( gclwh6_5 * x109 );
            IkReal x245 = ( gclwh12_14 * x83 );
            IkReal x246 = ( gclwh4_11 * x75 );
            IkReal x247 = ( gclwh12_11 * x81 );
            IkReal x248 = ( ( 0.001548816893 ) * x112 );
            IkReal x249 = ( gclwh8_11 * x74 );
            IkReal x250 = ( ( 0.001548816893 ) * x207 );
            IkReal x251 = ( gclwh10_11 * x102 );
            IkReal x252 = ( gclwh14_11 * x104 );
            IkReal x253 = ( gclwh6_11 * x145 );
            IkReal x254 = ( ( 0.001548816893 ) * x87 );
            IkReal x255 = ( gclwh5_10 * x75 );
            IkReal x256 = ( ( 0.001548816893 ) * x126 );
            IkReal x257 = ( gclwh9_10 * x74 );
            IkReal x258 = ( gclwh11_10 * x102 );
            IkReal x259 = ( gclwh13_10 * x81 );
            IkReal x260 = ( ( 0.001548816893 ) * x151 );
            IkReal x261 = ( ( 0.001548816893 ) * x88 );
            IkReal x262 = ( gclwh7_10 * x145 );
            IkReal x263 = ( gclwh15_10 * x104 );
            IkReal x264 = ( gclwh7_7 * x109 );
            IkReal x265 = ( gclwh5_15 * x205 );
            IkReal x266 = ( gclwh13_15 * x83 );
            IkReal x267 = ( gclwh9_7 * x129 );
            IkReal x268 = ( gclwh11_7 * x185 );
            IkReal x269 = ( gclwh15_15 * x97 );
            IkReal x270 = ( ( 0.4628 ) * x114 );
            IkReal x271 = ( gclwh10_11 * x90 );
            IkReal x272 = ( gclwh8_11 * x123 );
            IkReal x273 = ( ( 0.0758718948 ) * x182 );
            IkReal x274 = ( ( 0.0758718948 ) * x110 );
            IkReal x275 = ( gclwh12_14 * x195 );
            IkReal x276 = ( gclwh4_11 * x198 );
            IkReal x277 = ( gclwh6_11 * x128 );
            IkReal x278 = ( gclwh12_11 * x153 );
            IkReal x279 = ( gclwh13_15 * x195 );
            IkReal x280 = ( ( 0.0758718948 ) * x96 );
            IkReal x281 = ( ( 0.0758718948 ) * x166 );
            IkReal x282 = ( gclwh15_10 * x172 );
            IkReal x283 = ( gclwh11_10 * x90 );
            IkReal x284 = ( gclwh9_10 * x123 );
            IkReal x285 = ( gclwh13_10 * x153 );
            IkReal x286 = ( gclwh7_10 * x128 );
            IkReal x287 = ( gclwh5_10 * x198 );
            IkReal x288 = ( gclwh6_11 * x153 );
            IkReal x289 = ( gclwh14_11 * x123 );
            IkReal x290 = ( gclwh14_14 * x197 );
            IkReal x291 = ( gclwh4_14 * x191 );
            IkReal x292 = ( gclwh12_14 * x181 );
            IkReal x293 = ( pp * x145 );
            IkReal x294 = ( ( 2.0 ) * x70 );
            IkReal x295 = ( ( 1.0 ) * x71 );
            IkReal x296 = ( r20 * x71 );
            IkReal x297 = ( ( 0.163941 ) * gclwh6_5 * x73 );
            IkReal x298 = ( ( 0.327882 ) * gclwh10_5 * x84 );
            IkReal x299 = ( ( 0.327882 ) * gclwh8_5 * x105 );
            IkReal x300 = ( ( 0.163941 ) * gclwh10_5 * x85 );
            IkReal x301 = ( ( 0.327882 ) * gclwh6_5 * x80 );
            IkReal x302 = ( ( 0.163941 ) * gclwh8_5 * x78 );
            IkReal x303 = ( gclwh14_2 * rxp0_2 * x72 );
            IkReal x304 = ( ( 0.2314 ) * pp * x121 );
            IkReal x305 = ( x168 * x75 );
            IkReal x306 = ( x134 * x84 );
            IkReal x307 = ( x105 * x186 );
            IkReal x308 = ( x168 * x85 );
            IkReal x309 = ( gclwh4_3 * pp * x102 );
            IkReal x310 = ( x158 * x78 );
            IkReal x311 = ( x104 * x158 );
            IkReal x312 = ( x177 * x80 );
            IkReal x313 = ( gclwh14_3 * pp * x74 );
            IkReal x314 = ( x150 * x72 );
            IkReal x315 = ( x147 * x72 );
            IkReal x316 = ( gclwh6_2 * pz * x81 );
            IkReal x317 = ( x75 * x94 );
            IkReal x318 = ( gclwh13_1 * x293 );
            IkReal x319 = ( gclwh15_0 * rxp0_2 * x72 );
            IkReal x320 = ( gclwh5_1 * pp * x102 );
            IkReal x321 = ( x104 * x76 );
            IkReal x322 = ( x85 * x94 );
            IkReal x323 = ( x143 * x80 );
            IkReal x324 = ( x76 * x78 );
            IkReal x325 = ( gclwh7_0 * pz * x81 );
            IkReal x326 = ( x84 * x91 );
            IkReal x327 = ( x111 * x72 );
            IkReal x328 = ( x105 * x120 );
            IkReal x329 = ( gclwh15_1 * pp * x74 );
            IkReal x330 = ( x130 * x72 );
            IkReal x331 = ( ( 0.327882 ) * gclwh11_7 * x84 );
            IkReal x332 = ( ( 0.163941 ) * gclwh7_7 * x73 );
            IkReal x333 = ( ( 0.327882 ) * gclwh9_7 * x105 );
            IkReal x334 = ( ( 0.163941 ) * gclwh11_7 * x85 );
            IkReal x335 = ( ( 0.327882 ) * gclwh7_7 * x80 );
            IkReal x336 = ( ( 0.163941 ) * gclwh9_7 * x78 );
            IkReal x337 = ( ( 0.163941 ) * gclwh14_14 * x78 );
            IkReal x338 = ( x169 * x80 );
            IkReal x339 = ( x196 * x84 );
            IkReal x340 = ( ( 0.163941 ) * gclwh12_14 * x73 );
            IkReal x341 = ( ( 0.163941 ) * gclwh4_14 * x85 );
            IkReal x342 = ( x105 * x79 );
            IkReal x343 = ( x78 * x93 );
            IkReal x344 = ( ( 0.1157 ) * gclwh4_8 * x85 );
            IkReal x345 = ( x156 * x72 );
            IkReal x346 = ( x125 * x71 );
            IkReal x347 = ( x104 * x142 );
            IkReal x348 = ( ( 0.1157 ) * gclwh12_8 * x73 );
            IkReal x349 = ( x104 * x93 );
            IkReal x350 = ( gclwh14_8 * npx * x72 );
            IkReal x351 = ( x188 * x71 );
            IkReal x352 = ( gclwh1_3 * x296 );
            IkReal x353 = ( x105 * x209 );
            IkReal x354 = ( gclwh3_2 * pz * x81 );
            IkReal x355 = ( x71 * x77 );
            IkReal x356 = ( gclwh12_2 * pz * x81 );
            IkReal x357 = ( x84 * x98 );
            IkReal x358 = ( gclwh12_8 * npy * x72 );
            IkReal x359 = ( gclwh10_2 * rxp2_2 * x72 );
            IkReal x360 = ( x163 * x75 );
            IkReal x361 = ( gclwh4_8 * npz * x72 );
            IkReal x362 = ( x180 * x80 );
            IkReal x363 = ( ( 0.1157 ) * gclwh14_8 * x78 );
            IkReal x364 = ( gclwh8_2 * rxp0_2 * x72 );
            IkReal x365 = ( gclwh2_0 * pz * x81 );
            IkReal x366 = ( x71 * x86 );
            IkReal x367 = ( gclwh11_0 * rxp2_2 * x72 );
            IkReal x368 = ( x161 * x85 );
            IkReal x369 = ( x173 * x73 );
            IkReal x370 = ( gclwh0_0 * pz * x104 );
            IkReal x371 = ( gclwh5_9 * npz * x72 );
            IkReal x372 = ( x161 * x75 );
            IkReal x373 = ( x173 * x81 );
            IkReal x374 = ( gclwh13_9 * npy * x72 );
            IkReal x375 = ( ( 0.1157 ) * gclwh15_9 * x78 );
            IkReal x376 = ( x105 * x194 );
            IkReal x377 = ( gclwh9_0 * rxp0_2 * x72 );
            IkReal x378 = ( x179 * x71 );
            IkReal x379 = ( gclwh0_1 * x296 );
            IkReal x380 = ( ( 0.1157 ) * gclwh5_9 * x85 );
            IkReal x381 = ( x192 * x84 );
            IkReal x382 = ( ( 0.1157 ) * gclwh13_9 * x73 );
            IkReal x383 = ( x203 * x80 );
            IkReal x384 = ( gclwh7_0 * rxp1_2 * x72 );
            IkReal x385 = ( gclwh15_9 * npx * x72 );
            IkReal x386 = ( x104 * x148 );
            IkReal x387 = ( ( 0.163941 ) * gclwh13_15 * x73 );
            IkReal x388 = ( ( 0.163941 ) * gclwh5_15 * x85 );
            IkReal x389 = ( x105 * x106 );
            IkReal x390 = ( x200 * x80 );
            IkReal x391 = ( ( 0.163941 ) * gclwh15_15 * x78 );
            IkReal x392 = ( x184 * x84 );
            IkReal x393 = ( x186 * x78 );
            IkReal x394 = ( x134 * x85 );
            IkReal x395 = ( x199 * x80 );
            IkReal x396 = ( x105 * x135 );
            IkReal x397 = ( x177 * x73 );
            IkReal x398 = ( x187 * x84 );
            IkReal x399 = ( x85 * x91 );
            IkReal x400 = ( x167 * x80 );
            IkReal x401 = ( x120 * x78 );
            IkReal x402 = ( x143 * x73 );
            IkReal x403 = ( x105 * x160 );
            IkReal x404 = ( x137 * x84 );
            IkReal x405 = ( x209 * x78 );
            IkReal x406 = ( ( 4.0 ) * gclwh12_11 * x80 );
            IkReal x407 = ( ( 4.0 ) * gclwh4_11 * x84 );
            IkReal x408 = ( x78 * x79 );
            IkReal x409 = ( ( 0.655764 ) * gclwh12_14 * x80 );
            IkReal x410 = ( ( 0.655764 ) * gclwh4_14 * x84 );
            IkReal x411 = ( ( 0.655764 ) * gclwh14_14 * x105 );
            IkReal x412 = ( x169 * x73 );
            IkReal x413 = ( x196 * x85 );
            IkReal x414 = ( gclwh6_2 * npy * x294 );
            IkReal x415 = ( gclwh6_2 * x73 * x95 );
            IkReal x416 = ( gclwh10_2 * npz * x294 );
            IkReal x417 = ( gclwh8_2 * npx * x294 );
            IkReal x418 = ( gclwh7_0 * npy * x294 );
            IkReal x419 = ( gclwh9_0 * npx * x294 );
            IkReal x420 = ( gclwh11_0 * npz * x294 );
            IkReal x421 = ( gclwh7_0 * x73 * x95 );
            IkReal x422 = ( gclwh12_2 * npy * x294 );
            IkReal x423 = ( gclwh3_2 * npy * x294 );
            IkReal x424 = ( gclwh1_2 * npx * x294 );
            IkReal x425 = ( gclwh14_3 * x105 * x136 );
            IkReal x426 = ( gclwh4_2 * npz * x294 );
            IkReal x427 = ( gclwh4_3 * x136 * x84 );
            IkReal x428 = ( gclwh12_2 * x73 * x95 );
            IkReal x429 = ( gclwh1_2 * x78 * x95 );
            IkReal x430 = ( gclwh3_3 * x136 * x80 );
            IkReal x431 = ( gclwh4_2 * x85 * x95 );
            IkReal x432 = ( gclwh1_3 * x105 * x136 );
            IkReal x433 = ( gclwh3_2 * x73 * x95 );
            IkReal x434 = ( gclwh12_3 * x136 * x80 );
            IkReal x435 = ( gclwh14_2 * npx * x294 );
            IkReal x436 = ( gclwh14_3 * r20 * x295 );
            IkReal x437 = ( gclwh0_0 * npx * x294 );
            IkReal x438 = ( gclwh2_0 * npy * x294 );
            IkReal x439 = ( gclwh5_1 * x136 * x84 );
            IkReal x440 = ( gclwh13_1 * x136 * x80 );
            IkReal x441 = ( gclwh15_0 * npx * x294 );
            IkReal x442 = ( gclwh2_1 * x136 * x80 );
            IkReal x443 = ( gclwh0_1 * x105 * x136 );
            IkReal x444 = ( gclwh5_0 * npz * x294 );
            IkReal x445 = ( gclwh13_0 * npy * x294 );
            IkReal x446 = ( gclwh0_0 * x78 * x95 );
            IkReal x447 = ( gclwh15_0 * x78 * x95 );
            IkReal x448 = ( gclwh2_0 * x73 * x95 );
            IkReal x449 = ( x101 * x295 );
            IkReal x450 = ( x190 * x295 );
            IkReal x451 = ( gclwh15_1 * x105 * x136 );
            IkReal x452 = ( x238 + x237 );
            IkReal x453 = ( x267 + x268 );
            IkReal x454 = ( x274 + x275 );
            IkReal x455 = ( x279 + x280 );
            IkReal x456 = ( x213 + x215 );
            IkReal x457 = ( x242 + x240 );
            IkReal x458 = ( x312 + x221 + x223 + x222 );
            IkReal x459 = ( x323 + x228 + x225 + x226 );
            IkReal x460 = ( x357 + x362 + x252 + x253 );
            IkReal x461 = ( x383 + x381 + x263 + x262 );
            IkReal x462 = ( x333 + x332 + x331 + x235 );
            IkReal x463 = ( x391 + x390 + x392 + x269 );
            IkReal x464 = ( x211 + x298 + x299 + x297 );
            IkReal x465 = ( x290 + x409 + x408 + x410 );
            IkReal x466 = ( x339 + x338 + x337 + x241 );
            IkReal x467 = ( x353 + x251 + x247 + x246 + x249 );
            IkReal x468 = ( x376 + x258 + x259 + x255 + x257 );
            IkReal x469 = ( x326 + x328 + x233 + x230 + x231 );
            IkReal x470 = ( x306 + x307 + x216 + x217 + x218 );
            IkReal x471 = ( x387 + x388 + x389 + x265 + x266 );
            IkReal x472 = ( x336 + x335 + x334 + x239 + x236 );
            IkReal x473 = ( x302 + x300 + x301 + x212 + x214 );
            IkReal x474 = ( x289 + x288 + x405 + x407 + x406 );
            IkReal x475 = ( x291 + x292 + x412 + x413 + x411 );
            IkReal x476 = ( x342 + x340 + x341 + x243 + x245 );
            IkReal x477 = ( x397 + x396 + x398 + x276 + x277 + x278 );
            IkReal x478 = ( x287 + x286 + x285 + x403 + x402 + x404 );
            IkReal x479 = ( x399 + x284 + x283 + x282 + x401 + x400 );
            IkReal x480 = ( x395 + x394 + x393 + x272 + x270 + x271 );
            IkReal x481 = ( ( ( gclwh10_11 * x198 ) ) + ( ( ( 4.0 ) * gclwh14_11 * x105 ) ) + ( ( x180 * x73 ) ) + ( ( x85 * x98 ) ) + ( ( gclwh4_11 * x90 ) ) + ( ( gclwh8_11 * x172 ) ) + ( ( gclwh12_11 * x128 ) ) );
            IkReal x482 = ( x330 + x325 + x327 + x329 + x232 + x419 + x421 + x420 );
            IkReal x483 = ( x315 + x314 + x316 + x313 + x224 + x416 + x417 + x415 );
            IkReal x484 = ( x308 + x309 + x304 + x305 + x303 + x311 + x310 + x219 + x220 + x414 );
            IkReal x485 = ( x324 + x320 + x321 + x322 + x319 + x318 + x317 + x229 + x227 + x418 );
            IkReal x486 = ( x386 + x384 + x385 + x382 + x380 + x261 + x260 + x449 + x448 + x445 + x444 + x447 + x446 + x443 + x442 + x450 + x451 );
            IkReal x487 = ( x351 + x350 + x352 + x355 + x354 + x343 + x346 + x347 + x344 + x345 + x348 + x349 + x250 + x248 + x426 + x425 + x424 + x423 + x422 + x72 );
            IkReal x488 = ( x356 + x359 + x358 + x360 + x361 + x363 + x364 + x254 + x429 + x428 + x427 + x430 + x431 + x432 + x433 + x434 + x435 + x436 );
            IkReal x489 = ( x379 + x378 + x377 + x375 + x374 + x373 + x372 + x371 + x370 + x368 + x369 + x365 + x366 + x367 + x256 + x438 + x439 + x437 + x441 + x440 + x72 );
            op[0] = ( ( ( ( -1.1843 ) * gclwh10_12 * x85 ) ) + ( ( ( -2.3686 ) * gclwh6_12 * x80 ) ) + ( ( ( -0.27404702 ) * x152 ) ) + ( ( ( -1.0 ) * x473 ) ) + ( ( ( 0.015853620107 ) * x124 ) ) + ( ( ( -1.0 ) * gclwh4_8 * x89 ) ) + ( ( ( 2.3686 ) * gclwh8_12 * x105 ) ) + x456 + x464 + ( ( ( -1.1843 ) * gclwh8_12 * x78 ) ) + ( ( ( 1.1843 ) * gclwh6_12 * x73 ) ) + ( ( gclwh14_8 * x183 ) ) + ( ( ( 2.3686 ) * gclwh10_12 * x84 ) ) + ( ( ( -0.015853620107 ) * x176 ) ) + ( ( ( -1.0 ) * x210 ) ) + ( ( ( -1.0 ) * gclwh10_12 * x140 ) ) );
            op[1] = ( ( ( ( -1.0 ) * x483 ) ) + ( ( ( -0.327675509152703 ) * x121 ) ) + ( ( gclwh14_3 * x107 ) ) + ( ( ( -1.0 ) * x470 ) ) + ( ( ( -0.327675509152703 ) * x132 ) ) + x484 + x458 + ( ( ( -1.0 ) * gclwh6_11 * x73 ) ) + ( ( gclwh8_11 * x78 ) ) + ( ( gclwh10_11 * x85 ) ) );
            op[2] = ( ( -0.3752937372 ) + ( ( ( -1.0 ) * x477 ) ) + x480 );
            op[3] = ( ( ( ( -2.2892 ) * gclwh8_2 * x105 ) ) + ( ( ( -1.1446 ) * gclwh6_2 * x73 ) ) + ( ( ( -1.0 ) * gclwh4_2 * x92 ) ) + ( ( gclwh8_2 * x118 ) ) + ( ( ( 0.2832336 ) * x152 ) ) + ( ( ( 1.1446 ) * gclwh8_2 * x78 ) ) + ( ( ( -0.015322176454 ) * x113 ) ) + ( ( ( -1.0 ) * x454 ) ) + x273 + ( ( ( -0.26486044 ) * x147 ) ) + ( ( gclwh14_2 * x82 ) ) + ( ( ( -2.2892 ) * gclwh10_2 * x84 ) ) + ( ( ( 2.2892 ) * gclwh6_2 * x80 ) ) + ( ( ( 1.1446 ) * gclwh10_2 * x85 ) ) + ( ( gclwh10_2 * x117 ) ) + ( ( gclwh4_8 * x122 ) ) + ( ( ( -0.2832336 ) * x206 ) ) );
            op[4] = ( ( ( ( -1.0 ) * gclwh14_8 * x139 ) ) + ( ( ( -0.0397 ) * gclwh8_12 * x78 ) ) + ( ( ( 0.0397 ) * gclwh6_12 * x73 ) ) + ( ( ( 0.0794 ) * gclwh8_12 * x105 ) ) + ( ( ( 0.000531443653 ) * x124 ) ) + ( ( ( 0.00918658 ) * x152 ) ) + ( ( ( -0.000531443653 ) * x176 ) ) + ( ( ( -0.000531443653 ) * x170 ) ) + ( ( ( -1.0 ) * x473 ) ) + ( ( ( -1.0 ) * x456 ) ) + x210 + ( ( ( -0.0397 ) * gclwh10_12 * x85 ) ) + x464 + ( ( ( -0.0794 ) * gclwh6_12 * x80 ) ) + ( ( gclwh4_8 * x131 ) ) + ( ( ( 0.0794 ) * gclwh10_12 * x84 ) ) );
            op[5] = ( ( ( gclwh6_11 * x73 ) ) + ( ( ( -1.0 ) * x483 ) ) + ( ( ( -1.0 ) * gclwh10_11 * x85 ) ) + ( ( ( -1.0 ) * x458 ) ) + x484 + x470 + ( ( gclwh14_3 * x204 ) ) + ( ( ( -0.0034863305927034 ) * x132 ) ) + ( ( ( -0.0034863305927034 ) * x121 ) ) + ( ( ( -1.0 ) * gclwh8_11 * x78 ) ) );
            op[6] = ( ( ( gclwh7_10 * x73 ) ) + ( ( ( -1.0 ) * x482 ) ) + ( ( gclwh15_1 * x107 ) ) + ( ( ( -0.327675509152703 ) * x146 ) ) + ( ( ( -1.0 ) * x459 ) ) + x485 + x469 + ( ( ( -0.327675509152703 ) * x171 ) ) + ( ( ( -1.0 ) * gclwh9_10 * x78 ) ) + ( ( ( -1.0 ) * gclwh11_10 * x85 ) ) );
            op[7] = ( ( ( ( -1.1843 ) * gclwh9_13 * x78 ) ) + ( ( ( -0.015853620107 ) * x103 ) ) + ( ( ( -1.0 ) * x472 ) ) + ( ( ( -1.0 ) * gclwh5_9 * x89 ) ) + ( ( ( -1.0 ) * x234 ) ) + ( ( ( 0.015853620107 ) * x141 ) ) + ( ( ( 0.27404702 ) * x149 ) ) + x452 + x462 + ( ( ( 2.3686 ) * gclwh11_13 * x84 ) ) + ( ( ( -0.015853620107 ) * x189 ) ) + ( ( ( -1.1843 ) * gclwh11_13 * x85 ) ) + ( ( ( 1.1843 ) * gclwh7_13 * x73 ) ) + ( ( ( -0.27404702 ) * x138 ) ) + ( ( ( -2.3686 ) * gclwh7_13 * x80 ) ) + ( ( ( 2.3686 ) * gclwh9_13 * x105 ) ) );
            op[8] = ( ( ( ( -0.26486044 ) * x111 ) ) + ( ( ( -1.1446 ) * gclwh7_0 * x73 ) ) + ( ( ( 1.1446 ) * gclwh11_0 * x85 ) ) + ( ( ( -1.0 ) * gclwh5_9 * x122 ) ) + ( ( gclwh15_0 * x82 ) ) + ( ( ( 0.2832336 ) * x149 ) ) + ( ( gclwh11_0 * x117 ) ) + ( ( ( -1.0 ) * x178 * x76 ) ) + ( ( ( -0.2832336 ) * x138 ) ) + ( ( ( -1.0 ) * gclwh7_0 * x164 ) ) + x455 + ( ( ( 2.2892 ) * gclwh7_0 * x80 ) ) + ( ( ( -1.0 ) * x281 ) ) + ( ( gclwh9_0 * x118 ) ) + ( ( ( 1.1446 ) * gclwh9_0 * x78 ) ) + ( ( ( -2.2892 ) * gclwh11_0 * x84 ) ) + ( ( ( -1.0 ) * gclwh5_0 * x92 ) ) );
            op[9] = ( ( -0.3752937372 ) + ( ( ( -1.0 ) * x478 ) ) + x479 );
            op[10] = ( ( ( ( -1.0 ) * x482 ) ) + ( ( ( -1.0 ) * x469 ) ) + ( ( ( -1.0 ) * gclwh7_10 * x73 ) ) + ( ( ( -0.0034863305927034 ) * x146 ) ) + x485 + x459 + ( ( gclwh15_1 * x204 ) ) + ( ( ( -0.0034863305927034 ) * x171 ) ) + ( ( gclwh11_10 * x85 ) ) + ( ( gclwh9_10 * x78 ) ) );
            op[11] = ( ( ( ( 0.0794 ) * gclwh9_13 * x105 ) ) + ( ( ( 0.0397 ) * gclwh7_13 * x73 ) ) + ( ( gclwh5_9 * x131 ) ) + ( ( ( -1.0 ) * x472 ) ) + ( ( ( 0.00918658 ) * x138 ) ) + ( ( ( -0.000531443653 ) * x103 ) ) + ( ( ( -0.000531443653 ) * x189 ) ) + ( ( ( -1.0 ) * x452 ) ) + x234 + ( ( ( -0.0397 ) * gclwh11_13 * x85 ) ) + ( ( ( 0.0794 ) * gclwh11_13 * x84 ) ) + x462 + ( ( ( 0.000531443653 ) * x141 ) ) + ( ( ( -0.0794 ) * gclwh7_13 * x80 ) ) + ( ( ( -1.0 ) * gclwh15_9 * x139 ) ) + ( ( ( -0.0397 ) * gclwh9_13 * x78 ) ) );
            op[12] = ( ( ( ( -1.0 ) * gclwh4_8 * x140 ) ) + ( ( ( -0.015853620107 ) * x112 ) ) + ( ( ( -1.1843 ) * gclwh12_8 * x73 ) ) + ( ( ( 0.015853620107 ) * x87 ) ) + ( ( ( -0.27404702 ) * x193 ) ) + ( ( ( -1.0 ) * x466 ) ) + ( ( gclwh10_12 * x89 ) ) + ( ( ( 2.3686 ) * gclwh12_8 * x80 ) ) + ( ( gclwh8_12 * x183 ) ) + x457 + x476 + ( ( ( -1.0 ) * x244 ) ) + ( ( ( -1.1843 ) * gclwh4_8 * x85 ) ) + ( ( ( 2.3686 ) * gclwh4_8 * x84 ) ) + ( ( ( -2.3686 ) * gclwh14_8 * x105 ) ) + ( ( ( 1.1843 ) * gclwh14_8 * x78 ) ) );
            op[13] = ( ( -1.429443141481 ) + ( ( ( -0.0189560282044839 ) * x77 ) ) + ( ( ( 0.0189560282044839 ) * x188 ) ) + ( ( ( -1.429443141481 ) * gclwh1_3 * x78 ) ) + ( ( ( -1.0 ) * x488 ) ) + ( ( ( -1.0 ) * gclwh4_11 * x85 ) ) + ( ( ( -2.832113302962 ) * gclwh14_3 * x105 ) ) + ( ( ( 2.832113302962 ) * gclwh4_3 * x84 ) ) + ( ( ( 2.832113302962 ) * gclwh12_3 * x80 ) ) + ( ( ( 1.402670161481 ) * gclwh14_3 * x78 ) ) + ( ( ( -1.0 ) * x467 ) ) + ( ( ( 2.832113302962 ) * gclwh1_3 * x105 ) ) + ( ( ( -1.0 ) * gclwh12_11 * x73 ) ) + x487 + x460 + ( ( ( -1.402670161481 ) * gclwh12_3 * x73 ) ) + ( ( gclwh14_11 * x78 ) ) + ( ( gclwh1_3 * x174 ) ) + ( ( ( 2.832113302962 ) * gclwh3_3 * x80 ) ) + ( ( ( -1.429443141481 ) * gclwh3_3 * x73 ) ) + ( ( ( -0.0189560282044839 ) * x125 ) ) + ( ( gclwh14_3 * x174 ) ) + ( ( ( -1.402670161481 ) * pp * x77 ) ) );
            op[14] = ( ( -0.147786722962 ) + ( ( ( -1.0 ) * x481 ) ) + x474 );
            op[15] = ( ( ( ( -1.0 ) * x178 * x93 ) ) + ( ( ( 2.2892 ) * gclwh4_2 * x84 ) ) + ( ( ( -1.0 ) * gclwh12_2 * x164 ) ) + ( ( ( 0.01638506376 ) * x207 ) ) + ( ( ( -1.1446 ) * gclwh4_2 * x85 ) ) + ( ( ( -1.0 ) * gclwh8_2 * x82 ) ) + ( ( ( 2.2892 ) * gclwh3_2 * x80 ) ) + ( ( ( -1.0 ) * gclwh4_2 * x117 ) ) + ( ( ( -0.01638506376 ) * x87 ) ) + ( ( ( 1.1446 ) * gclwh14_2 * x78 ) ) + ( ( gclwh14_2 * x118 ) ) + ( ( ( -1.0 ) * x475 ) ) + ( ( ( -2.448 ) * gclwh4_8 * x84 ) ) + ( ( ( -1.0 ) * gclwh10_2 * x92 ) ) + ( ( ( 1.224 ) * gclwh4_8 * x85 ) ) + x465 + ( ( ( 2.2892 ) * gclwh1_2 * x105 ) ) + ( ( ( 2.448 ) * gclwh14_8 * x105 ) ) + ( ( ( -1.1446 ) * gclwh12_2 * x73 ) ) + ( ( gclwh1_2 * x118 ) ) + ( ( ( -1.224 ) * gclwh14_8 * x78 ) ) + ( ( ( 1.224 ) * gclwh12_8 * x73 ) ) + ( ( ( 2.2892 ) * gclwh12_2 * x80 ) ) + ( ( gclwh3_2 * x164 ) ) + ( ( gclwh6_2 * x155 ) ) + ( ( ( -1.1446 ) * gclwh3_2 * x73 ) ) + ( ( ( 0.01638506376 ) * x112 ) ) + ( ( ( -2.448 ) * gclwh12_8 * x80 ) ) + ( ( ( -1.1446 ) * gclwh1_2 * x78 ) ) );
            op[16] = ( ( ( gclwh8_12 * x139 ) ) + ( ( ( 0.0397 ) * gclwh12_8 * x73 ) ) + ( ( ( -0.0794 ) * gclwh12_8 * x80 ) ) + ( ( ( 0.0794 ) * gclwh14_8 * x105 ) ) + ( ( ( -1.0 ) * x476 ) ) + ( ( ( 0.000531443653 ) * x207 ) ) + ( ( gclwh10_12 * x131 ) ) + ( ( ( 0.000531443653 ) * x112 ) ) + x457 + x466 + ( ( ( -0.0397 ) * gclwh14_8 * x78 ) ) + ( ( ( -1.0 ) * x244 ) ) + ( ( ( -0.000531443653 ) * x87 ) ) + ( ( ( -0.0794 ) * gclwh4_8 * x84 ) ) + ( ( ( -0.00918658 ) * x193 ) ) + ( ( ( 0.0397 ) * gclwh4_8 * x85 ) ) );
            op[17] = ( ( 0.028452741481 ) + ( ( ( -0.028452741481 ) * gclwh1_3 * x78 ) ) + ( ( ( 0.030132502962 ) * gclwh12_3 * x80 ) ) + ( ( ( -0.000201684224787892 ) * x125 ) ) + ( ( ( -1.0 ) * x488 ) ) + ( ( ( 0.030132502962 ) * gclwh3_3 * x80 ) ) + ( ( ( 0.000201684224787892 ) * x188 ) ) + ( ( gclwh12_11 * x73 ) ) + ( ( ( -1.0 ) * x460 ) ) + ( ( gclwh4_11 * x85 ) ) + ( ( ( -0.030132502962 ) * gclwh14_3 * x105 ) ) + ( ( ( -0.001679761481 ) * gclwh12_3 * x73 ) ) + x487 + x467 + ( ( ( 0.001679761481 ) * gclwh14_3 * x78 ) ) + ( ( gclwh1_3 * x99 ) ) + ( ( gclwh14_3 * x99 ) ) + ( ( ( -0.028452741481 ) * gclwh3_3 * x73 ) ) + ( ( ( -0.001679761481 ) * pp * x77 ) ) + ( ( ( -0.000201684224787892 ) * x77 ) ) + ( ( ( -1.0 ) * gclwh14_11 * x78 ) ) + ( ( ( 0.030132502962 ) * gclwh4_3 * x84 ) ) + ( ( ( 0.030132502962 ) * gclwh1_3 * x105 ) ) );
            op[18] = ( ( 1.429443141481 ) + ( ( ( 2.832113302962 ) * gclwh2_1 * x80 ) ) + ( ( ( 0.0189560282044839 ) * x190 ) ) + ( ( ( -1.0 ) * gclwh13_10 * x73 ) ) + ( ( ( -1.402670161481 ) * gclwh15_1 * x78 ) ) + ( ( ( -0.0189560282044839 ) * x86 ) ) + ( ( ( 0.0189560282044839 ) * x179 ) ) + ( ( ( -1.0 ) * gclwh5_10 * x85 ) ) + ( ( ( -1.0 ) * x486 ) ) + ( ( ( 1.402670161481 ) * gclwh5_1 * x85 ) ) + ( ( ( 2.832113302962 ) * gclwh15_1 * x105 ) ) + ( ( ( -1.429443141481 ) * gclwh2_1 * x73 ) ) + ( ( ( 0.0189560282044839 ) * x101 ) ) + ( ( ( -1.0 ) * x468 ) ) + ( ( ( -1.429443141481 ) * gclwh0_1 * x78 ) ) + x489 + x461 + ( ( ( 2.832113302962 ) * gclwh0_1 * x105 ) ) + ( ( ( 1.402670161481 ) * gclwh13_1 * x73 ) ) + ( ( gclwh15_10 * x78 ) ) + ( ( gclwh0_1 * x174 ) ) + ( ( ( -2.832113302962 ) * gclwh13_1 * x80 ) ) + ( ( ( -2.832113302962 ) * gclwh5_1 * x84 ) ) );
            op[19] = ( ( ( gclwh5_9 * x140 ) ) + ( ( ( 1.1843 ) * gclwh13_9 * x73 ) ) + ( ( ( -0.015853620107 ) * x126 ) ) + ( ( ( 2.3686 ) * gclwh15_9 * x105 ) ) + ( ( ( -2.3686 ) * gclwh13_9 * x80 ) ) + ( ( ( -1.1843 ) * gclwh15_9 * x78 ) ) + ( ( ( 0.015853620107 ) * x88 ) ) + ( ( ( -1.0 ) * x471 ) ) + ( ( ( 1.1843 ) * gclwh5_9 * x85 ) ) + ( ( ( -1.0 ) * gclwh11_13 * x89 ) ) + ( ( ( -2.3686 ) * gclwh5_9 * x84 ) ) + ( ( ( -1.0 ) * gclwh9_13 * x183 ) ) + ( ( ( 0.27404702 ) * x154 ) ) + ( ( ( -1.0 ) * x453 ) ) + x264 + x463 );
            op[20] = ( ( ( ( 0.655764 ) * gclwh13_15 * x80 ) ) + ( ( ( -1.1446 ) * gclwh0_0 * x78 ) ) + ( ( gclwh0_0 * x118 ) ) + ( ( ( 1.224 ) * gclwh5_9 * x85 ) ) + ( ( gclwh13_0 * x164 ) ) + ( ( gclwh2_0 * x164 ) ) + ( ( x106 * x78 ) ) + ( ( ( 1.224 ) * gclwh13_9 * x73 ) ) + ( ( ( -0.01638506376 ) * x126 ) ) + ( ( ( 0.01638506376 ) * x151 ) ) + ( ( ( -2.448 ) * gclwh5_9 * x84 ) ) + ( ( ( -1.0 ) * gclwh15_0 * x118 ) ) + ( ( ( 0.01638506376 ) * x88 ) ) + ( ( ( -0.655764 ) * gclwh15_15 * x105 ) ) + ( ( ( -1.224 ) * gclwh15_9 * x78 ) ) + ( ( ( 2.2892 ) * gclwh15_0 * x105 ) ) + ( ( ( -1.0 ) * x200 * x73 ) ) + ( ( ( 2.2892 ) * gclwh2_0 * x80 ) ) + ( ( ( -2.2892 ) * gclwh13_0 * x80 ) ) + ( ( ( -1.1446 ) * gclwh2_0 * x73 ) ) + ( ( ( -1.0 ) * x184 * x85 ) ) + ( ( ( 1.1446 ) * gclwh13_0 * x73 ) ) + ( ( ( -2.448 ) * gclwh13_9 * x80 ) ) + ( ( ( 2.2892 ) * gclwh0_0 * x105 ) ) + ( ( ( 1.1446 ) * gclwh5_0 * x85 ) ) + ( ( ( -1.0 ) * gclwh7_0 * x155 ) ) + ( ( gclwh11_0 * x92 ) ) + ( ( ( -1.0 ) * gclwh13_15 * x181 ) ) + ( ( ( -1.1446 ) * gclwh15_0 * x78 ) ) + ( ( ( 0.655764 ) * gclwh5_15 * x84 ) ) + ( ( ( 2.448 ) * gclwh15_9 * x105 ) ) + ( ( gclwh15_15 * x197 ) ) + ( ( gclwh9_0 * x82 ) ) + ( ( ( -2.2892 ) * gclwh5_0 * x84 ) ) + ( ( gclwh5_0 * x117 ) ) + ( ( ( -1.0 ) * gclwh5_15 * x191 ) ) );
            op[21] = ( ( -0.147786722962 ) + ( ( gclwh5_10 * x90 ) ) + ( ( ( -4.0 ) * gclwh5_10 * x84 ) ) + ( ( gclwh11_10 * x198 ) ) + ( ( gclwh9_10 * x172 ) ) + ( ( x203 * x73 ) ) + ( ( ( -1.0 ) * x194 * x78 ) ) + ( ( x192 * x85 ) ) + ( ( gclwh13_10 * x128 ) ) + ( ( ( 4.0 ) * gclwh15_10 * x105 ) ) + ( ( ( -1.0 ) * gclwh7_10 * x153 ) ) + ( ( ( -1.0 ) * gclwh15_10 * x123 ) ) + ( ( ( -4.0 ) * gclwh13_10 * x80 ) ) );
            op[22] = ( ( -0.028452741481 ) + ( ( ( -0.030132502962 ) * gclwh5_1 * x84 ) ) + ( ( ( 0.000201684224787892 ) * x101 ) ) + ( ( ( -0.030132502962 ) * gclwh13_1 * x80 ) ) + ( ( gclwh5_10 * x85 ) ) + ( ( ( 0.000201684224787892 ) * x179 ) ) + ( ( ( -1.0 ) * x486 ) ) + ( ( ( 0.000201684224787892 ) * x190 ) ) + ( ( gclwh13_10 * x73 ) ) + ( ( gclwh0_1 * x99 ) ) + ( ( ( -1.0 ) * x461 ) ) + ( ( ( -0.001679761481 ) * gclwh15_1 * x78 ) ) + x489 + x468 + ( ( ( 0.030132502962 ) * gclwh15_1 * x105 ) ) + ( ( ( -0.028452741481 ) * gclwh0_1 * x78 ) ) + ( ( ( 0.030132502962 ) * gclwh2_1 * x80 ) ) + ( ( ( -0.000201684224787892 ) * x86 ) ) + ( ( ( -0.028452741481 ) * gclwh2_1 * x73 ) ) + ( ( ( 0.001679761481 ) * gclwh13_1 * x73 ) ) + ( ( ( 0.001679761481 ) * gclwh5_1 * x85 ) ) + ( ( ( 0.030132502962 ) * gclwh0_1 * x105 ) ) + ( ( ( -1.0 ) * gclwh15_10 * x78 ) ) );
            op[23] = ( ( ( ( -1.0 ) * gclwh11_13 * x131 ) ) + ( ( ( -0.000531443653 ) * x151 ) ) + ( ( ( 0.0794 ) * gclwh13_9 * x80 ) ) + ( ( ( 0.000531443653 ) * x126 ) ) + ( ( ( -0.0794 ) * gclwh15_9 * x105 ) ) + ( ( ( 0.00918658 ) * x154 ) ) + ( ( ( -0.0397 ) * gclwh13_9 * x73 ) ) + ( ( ( -1.0 ) * x463 ) ) + ( ( ( 0.0794 ) * gclwh5_9 * x84 ) ) + ( ( ( -1.0 ) * x453 ) ) + x264 + x471 + ( ( ( -1.0 ) * gclwh9_13 * x139 ) ) + ( ( ( -0.000531443653 ) * x88 ) ) + ( ( ( 0.0397 ) * gclwh15_9 * x78 ) ) + ( ( ( -0.0397 ) * gclwh5_9 * x85 ) ) );
            op[24] = ( ( -0.7766213052 ) + ( ( ( -1.0 ) * x477 ) ) + x480 );
            op[25] = ( ( ( ( 4.7372 ) * gclwh6_2 * x80 ) ) + ( ( gclwh8_2 * x175 ) ) + ( ( ( -0.031707240214 ) * x113 ) ) + ( ( ( 2.3686 ) * gclwh10_2 * x85 ) ) + ( ( ( -1.0 ) * x454 ) ) + x273 + ( ( ( -2.3686 ) * gclwh6_2 * x73 ) ) + ( ( gclwh14_2 * x162 ) ) + ( ( ( 2.3686 ) * gclwh8_2 * x78 ) ) + ( ( ( -0.54809404 ) * x150 ) ) + ( ( ( -1.0 ) * x100 * x158 ) ) + ( ( ( -4.7372 ) * gclwh10_2 * x84 ) ) + ( ( ( -0.54809404 ) * x147 ) ) + ( ( gclwh10_2 * x116 ) ) );
            op[26] = ( ( ( ( 2.2892 ) * gclwh8_12 * x78 ) ) + ( ( ( 0.030644352908 ) * x170 ) ) + ( ( ( 4.5784 ) * gclwh6_12 * x80 ) ) + ( ( ( 2.2892 ) * gclwh10_12 * x85 ) ) + ( ( ( -0.030644352908 ) * x124 ) ) + ( ( ( 0.1517437896 ) * x182 ) ) + ( ( ( -1.0 ) * gclwh12_14 * x115 ) ) + ( ( ( -4.5784 ) * gclwh8_12 * x105 ) ) + ( ( ( -4.5784 ) * gclwh10_12 * x84 ) ) + ( ( ( -0.1517437896 ) * x110 ) ) + ( ( gclwh8_12 * x144 ) ) + ( ( ( -2.2892 ) * gclwh6_12 * x73 ) ) );
            op[27] = ( ( ( ( -1.0 ) * gclwh8_11 * x127 ) ) + ( ( ( -8.0 ) * gclwh6_11 * x80 ) ) + ( ( ( -1.0 ) * x135 * x78 ) ) + ( ( gclwh4_11 * x108 ) ) + ( ( ( -0.9256 ) * x114 ) ) + ( ( ( -1.0 ) * gclwh10_11 * x159 ) ) + ( ( gclwh12_11 * x202 ) ) + ( ( ( 8.0 ) * gclwh10_11 * x84 ) ) + ( ( ( -1.0 ) * x187 * x85 ) ) + ( ( ( 8.0 ) * gclwh8_11 * x105 ) ) + ( ( x199 * x73 ) ) + ( ( gclwh6_11 * x157 ) ) );
            op[28] = ( ( -0.0260338308 ) + ( ( ( -1.0 ) * x480 ) ) + x477 );
            op[29] = ( ( ( ( 0.0794 ) * gclwh10_2 * x85 ) ) + ( ( ( 0.1588 ) * gclwh6_2 * x80 ) ) + ( ( ( 0.0794 ) * gclwh8_2 * x78 ) ) + ( ( ( -0.01837316 ) * x147 ) ) + ( ( ( -0.0794 ) * gclwh6_2 * x73 ) ) + ( ( ( -0.01837316 ) * x150 ) ) + x454 + ( ( ( -0.1588 ) * gclwh10_2 * x84 ) ) + ( ( gclwh14_2 * x201 ) ) + ( ( ( -1.0 ) * x273 ) ) + ( ( ( 0.001062887306 ) * gclwh8_2 * r20 ) ) + ( ( ( -0.1588 ) * gclwh8_2 * x105 ) ) + ( ( ( -0.001062887306 ) * x113 ) ) + ( ( gclwh10_2 * x119 ) ) );
            op[30] = ( ( ( ( -0.54809404 ) * x111 ) ) + ( ( ( -1.0 ) * gclwh7_0 * x133 ) ) + ( ( ( 2.3686 ) * gclwh11_0 * x85 ) ) + ( ( ( -0.54809404 ) * x130 ) ) + ( ( ( -4.7372 ) * gclwh11_0 * x84 ) ) + ( ( ( -2.3686 ) * gclwh7_0 * x73 ) ) + ( ( gclwh11_0 * x116 ) ) + ( ( ( 2.3686 ) * gclwh9_0 * x78 ) ) + ( ( gclwh15_0 * x162 ) ) + x455 + ( ( ( 4.7372 ) * gclwh7_0 * x80 ) ) + ( ( ( -1.0 ) * x281 ) ) + ( ( ( -1.0 ) * x100 * x76 ) ) + ( ( ( 0.031707240214 ) * x165 ) ) );
            op[31] = ( ( -0.7766213052 ) + ( ( ( -1.0 ) * x478 ) ) + x479 );
            op[32] = ( ( ( x160 * x78 ) ) + ( ( x137 * x85 ) ) + ( ( ( -8.0 ) * gclwh9_10 * x105 ) ) + ( ( gclwh11_10 * x159 ) ) + ( ( ( -1.0 ) * gclwh13_10 * x202 ) ) + ( ( ( 8.0 ) * gclwh7_10 * x80 ) ) + ( ( ( -1.0 ) * gclwh7_10 * x157 ) ) + ( ( ( -8.0 ) * gclwh11_10 * x84 ) ) + ( ( ( -1.0 ) * x167 * x73 ) ) + ( ( ( 0.9256 ) * gclwh15_10 * rxp0_2 ) ) + ( ( gclwh9_10 * x127 ) ) + ( ( ( -1.0 ) * gclwh5_10 * x108 ) ) );
            op[33] = ( ( ( ( -1.0 ) * gclwh13_15 * x115 ) ) + ( ( ( -0.1517437896 ) * x96 ) ) + ( ( ( -0.030644352908 ) * x141 ) ) + ( ( ( 0.030644352908 ) * x103 ) ) + ( ( ( 2.2892 ) * gclwh9_13 * x78 ) ) + ( ( ( 0.1517437896 ) * x166 ) ) + ( ( ( -4.5784 ) * gclwh11_13 * x84 ) ) + ( ( ( 4.5784 ) * gclwh7_13 * x80 ) ) + ( ( gclwh9_13 * x144 ) ) + ( ( ( -4.5784 ) * gclwh9_13 * x105 ) ) + ( ( ( -2.2892 ) * gclwh7_13 * x73 ) ) + ( ( ( 2.2892 ) * gclwh11_13 * x85 ) ) );
            op[34] = ( ( ( ( -0.0794 ) * gclwh7_0 * x73 ) ) + ( ( ( -0.01837316 ) * x111 ) ) + ( ( ( -0.001062887306 ) * gclwh7_0 * r21 ) ) + ( ( ( -0.1588 ) * npx * x76 ) ) + ( ( ( 0.0794 ) * gclwh9_0 * x78 ) ) + ( ( ( -0.1588 ) * gclwh11_0 * x84 ) ) + ( ( gclwh11_0 * x119 ) ) + ( ( ( 0.0794 ) * gclwh11_0 * x85 ) ) + ( ( ( -1.0 ) * x455 ) ) + x281 + ( ( ( 0.001062887306 ) * x165 ) ) + ( ( gclwh15_0 * x201 ) ) + ( ( ( 0.1588 ) * gclwh7_0 * x80 ) ) + ( ( ( -0.01837316 ) * x130 ) ) );
            op[35] = ( ( -0.0260338308 ) + ( ( ( -1.0 ) * x479 ) ) + x478 );
            op[36] = ( ( 2.751379677038 ) + ( ( ( -1.0 ) * x481 ) ) + x474 );
            op[37] = ( ( ( ( 4.7372 ) * gclwh4_2 * x84 ) ) + ( ( gclwh1_2 * x175 ) ) + ( ( ( -2.3686 ) * gclwh1_2 * x78 ) ) + ( ( gclwh3_2 * x133 ) ) + ( ( ( -1.0 ) * gclwh4_2 * x116 ) ) + ( ( x100 * x142 ) ) + ( ( ( -1.0 ) * gclwh12_2 * x133 ) ) + ( ( ( -1.0 ) * x475 ) ) + ( ( ( -2.3686 ) * gclwh4_2 * x85 ) ) + ( ( ( 4.7372 ) * gclwh3_2 * x80 ) ) + ( ( ( 0.54809404 ) * x156 ) ) + x465 + ( ( ( 2.3686 ) * gclwh14_2 * x78 ) ) + ( ( ( -2.3686 ) * gclwh3_2 * x73 ) ) + ( ( ( -1.0 ) * x100 * x93 ) ) + ( ( gclwh14_2 * x175 ) ) + ( ( ( -2.3686 ) * gclwh12_2 * x73 ) ) + ( ( ( -0.54809404 ) * gclwh10_2 * rxp2_2 ) ) + ( ( ( 4.7372 ) * gclwh12_2 * x80 ) ) + ( ( ( -1.0 ) * gclwh8_2 * x162 ) ) );
            IkReal x490 = pz * pz;
            IkReal x491 = pp * pp;
            IkReal x492 = ( ( 0.2314 ) * pz );
            IkReal x493 = ( pp * r21 );
            IkReal x494 = ( ( 0.2314 ) * rxp0_2 );
            IkReal x495 = ( ( 0.01338649 ) * r22 );
            IkReal x496 = ( gclwh9_0 * pz );
            IkReal x497 = ( gclwh4_3 * r22 );
            IkReal x498 = ( pp * r20 );
            IkReal x499 = ( ( 0.327882 ) * gclwh14_14 );
            IkReal x500 = ( npy * pz );
            IkReal x501 = ( ( 0.655764 ) * gclwh12_14 );
            IkReal x502 = ( ( 0.01338649 ) * r21 );
            IkReal x503 = ( ( 4.0 ) * gclwh12_11 );
            IkReal x504 = ( ( 0.26486044 ) * rxp0_2 );
            IkReal x505 = ( ( 0.01837316 ) * rxp1_2 );
            IkReal x506 = ( ( 0.00219459455709 ) * r21 );
            IkReal x507 = ( npz * pz );
            IkReal x508 = ( gclwh15_1 * r20 );
            IkReal x509 = ( gclwh14_8 * r20 );
            IkReal x510 = ( gclwh13_9 * r21 );
            IkReal x511 = ( pp * r22 );
            IkReal x512 = ( ( 0.27404702 ) * rxp2_2 );
            IkReal x513 = ( npx * pz );
            IkReal x514 = ( ( 0.02677298 ) * r22 );
            IkReal x515 = ( ( 2.0 ) * gclwh11_10 );
            IkReal x516 = ( ( 0.26486044 ) * rxp2_2 );
            IkReal x517 = ( gclwh14_2 * pz );
            IkReal x518 = ( gclwh11_0 * pz );
            IkReal x519 = ( ( 0.001062887306 ) * r20 );
            IkReal x520 = ( ( 0.0379359474 ) * rxp1_2 );
            IkReal x521 = ( ( 0.00219459455709 ) * r20 );
            IkReal x522 = ( ( 2.0 ) * gclwh4_11 );
            IkReal x523 = ( ( 0.000201684224787892 ) * r20 );
            IkReal x524 = ( gclwh13_1 * r21 );
            IkReal x525 = ( ( 0.2314 ) * rxp2_2 );
            IkReal x526 = ( gclwh11_13 * r22 );
            IkReal x527 = ( ( 0.01338649 ) * r20 );
            IkReal x528 = ( ( 0.327882 ) * gclwh15_15 );
            IkReal x529 = ( gclwh12_8 * r21 );
            IkReal x530 = ( ( 0.655764 ) * gclwh14_14 );
            IkReal x531 = ( gclwh2_0 * pz );
            IkReal x532 = ( ( 0.655764 ) * gclwh5_15 );
            IkReal x533 = ( ( 0.015322176454 ) * r22 );
            IkReal x534 = ( gclwh15_0 * r20 );
            IkReal x535 = ( ( 2.0 ) * gclwh9_10 );
            IkReal x536 = ( gclwh12_3 * rxp1_2 );
            IkReal x537 = ( ( 2.0 ) * gclwh15_10 );
            IkReal x538 = ( gclwh15_10 * r20 );
            IkReal x539 = ( ( 4.0 ) * gclwh14_11 );
            IkReal x540 = ( gclwh12_3 * r21 );
            IkReal x541 = ( ( 0.655764 ) * gclwh15_15 );
            IkReal x542 = ( ( 0.02677298 ) * r21 );
            IkReal x543 = ( ( 0.0379359474 ) * rxp0_2 );
            IkReal x544 = ( gclwh11_13 * rxp2_2 );
            IkReal x545 = ( ( 0.05354596 ) * r22 );
            IkReal x546 = ( gclwh4_3 * rxp2_2 );
            IkReal x547 = ( gclwh12_14 * r21 );
            IkReal x548 = ( ( 2.0 ) * gclwh10_11 );
            IkReal x549 = ( ( 2.0 ) * pp );
            IkReal x550 = ( gclwh13_9 * rxp1_2 );
            IkReal x551 = ( ( 0.0758718948 ) * rxp2_2 );
            IkReal x552 = ( gclwh14_8 * rxp0_2 );
            IkReal x553 = ( ( 0.015853620107 ) * r22 );
            IkReal x554 = ( ( 0.001062887306 ) * r22 );
            IkReal x555 = ( gclwh7_13 * r21 );
            IkReal x556 = ( gclwh1_2 * pz );
            IkReal x557 = ( ( 2.0 ) * gclwh7_10 );
            IkReal x558 = ( ( 1.0 ) * pz );
            IkReal x559 = ( ( 0.2314 ) * rxp1_2 );
            IkReal x560 = ( gclwh13_0 * pz );
            IkReal x561 = ( ( 4.0 ) * gclwh15_10 );
            IkReal x562 = ( gclwh5_1 * rxp2_2 );
            IkReal x563 = ( gclwh12_2 * pz );
            IkReal x564 = ( gclwh15_0 * pz );
            IkReal x565 = ( ( 0.9256 ) * rxp0_2 );
            IkReal x566 = ( gclwh15_9 * rxp0_2 );
            IkReal x567 = ( ( 0.0189560282044839 ) * r21 );
            IkReal x568 = ( gclwh5_9 * r22 );
            IkReal x569 = ( gclwh12_8 * rxp1_2 );
            IkReal x570 = ( ( 0.4628 ) * rxp1_2 );
            IkReal x571 = ( gclwh7_13 * rxp1_2 );
            IkReal x572 = ( ( 0.327882 ) * gclwh5_15 );
            IkReal x573 = ( ( 0.26486044 ) * rxp1_2 );
            IkReal x574 = ( gclwh6_2 * pz );
            IkReal x575 = ( gclwh8_2 * pz );
            IkReal x576 = ( gclwh5_0 * pz );
            IkReal x577 = ( ( 0.015322176454 ) * r20 );
            IkReal x578 = ( gclwh4_2 * pz );
            IkReal x579 = ( gclwh6_12 * r21 );
            IkReal x580 = ( gclwh11_0 * rxp2_2 );
            IkReal x581 = ( ( 0.00918658 ) * rxp2_2 );
            IkReal x582 = ( gclwh13_0 * r21 );
            IkReal x583 = ( ( 0.0758718948 ) * rxp0_2 );
            IkReal x584 = ( gclwh10_2 * pz );
            IkReal x585 = ( ( 0.001062887306 ) * r21 );
            IkReal x586 = ( ( 0.015322176454 ) * r21 );
            IkReal x587 = ( gclwh10_11 * rxp2_2 );
            IkReal x588 = ( ( 0.327882 ) * gclwh12_14 );
            IkReal x589 = ( ( 4.0 ) * gclwh4_11 );
            IkReal x590 = ( gclwh13_1 * rxp1_2 );
            IkReal x591 = ( ( 0.327675509152703 ) * rxp0_2 );
            IkReal x592 = ( ( 0.4628 ) * rxp0_2 );
            IkReal x593 = ( ( 0.0189560282044839 ) * r20 );
            IkReal x594 = ( gclwh8_12 * r20 );
            IkReal x595 = ( ( 2.0 ) * gclwh6_11 );
            IkReal x596 = ( gclwh8_12 * rxp0_2 );
            IkReal x597 = ( ( 2.0 ) * gclwh12_11 );
            IkReal x598 = ( ( 0.9256 ) * rxp1_2 );
            IkReal x599 = ( gclwh9_13 * rxp0_2 );
            IkReal x600 = ( ( 0.0379359474 ) * rxp2_2 );
            IkReal x601 = ( gclwh5_15 * r22 );
            IkReal x602 = ( ( 0.05354596 ) * r21 );
            IkReal x603 = ( ( 0.655764 ) * gclwh13_15 );
            IkReal x604 = ( gclwh13_15 * r21 );
            IkReal x605 = ( ( 0.02677298 ) * r20 );
            IkReal x606 = ( ( 2.0 ) * gclwh8_11 );
            IkReal x607 = ( ( 0.000201684224787892 ) * r21 );
            IkReal x608 = ( ( 0.000531443653 ) * r20 );
            IkReal x609 = ( ( 4.0 ) * gclwh5_10 );
            IkReal x610 = ( gclwh5_1 * r22 );
            IkReal x611 = ( ( 2.0 ) * gclwh5_10 );
            IkReal x612 = ( gclwh6_12 * rxp1_2 );
            IkReal x613 = ( ( 0.2832336 ) * rxp2_2 );
            IkReal x614 = ( ( 4.0 ) * gclwh13_10 );
            IkReal x615 = ( ( 0.0758718948 ) * rxp1_2 );
            IkReal x616 = ( ( 0.327882 ) * gclwh4_14 );
            IkReal x617 = ( ( 0.00438918911418 ) * r20 );
            IkReal x618 = ( ( 0.4628 ) * rxp2_2 );
            IkReal x619 = ( ( 0.000531443653 ) * r22 );
            IkReal x620 = ( ( 0.327882 ) * gclwh13_15 );
            IkReal x621 = ( ( 2.0 ) * gclwh13_10 );
            IkReal x622 = ( gclwh4_14 * r22 );
            IkReal x623 = ( gclwh15_9 * r20 );
            IkReal x624 = ( ( 0.0034863305927034 ) * rxp0_2 );
            IkReal x625 = ( ( 0.00219459455709 ) * r22 );
            IkReal x626 = ( ( 0.655764 ) * gclwh4_14 );
            IkReal x627 = ( gclwh7_0 * pz );
            IkReal x628 = ( ( 0.00877837822836 ) * r20 );
            IkReal x629 = ( ( 0.01837316 ) * rxp0_2 );
            IkReal x630 = ( gclwh4_8 * r22 );
            IkReal x631 = ( ( 0.02677298 ) * rxp2_2 );
            IkReal x632 = ( ( 2.0 ) * gclwh14_11 );
            IkReal x633 = ( ( 0.00438918911418 ) * x604 );
            IkReal x634 = ( ( 0.00438918911418 ) * x601 );
            IkReal x635 = ( gclwh15_15 * x617 );
            IkReal x636 = ( ( 0.02677298 ) * x538 );
            IkReal x637 = ( gclwh7_10 * x570 );
            IkReal x638 = ( gclwh11_10 * x618 );
            IkReal x639 = ( gclwh9_10 * x592 );
            IkReal x640 = ( gclwh13_10 * x542 );
            IkReal x641 = ( gclwh5_10 * x514 );
            IkReal x642 = ( gclwh12_14 * x520 );
            IkReal x643 = ( gclwh6_5 * x506 );
            IkReal x644 = ( gclwh4_14 * x600 );
            IkReal x645 = ( gclwh10_5 * x625 );
            IkReal x646 = ( gclwh14_14 * x543 );
            IkReal x647 = ( gclwh8_5 * x521 );
            IkReal x648 = ( gclwh14_11 * x494 );
            IkReal x649 = ( gclwh10_11 * x495 );
            IkReal x650 = ( gclwh4_8 * x631 );
            IkReal x651 = ( gclwh8_11 * x527 );
            IkReal x652 = ( ( 0.02677298 ) * x569 );
            IkReal x653 = ( gclwh4_11 * x525 );
            IkReal x654 = ( gclwh12_11 * x559 );
            IkReal x655 = ( gclwh6_11 * x502 );
            IkReal x656 = ( ( 0.02677298 ) * x552 );
            IkReal x657 = ( gclwh5_10 * x525 );
            IkReal x658 = ( gclwh13_10 * x559 );
            IkReal x659 = ( ( 0.02677298 ) * x550 );
            IkReal x660 = ( gclwh5_9 * x631 );
            IkReal x661 = ( gclwh7_10 * x502 );
            IkReal x662 = ( gclwh11_10 * x495 );
            IkReal x663 = ( gclwh9_10 * x527 );
            IkReal x664 = ( gclwh15_10 * x494 );
            IkReal x665 = ( ( 0.02677298 ) * x566 );
            IkReal x666 = ( gclwh5_15 * x600 );
            IkReal x667 = ( gclwh13_15 * x520 );
            IkReal x668 = ( gclwh7_7 * x506 );
            IkReal x669 = ( gclwh9_7 * x521 );
            IkReal x670 = ( gclwh11_7 * x625 );
            IkReal x671 = ( gclwh15_15 * x543 );
            IkReal x672 = ( gclwh4_11 * x514 );
            IkReal x673 = ( ( 0.4628 ) * x587 );
            IkReal x674 = ( gclwh8_11 * x592 );
            IkReal x675 = ( gclwh12_11 * x542 );
            IkReal x676 = ( ( 0.00438918911418 ) * x622 );
            IkReal x677 = ( ( 0.00438918911418 ) * x547 );
            IkReal x678 = ( gclwh14_14 * x617 );
            IkReal x679 = ( gclwh8_5 * x543 );
            IkReal x680 = ( ( 0.00219459455709 ) * x622 );
            IkReal x681 = ( gclwh12_14 * x506 );
            IkReal x682 = ( gclwh10_5 * x600 );
            IkReal x683 = ( gclwh14_14 * x521 );
            IkReal x684 = ( gclwh6_5 * x520 );
            IkReal x685 = ( gclwh14_11 * x527 );
            IkReal x686 = ( ( 0.001548816893 ) * x529 );
            IkReal x687 = ( gclwh6_11 * x559 );
            IkReal x688 = ( ( 0.001548816893 ) * x630 );
            IkReal x689 = ( gclwh4_11 * x495 );
            IkReal x690 = ( gclwh12_11 * x502 );
            IkReal x691 = ( gclwh8_11 * x494 );
            IkReal x692 = ( gclwh10_11 * x525 );
            IkReal x693 = ( ( 0.001548816893 ) * x509 );
            IkReal x694 = ( ( 0.001548816893 ) * x623 );
            IkReal x695 = ( gclwh7_10 * x559 );
            IkReal x696 = ( gclwh15_10 * x527 );
            IkReal x697 = ( ( 0.001548816893 ) * x568 );
            IkReal x698 = ( gclwh5_10 * x495 );
            IkReal x699 = ( ( 0.001548816893 ) * x510 );
            IkReal x700 = ( gclwh9_10 * x494 );
            IkReal x701 = ( gclwh11_10 * x525 );
            IkReal x702 = ( gclwh13_10 * x502 );
            IkReal x703 = ( gclwh7_7 * x520 );
            IkReal x704 = ( gclwh15_15 * x521 );
            IkReal x705 = ( gclwh9_7 * x543 );
            IkReal x706 = ( gclwh11_7 * x600 );
            IkReal x707 = ( ( 0.00219459455709 ) * x601 );
            IkReal x708 = ( gclwh13_15 * x506 );
            IkReal x709 = ( pp * x559 );
            IkReal x710 = ( ( 2.0 ) * x490 );
            IkReal x711 = ( ( 1.0 ) * x491 );
            IkReal x712 = ( r20 * x491 );
            IkReal x713 = ( r21 * x491 );
            IkReal x714 = ( x513 * x541 );
            IkReal x715 = ( x511 * x572 );
            IkReal x716 = ( x493 * x620 );
            IkReal x717 = ( x498 * x528 );
            IkReal x718 = ( x507 * x532 );
            IkReal x719 = ( x500 * x603 );
            IkReal x720 = ( x498 * x537 );
            IkReal x721 = ( x507 * x609 );
            IkReal x722 = ( x500 * x614 );
            IkReal x723 = ( x493 * x621 );
            IkReal x724 = ( x513 * x561 );
            IkReal x725 = ( x511 * x611 );
            IkReal x726 = ( ( 0.163941 ) * gclwh6_5 * x493 );
            IkReal x727 = ( ( 0.327882 ) * gclwh10_5 * x507 );
            IkReal x728 = ( ( 0.327882 ) * gclwh8_5 * x513 );
            IkReal x729 = ( ( 0.163941 ) * gclwh10_5 * x511 );
            IkReal x730 = ( ( 0.327882 ) * gclwh6_5 * x500 );
            IkReal x731 = ( ( 0.163941 ) * gclwh8_5 * x498 );
            IkReal x732 = ( gclwh14_2 * rxp0_2 * x492 );
            IkReal x733 = ( ( 0.2314 ) * pp * x536 );
            IkReal x734 = ( x495 * x584 );
            IkReal x735 = ( x500 * x595 );
            IkReal x736 = ( x511 * x584 );
            IkReal x737 = ( gclwh4_3 * pp * x525 );
            IkReal x738 = ( x498 * x575 );
            IkReal x739 = ( x527 * x575 );
            IkReal x740 = ( x507 * x548 );
            IkReal x741 = ( gclwh14_3 * pp * x494 );
            IkReal x742 = ( gclwh4_2 * rxp2_2 * x492 );
            IkReal x743 = ( gclwh12_2 * rxp1_2 * x492 );
            IkReal x744 = ( x513 * x606 );
            IkReal x745 = ( x502 * x574 );
            IkReal x746 = ( x495 * x518 );
            IkReal x747 = ( gclwh13_1 * x709 );
            IkReal x748 = ( x507 * x515 );
            IkReal x749 = ( x513 * x535 );
            IkReal x750 = ( gclwh15_0 * rxp0_2 * x492 );
            IkReal x751 = ( gclwh5_1 * pp * x525 );
            IkReal x752 = ( x496 * x527 );
            IkReal x753 = ( x511 * x518 );
            IkReal x754 = ( x496 * x498 );
            IkReal x755 = ( x502 * x627 );
            IkReal x756 = ( gclwh13_0 * rxp1_2 * x492 );
            IkReal x757 = ( gclwh15_1 * pp * x494 );
            IkReal x758 = ( gclwh5_0 * rxp2_2 * x492 );
            IkReal x759 = ( x500 * x557 );
            IkReal x760 = ( ( 0.327882 ) * gclwh11_7 * x507 );
            IkReal x761 = ( ( 0.163941 ) * gclwh7_7 * x493 );
            IkReal x762 = ( ( 0.327882 ) * gclwh9_7 * x513 );
            IkReal x763 = ( ( 0.163941 ) * gclwh11_7 * x511 );
            IkReal x764 = ( ( 0.327882 ) * gclwh7_7 * x500 );
            IkReal x765 = ( ( 0.163941 ) * gclwh9_7 * x498 );
            IkReal x766 = ( x511 * x522 );
            IkReal x767 = ( x493 * x597 );
            IkReal x768 = ( x513 * x539 );
            IkReal x769 = ( x513 * x530 );
            IkReal x770 = ( x493 * x588 );
            IkReal x771 = ( x511 * x616 );
            IkReal x772 = ( x498 * x499 );
            IkReal x773 = ( x500 * x501 );
            IkReal x774 = ( x507 * x626 );
            IkReal x775 = ( ( 0.163941 ) * gclwh12_14 * x493 );
            IkReal x776 = ( ( 0.163941 ) * gclwh4_14 * x511 );
            IkReal x777 = ( x499 * x513 );
            IkReal x778 = ( ( 0.163941 ) * gclwh14_14 * x498 );
            IkReal x779 = ( x500 * x588 );
            IkReal x780 = ( x507 * x616 );
            IkReal x781 = ( x498 * x517 );
            IkReal x782 = ( ( 0.1157 ) * gclwh4_8 * x511 );
            IkReal x783 = ( gclwh6_2 * rxp1_2 * x492 );
            IkReal x784 = ( x491 * x540 );
            IkReal x785 = ( x527 * x556 );
            IkReal x786 = ( ( 0.1157 ) * gclwh12_8 * x493 );
            IkReal x787 = ( x507 * x522 );
            IkReal x788 = ( x517 * x527 );
            IkReal x789 = ( gclwh14_8 * npx * x492 );
            IkReal x790 = ( gclwh3_3 * x713 );
            IkReal x791 = ( gclwh1_3 * x712 );
            IkReal x792 = ( gclwh3_2 * pz * x502 );
            IkReal x793 = ( x491 * x497 );
            IkReal x794 = ( x500 * x597 );
            IkReal x795 = ( x502 * x563 );
            IkReal x796 = ( gclwh12_8 * npy * x492 );
            IkReal x797 = ( gclwh10_2 * rxp2_2 * x492 );
            IkReal x798 = ( x513 * x632 );
            IkReal x799 = ( x495 * x578 );
            IkReal x800 = ( gclwh4_8 * npz * x492 );
            IkReal x801 = ( ( 0.1157 ) * gclwh14_8 * x498 );
            IkReal x802 = ( gclwh8_2 * rxp0_2 * x492 );
            IkReal x803 = ( x502 * x531 );
            IkReal x804 = ( x491 * x508 );
            IkReal x805 = ( x492 * x580 );
            IkReal x806 = ( x511 * x576 );
            IkReal x807 = ( x493 * x560 );
            IkReal x808 = ( gclwh0_0 * pz * x527 );
            IkReal x809 = ( gclwh5_9 * npz * x492 );
            IkReal x810 = ( x495 * x576 );
            IkReal x811 = ( x502 * x560 );
            IkReal x812 = ( gclwh13_9 * npy * x492 );
            IkReal x813 = ( ( 0.1157 ) * gclwh15_9 * x498 );
            IkReal x814 = ( gclwh9_0 * rxp0_2 * x492 );
            IkReal x815 = ( gclwh2_1 * x713 );
            IkReal x816 = ( x507 * x611 );
            IkReal x817 = ( x500 * x621 );
            IkReal x818 = ( gclwh0_1 * x712 );
            IkReal x819 = ( ( 0.1157 ) * gclwh5_9 * x511 );
            IkReal x820 = ( x513 * x537 );
            IkReal x821 = ( ( 0.1157 ) * gclwh13_9 * x493 );
            IkReal x822 = ( gclwh7_0 * rxp1_2 * x492 );
            IkReal x823 = ( gclwh15_9 * npx * x492 );
            IkReal x824 = ( x527 * x564 );
            IkReal x825 = ( x500 * x620 );
            IkReal x826 = ( ( 0.163941 ) * gclwh15_15 * x498 );
            IkReal x827 = ( x507 * x572 );
            IkReal x828 = ( ( 0.163941 ) * gclwh13_15 * x493 );
            IkReal x829 = ( ( 0.163941 ) * gclwh5_15 * x511 );
            IkReal x830 = ( x513 * x528 );
            IkReal x831 = ( gclwh6_2 * npy * x710 );
            IkReal x832 = ( gclwh6_2 * x493 * x558 );
            IkReal x833 = ( gclwh10_2 * npz * x710 );
            IkReal x834 = ( gclwh8_2 * npx * x710 );
            IkReal x835 = ( gclwh7_0 * npy * x710 );
            IkReal x836 = ( gclwh9_0 * npx * x710 );
            IkReal x837 = ( gclwh11_0 * npz * x710 );
            IkReal x838 = ( gclwh7_0 * x493 * x558 );
            IkReal x839 = ( gclwh12_2 * npy * x710 );
            IkReal x840 = ( gclwh3_2 * npy * x710 );
            IkReal x841 = ( gclwh1_2 * npx * x710 );
            IkReal x842 = ( gclwh14_3 * x513 * x549 );
            IkReal x843 = ( gclwh4_2 * npz * x710 );
            IkReal x844 = ( gclwh4_3 * x507 * x549 );
            IkReal x845 = ( gclwh12_2 * x493 * x558 );
            IkReal x846 = ( ( 1.0 ) * x498 * x556 );
            IkReal x847 = ( gclwh3_3 * x500 * x549 );
            IkReal x848 = ( gclwh4_2 * x511 * x558 );
            IkReal x849 = ( gclwh1_3 * x513 * x549 );
            IkReal x850 = ( gclwh3_2 * x493 * x558 );
            IkReal x851 = ( gclwh12_3 * x500 * x549 );
            IkReal x852 = ( gclwh14_2 * npx * x710 );
            IkReal x853 = ( gclwh14_3 * r20 * x711 );
            IkReal x854 = ( gclwh0_0 * npx * x710 );
            IkReal x855 = ( gclwh2_0 * npy * x710 );
            IkReal x856 = ( gclwh5_1 * x507 * x549 );
            IkReal x857 = ( gclwh13_1 * x500 * x549 );
            IkReal x858 = ( gclwh15_0 * npx * x710 );
            IkReal x859 = ( gclwh2_1 * x500 * x549 );
            IkReal x860 = ( gclwh0_1 * x513 * x549 );
            IkReal x861 = ( gclwh5_0 * npz * x710 );
            IkReal x862 = ( gclwh13_0 * npy * x710 );
            IkReal x863 = ( gclwh0_0 * x498 * x558 );
            IkReal x864 = ( gclwh15_0 * x498 * x558 );
            IkReal x865 = ( ( 1.0 ) * x493 * x531 );
            IkReal x866 = ( x524 * x711 );
            IkReal x867 = ( x610 * x711 );
            IkReal x868 = ( gclwh15_1 * x513 * x549 );
            IkReal x869 = ( x667 + x666 );
            IkReal x870 = ( x706 + x705 );
            IkReal x871 = ( x644 + x642 );
            IkReal x872 = ( x679 + x682 );
            IkReal x873 = ( x663 + x662 + x664 + x759 );
            IkReal x874 = ( x649 + x648 + x651 + x735 );
            IkReal x875 = ( x687 + x685 + x794 + x787 );
            IkReal x876 = ( x695 + x696 + x816 + x817 );
            IkReal x877 = ( x668 + x760 + x761 + x762 );
            IkReal x878 = ( x635 + x719 + x718 + x717 );
            IkReal x879 = ( x704 + x827 + x826 + x825 );
            IkReal x880 = ( x683 + x779 + x778 + x780 );
            IkReal x881 = ( x678 + x773 + x772 + x774 );
            IkReal x882 = ( x643 + x726 + x727 + x728 );
            IkReal x883 = ( x689 + x690 + x691 + x692 + x798 );
            IkReal x884 = ( x698 + x702 + x700 + x701 + x820 );
            IkReal x885 = ( x657 + x658 + x661 + x748 + x749 );
            IkReal x886 = ( x653 + x654 + x655 + x744 + x740 );
            IkReal x887 = ( ( ( x500 * x503 ) ) + ( ( gclwh6_11 * x570 ) ) + ( ( x498 * x632 ) ) + ( ( gclwh14_11 * x605 ) ) + ( ( x507 * x589 ) ) );
            IkReal x888 = ( x669 + x670 + x764 + x765 + x763 );
            IkReal x889 = ( x634 + x633 + x715 + x714 + x716 );
            IkReal x890 = ( x708 + x707 + x829 + x828 + x830 );
            IkReal x891 = ( x647 + x645 + x731 + x730 + x729 );
            IkReal x892 = ( x676 + x677 + x771 + x770 + x769 );
            IkReal x893 = ( x636 + x637 + x720 + x721 + x722 );
            IkReal x894 = ( x681 + x680 + x777 + x776 + x775 );
            IkReal x895 = ( x641 + x640 + x638 + x639 + x723 + x724 + x725 );
            IkReal x896 = ( x672 + x673 + x674 + x675 + x768 + x766 + x767 );
            IkReal x897 = ( x665 + x755 + x757 + x756 + x758 + x836 + x837 + x838 );
            IkReal x898 = ( x656 + x745 + x742 + x743 + x741 + x834 + x832 + x833 );
            IkReal x899 = ( x659 + x660 + x754 + x751 + x750 + x753 + x752 + x746 + x747 + x835 );
            IkReal x900 = ( x650 + x652 + x737 + x736 + x734 + x733 + x732 + x739 + x738 + x831 );
            IkReal x901 = ( x697 + x699 + x859 + x868 + x867 + x866 + x865 + x864 + x863 + x862 + x861 + x860 + x819 + x823 + x822 + x821 + x824 );
            IkReal x902 = ( x492 + x688 + x686 + x791 + x790 + x793 + x792 + x782 + x783 + x781 + x786 + x784 + x785 + x788 + x789 + x839 + x841 + x840 + x843 + x842 );
            IkReal x903 = ( x693 + x795 + x797 + x796 + x799 + x852 + x853 + x850 + x851 + x845 + x844 + x847 + x846 + x849 + x848 + x801 + x800 + x802 );
            IkReal x904 = ( x492 + x694 + x856 + x857 + x854 + x855 + x858 + x818 + x814 + x815 + x812 + x813 + x810 + x811 + x809 + x808 + x805 + x804 + x807 + x806 + x803 );
            op[38] = ( ( ( ( -1.0 ) * x511 * x626 ) ) + ( ( ( 1.311528 ) * gclwh12_14 * x500 ) ) + ( ( ( 1.311528 ) * gclwh4_14 * x507 ) ) + ( ( ( 0.52972088 ) * x612 ) ) + ( ( ( -0.00877837822836 ) * x622 ) ) + ( ( ( -0.52972088 ) * x596 ) ) + ( ( ( -0.52972088 ) * gclwh10_12 * rxp2_2 ) ) + ( ( gclwh14_14 * x628 ) ) + ( ( ( -1.0 ) * x493 * x501 ) ) + ( ( x498 * x530 ) ) + ( ( ( -0.00877837822836 ) * x547 ) ) + ( ( ( -1.311528 ) * gclwh14_14 * x513 ) ) );
            op[39] = ( ( -0.080560234076 ) + ( ( ( 8.0 ) * gclwh14_11 * x513 ) ) + ( ( ( -0.05354596 ) * gclwh14_11 * r20 ) ) + ( ( gclwh12_11 * x602 ) ) + ( ( x511 * x589 ) ) + ( ( ( -1.0 ) * gclwh6_11 * x598 ) ) + ( ( x493 * x503 ) ) + ( ( ( -8.0 ) * gclwh4_11 * x507 ) ) + ( ( ( -1.0 ) * x498 * x539 ) ) + ( ( ( -8.0 ) * gclwh12_11 * x500 ) ) + ( ( gclwh8_11 * x565 ) ) + ( ( gclwh4_11 * x545 ) ) + ( ( ( 0.9256 ) * x587 ) ) );
            op[40] = ( ( 0.050601122962 ) + ( ( ( -1.0 ) * x887 ) ) + x896 );
            op[41] = ( ( ( ( -0.0794 ) * gclwh1_2 * x498 ) ) + ( ( ( 0.0794 ) * gclwh14_2 * x498 ) ) + ( ( ( -1.0 ) * gclwh8_2 * x629 ) ) + ( ( ( 0.1588 ) * gclwh4_2 * x507 ) ) + ( ( ( -0.0794 ) * gclwh3_2 * x493 ) ) + ( ( ( 0.1588 ) * gclwh3_2 * x500 ) ) + ( ( gclwh6_2 * x505 ) ) + ( ( ( -1.0 ) * gclwh12_2 * x585 ) ) + ( ( ( -1.0 ) * x881 ) ) + ( ( gclwh14_2 * x519 ) ) + ( ( gclwh1_2 * x519 ) ) + ( ( ( 0.1588 ) * gclwh12_2 * x500 ) ) + ( ( ( -0.01837316 ) * gclwh10_2 * rxp2_2 ) ) + ( ( ( -0.0794 ) * gclwh4_2 * x511 ) ) + ( ( ( -1.0 ) * gclwh4_2 * x554 ) ) + ( ( ( 0.1588 ) * gclwh1_2 * x513 ) ) + x892 + ( ( ( -0.0794 ) * gclwh12_2 * x493 ) ) + ( ( gclwh3_2 * x585 ) ) + ( ( ( -0.1588 ) * gclwh14_2 * x513 ) ) );
            op[42] = ( ( ( ( 4.7372 ) * gclwh15_0 * x513 ) ) + ( ( ( 0.031707240214 ) * gclwh0_0 * r20 ) ) + ( ( ( 4.7372 ) * gclwh2_0 * x500 ) ) + ( ( ( 2.3686 ) * gclwh13_0 * x493 ) ) + ( ( ( -2.3686 ) * gclwh0_0 * x498 ) ) + ( ( ( -2.3686 ) * gclwh15_0 * x498 ) ) + ( ( ( 0.54809404 ) * gclwh9_0 * rxp0_2 ) ) + ( ( ( 0.031707240214 ) * x582 ) ) + ( ( ( -4.7372 ) * gclwh13_0 * x500 ) ) + ( ( ( 0.54809404 ) * x580 ) ) + ( ( ( -0.031707240214 ) * x534 ) ) + ( ( ( -1.0 ) * x889 ) ) + ( ( ( -4.7372 ) * gclwh5_0 * x507 ) ) + ( ( ( 4.7372 ) * gclwh0_0 * x513 ) ) + ( ( ( -2.3686 ) * gclwh2_0 * x493 ) ) + ( ( ( 0.031707240214 ) * gclwh5_0 * r22 ) ) + ( ( ( 2.3686 ) * gclwh5_0 * x511 ) ) + ( ( ( 0.031707240214 ) * gclwh2_0 * r21 ) ) + x878 + ( ( ( -0.54809404 ) * gclwh7_0 * rxp1_2 ) ) );
            op[43] = ( ( 2.751379677038 ) + ( ( ( -1.0 ) * x893 ) ) + x895 );
            op[44] = ( ( 0.080560234076 ) + ( ( ( -1.0 ) * x498 * x561 ) ) + ( ( ( -0.05354596 ) * x538 ) ) + ( ( ( -8.0 ) * gclwh5_10 * x507 ) ) + ( ( ( -8.0 ) * gclwh13_10 * x500 ) ) + ( ( gclwh5_10 * x545 ) ) + ( ( gclwh9_10 * x565 ) ) + ( ( ( -1.0 ) * gclwh7_10 * x598 ) ) + ( ( gclwh13_10 * x602 ) ) + ( ( x511 * x609 ) ) + ( ( ( 8.0 ) * gclwh15_10 * x513 ) ) + ( ( ( 0.9256 ) * gclwh11_10 * rxp2_2 ) ) + ( ( x493 * x614 ) ) );
            op[45] = ( ( ( x493 * x603 ) ) + ( ( ( -0.52972088 ) * x571 ) ) + ( ( ( -1.311528 ) * gclwh5_15 * x507 ) ) + ( ( ( 1.311528 ) * gclwh15_15 * x513 ) ) + ( ( ( 0.00877837822836 ) * x601 ) ) + ( ( ( 0.00877837822836 ) * x604 ) ) + ( ( ( 0.52972088 ) * x599 ) ) + ( ( ( -1.0 ) * gclwh15_15 * x628 ) ) + ( ( ( -1.311528 ) * gclwh13_15 * x500 ) ) + ( ( ( -1.0 ) * x498 * x541 ) ) + ( ( x511 * x532 ) ) + ( ( ( 0.52972088 ) * x544 ) ) );
            op[46] = ( ( ( ( 0.01837316 ) * x580 ) ) + ( ( ( 0.001062887306 ) * x582 ) ) + ( ( ( -1.0 ) * gclwh15_0 * x519 ) ) + ( ( gclwh0_0 * x519 ) ) + ( ( ( 0.0794 ) * gclwh5_0 * x511 ) ) + ( ( ( -0.0794 ) * gclwh15_0 * x498 ) ) + ( ( ( 0.0794 ) * gclwh13_0 * x493 ) ) + ( ( ( -0.0794 ) * gclwh2_0 * x493 ) ) + ( ( ( 0.1588 ) * gclwh0_0 * x513 ) ) + ( ( ( -1.0 ) * gclwh7_0 * x505 ) ) + ( ( gclwh2_0 * x585 ) ) + ( ( gclwh5_0 * x554 ) ) + ( ( ( -0.1588 ) * gclwh13_0 * x500 ) ) + ( ( gclwh9_0 * x629 ) ) + x889 + ( ( ( 0.1588 ) * gclwh2_0 * x500 ) ) + ( ( ( -0.1588 ) * gclwh5_0 * x507 ) ) + ( ( ( -0.0794 ) * gclwh0_0 * x498 ) ) + ( ( ( 0.1588 ) * gclwh15_0 * x513 ) ) + ( ( ( -1.0 ) * x878 ) ) );
            op[47] = ( ( 0.050601122962 ) + ( ( ( -1.0 ) * x895 ) ) + x893 );
            op[48] = ( ( ( ( -0.27404702 ) * x569 ) ) + ( ( ( -2.3686 ) * gclwh10_12 * x507 ) ) + ( ( ( 1.1843 ) * gclwh8_12 * x498 ) ) + ( ( ( 0.27404702 ) * x552 ) ) + ( ( gclwh10_12 * x553 ) ) + ( ( ( -1.0 ) * gclwh4_8 * x512 ) ) + ( ( ( -1.0 ) * x891 ) ) + ( ( ( 2.3686 ) * gclwh6_12 * x500 ) ) + ( ( ( 1.1843 ) * gclwh10_12 * x511 ) ) + ( ( ( -1.1843 ) * gclwh6_12 * x493 ) ) + x646 + ( ( ( -0.015853620107 ) * x579 ) ) + x882 + ( ( ( 0.015853620107 ) * x594 ) ) + ( ( ( -2.3686 ) * gclwh8_12 * x513 ) ) + ( ( ( -1.0 ) * x871 ) ) );
            op[49] = ( ( ( ( -1.0 ) * x898 ) ) + ( ( ( -1.0 ) * gclwh8_11 * x498 ) ) + ( ( gclwh6_11 * x493 ) ) + ( ( gclwh14_3 * x591 ) ) + ( ( ( -1.0 ) * gclwh10_11 * x511 ) ) + ( ( ( -0.327675509152703 ) * x536 ) ) + x886 + ( ( ( -0.327675509152703 ) * x546 ) ) + x900 + ( ( ( -1.0 ) * x874 ) ) );
            op[50] = ( ( 0.3752937372 ) + ( ( gclwh6_11 * x542 ) ) + ( ( ( -1.0 ) * gclwh10_11 * x514 ) ) + ( ( x493 * x595 ) ) + ( ( ( -1.0 ) * x511 * x548 ) ) + ( ( ( -4.0 ) * gclwh6_11 * x500 ) ) + ( ( gclwh12_11 * x570 ) ) + ( ( ( -1.0 ) * x498 * x606 ) ) + ( ( ( 4.0 ) * gclwh10_11 * x507 ) ) + ( ( ( -1.0 ) * gclwh8_11 * x605 ) ) + ( ( gclwh4_11 * x618 ) ) + ( ( ( -1.0 ) * gclwh14_11 * x592 ) ) + ( ( ( 4.0 ) * gclwh8_11 * x513 ) ) );
            op[51] = ( ( ( ( 1.1446 ) * gclwh6_2 * x493 ) ) + ( ( ( -1.0 ) * gclwh14_2 * x504 ) ) + ( ( ( -1.0 ) * gclwh14_14 * x583 ) ) + ( ( ( -1.1446 ) * gclwh8_2 * x498 ) ) + ( ( ( -1.0 ) * gclwh8_2 * x577 ) ) + ( ( ( -1.0 ) * gclwh10_2 * x533 ) ) + ( ( gclwh4_8 * x613 ) ) + ( ( ( -0.2832336 ) * x552 ) ) + ( ( ( 0.2832336 ) * x569 ) ) + ( ( gclwh4_2 * x516 ) ) + ( ( ( -1.1446 ) * gclwh10_2 * x511 ) ) + ( ( gclwh4_14 * x551 ) ) + ( ( ( -2.2892 ) * gclwh6_2 * x500 ) ) + ( ( ( 2.2892 ) * gclwh8_2 * x513 ) ) + ( ( gclwh6_2 * x586 ) ) + ( ( gclwh12_14 * x615 ) ) + ( ( gclwh12_2 * x573 ) ) + ( ( ( 2.2892 ) * gclwh10_2 * x507 ) ) );
            op[52] = ( ( ( ( 0.00918658 ) * x569 ) ) + ( ( ( -0.0794 ) * gclwh8_12 * x513 ) ) + ( ( gclwh4_8 * x581 ) ) + ( ( ( -0.0397 ) * gclwh6_12 * x493 ) ) + ( ( ( 0.0397 ) * gclwh8_12 * x498 ) ) + ( ( ( 0.0794 ) * gclwh6_12 * x500 ) ) + ( ( ( -1.0 ) * x891 ) ) + ( ( ( -0.00918658 ) * x552 ) ) + ( ( ( -0.000531443653 ) * x579 ) ) + ( ( ( -1.0 ) * x646 ) ) + x871 + x882 + ( ( ( 0.0397 ) * gclwh10_12 * x511 ) ) + ( ( ( -0.0794 ) * gclwh10_12 * x507 ) ) + ( ( ( 0.000531443653 ) * x594 ) ) + ( ( gclwh10_12 * x619 ) ) );
            op[53] = ( ( ( gclwh10_11 * x511 ) ) + ( ( ( -1.0 ) * x898 ) ) + ( ( ( -0.0034863305927034 ) * x546 ) ) + ( ( ( -1.0 ) * x886 ) ) + ( ( ( -0.0034863305927034 ) * x536 ) ) + x874 + ( ( ( -1.0 ) * gclwh6_11 * x493 ) ) + x900 + ( ( gclwh14_3 * x624 ) ) + ( ( gclwh8_11 * x498 ) ) );
            op[54] = ( ( ( gclwh9_10 * x498 ) ) + ( ( ( -0.327675509152703 ) * x562 ) ) + ( ( ( -1.0 ) * x897 ) ) + ( ( ( -1.0 ) * x885 ) ) + ( ( ( -0.327675509152703 ) * x590 ) ) + ( ( gclwh15_1 * x591 ) ) + ( ( gclwh11_10 * x511 ) ) + ( ( ( -1.0 ) * gclwh7_10 * x493 ) ) + x873 + x899 );
            op[55] = ( ( ( ( -1.0 ) * x869 ) ) + ( ( ( -2.3686 ) * gclwh11_13 * x507 ) ) + ( ( ( -1.0 ) * gclwh5_9 * x512 ) ) + ( ( ( 0.015853620107 ) * gclwh9_13 * r20 ) ) + ( ( ( -0.015853620107 ) * x555 ) ) + ( ( ( -1.0 ) * x888 ) ) + ( ( ( -2.3686 ) * gclwh9_13 * x513 ) ) + ( ( ( -0.27404702 ) * x550 ) ) + ( ( ( 2.3686 ) * gclwh7_13 * x500 ) ) + ( ( ( 0.015853620107 ) * x526 ) ) + x671 + ( ( ( -1.1843 ) * gclwh7_13 * x493 ) ) + ( ( ( 0.27404702 ) * x566 ) ) + ( ( ( 1.1843 ) * gclwh11_13 * x511 ) ) + x877 + ( ( ( 1.1843 ) * gclwh9_13 * x498 ) ) );
            op[56] = ( ( ( ( -1.0 ) * gclwh13_15 * x615 ) ) + ( ( gclwh13_0 * x573 ) ) + ( ( gclwh5_0 * x516 ) ) + ( ( ( -1.0 ) * gclwh5_15 * x551 ) ) + ( ( ( -0.2832336 ) * x550 ) ) + ( ( ( 2.2892 ) * gclwh11_0 * x507 ) ) + ( ( ( -1.0 ) * gclwh9_0 * x577 ) ) + ( ( ( 0.2832336 ) * x566 ) ) + ( ( ( 2.2892 ) * npx * x496 ) ) + ( ( ( -1.0 ) * gclwh5_9 * x613 ) ) + ( ( gclwh15_15 * x583 ) ) + ( ( ( -1.0 ) * gclwh11_0 * x533 ) ) + ( ( gclwh7_0 * x586 ) ) + ( ( ( -1.1446 ) * gclwh9_0 * x498 ) ) + ( ( ( -1.0 ) * gclwh15_0 * x504 ) ) + ( ( ( 1.1446 ) * gclwh7_0 * x493 ) ) + ( ( ( -1.1446 ) * gclwh11_0 * x511 ) ) + ( ( ( -2.2892 ) * gclwh7_0 * x500 ) ) );
            op[57] = ( ( 0.3752937372 ) + ( ( ( -1.0 ) * gclwh9_10 * x605 ) ) + ( ( ( 4.0 ) * gclwh11_10 * x507 ) ) + ( ( ( -1.0 ) * x511 * x515 ) ) + ( ( ( -1.0 ) * gclwh15_10 * x592 ) ) + ( ( ( -1.0 ) * gclwh11_10 * x514 ) ) + ( ( gclwh13_10 * x570 ) ) + ( ( ( 4.0 ) * gclwh9_10 * x513 ) ) + ( ( gclwh7_10 * x542 ) ) + ( ( gclwh5_10 * x618 ) ) + ( ( ( -1.0 ) * x498 * x535 ) ) + ( ( x493 * x557 ) ) + ( ( ( -4.0 ) * gclwh7_10 * x500 ) ) );
            op[58] = ( ( ( ( -0.0034863305927034 ) * x562 ) ) + ( ( gclwh15_1 * x624 ) ) + ( ( ( -1.0 ) * x897 ) ) + ( ( ( -1.0 ) * gclwh9_10 * x498 ) ) + ( ( ( -1.0 ) * gclwh11_10 * x511 ) ) + x885 + x899 + ( ( gclwh7_10 * x493 ) ) + ( ( ( -0.0034863305927034 ) * x590 ) ) + ( ( ( -1.0 ) * x873 ) ) );
            op[59] = ( ( ( ( -0.00918658 ) * x566 ) ) + ( ( ( 0.0397 ) * gclwh11_13 * x511 ) ) + ( ( ( -0.0794 ) * gclwh11_13 * x507 ) ) + ( ( ( -0.000531443653 ) * x555 ) ) + ( ( ( -1.0 ) * x888 ) ) + ( ( ( 0.0794 ) * gclwh7_13 * x500 ) ) + ( ( ( 0.00918658 ) * x550 ) ) + ( ( ( 0.000531443653 ) * x526 ) ) + x869 + x877 + ( ( ( 0.0397 ) * gclwh9_13 * x498 ) ) + ( ( gclwh9_13 * x608 ) ) + ( ( ( -0.0397 ) * gclwh7_13 * x493 ) ) + ( ( ( -0.0794 ) * gclwh9_13 * x513 ) ) + ( ( gclwh5_9 * x581 ) ) + ( ( ( -1.0 ) * x671 ) ) );
            op[60] = ( ( ( ( 2.3686 ) * gclwh4_8 * x507 ) ) + ( ( ( -1.0 ) * gclwh10_12 * x512 ) ) + ( ( ( 0.27404702 ) * x612 ) ) + ( ( ( 0.015853620107 ) * x509 ) ) + ( ( ( -1.0 ) * x684 ) ) + ( ( ( -1.0 ) * gclwh4_8 * x553 ) ) + ( ( ( -1.0 ) * x894 ) ) + ( ( ( 2.3686 ) * gclwh12_8 * x500 ) ) + ( ( ( -1.1843 ) * gclwh4_8 * x511 ) ) + ( ( ( -0.015853620107 ) * x529 ) ) + ( ( ( -0.27404702 ) * x596 ) ) + ( ( ( -1.1843 ) * gclwh12_8 * x493 ) ) + ( ( ( 1.1843 ) * gclwh14_8 * x498 ) ) + x872 + x880 + ( ( ( -2.3686 ) * gclwh14_8 * x513 ) ) );
            op[61] = ( ( 1.429443141481 ) + ( ( ( -0.0189560282044839 ) * x540 ) ) + ( ( ( -1.429443141481 ) * gclwh1_3 * x498 ) ) + ( ( ( 2.832113302962 ) * gclwh3_3 * x500 ) ) + ( ( gclwh3_3 * x567 ) ) + ( ( ( -1.0 ) * x903 ) ) + ( ( ( -1.402670161481 ) * gclwh12_3 * x493 ) ) + ( ( gclwh12_11 * x493 ) ) + ( ( gclwh4_11 * x511 ) ) + ( ( gclwh14_3 * x593 ) ) + ( ( ( -0.0189560282044839 ) * x497 ) ) + ( ( ( -2.832113302962 ) * gclwh14_3 * x513 ) ) + ( ( ( 2.832113302962 ) * gclwh12_3 * x500 ) ) + ( ( gclwh1_3 * x593 ) ) + ( ( ( 1.402670161481 ) * gclwh14_3 * x498 ) ) + ( ( ( 2.832113302962 ) * gclwh1_3 * x513 ) ) + ( ( ( -1.0 ) * gclwh14_11 * x498 ) ) + ( ( ( -1.402670161481 ) * pp * x497 ) ) + ( ( ( 2.832113302962 ) * gclwh4_3 * x507 ) ) + x883 + x902 + ( ( ( -1.429443141481 ) * gclwh3_3 * x493 ) ) + ( ( ( -1.0 ) * x875 ) ) );
            op[62] = ( ( 0.147786722962 ) + ( ( ( -1.0 ) * x887 ) ) + x896 );
            op[63] = ( ( ( ( -2.2892 ) * gclwh1_2 * x513 ) ) + ( ( ( 1.1446 ) * gclwh3_2 * x493 ) ) + ( ( ( 0.01638506376 ) * x529 ) ) + ( ( ( -2.2892 ) * gclwh3_2 * x500 ) ) + ( ( ( -1.0 ) * gclwh14_2 * x577 ) ) + ( ( ( -1.0 ) * gclwh3_2 * x586 ) ) + ( ( ( -1.0 ) * gclwh1_2 * x577 ) ) + ( ( ( 1.1446 ) * gclwh1_2 * x498 ) ) + ( ( ( -1.0 ) * x881 ) ) + ( ( ( 2.448 ) * gclwh14_8 * x513 ) ) + ( ( ( -2.448 ) * gclwh12_8 * x500 ) ) + ( ( ( 1.1446 ) * gclwh4_2 * x511 ) ) + ( ( ( 0.01638506376 ) * x630 ) ) + ( ( ( 1.1446 ) * gclwh12_2 * x493 ) ) + ( ( ( 2.2892 ) * gclwh14_2 * x513 ) ) + ( ( ( -2.2892 ) * gclwh4_2 * x507 ) ) + ( ( ( -1.224 ) * gclwh14_8 * x498 ) ) + ( ( ( -2.2892 ) * gclwh12_2 * x500 ) ) + ( ( gclwh12_2 * x586 ) ) + ( ( ( -2.448 ) * gclwh4_8 * x507 ) ) + x892 + ( ( ( -1.1446 ) * gclwh14_2 * x498 ) ) + ( ( ( 1.224 ) * gclwh12_8 * x493 ) ) + ( ( gclwh4_2 * x533 ) ) + ( ( gclwh8_2 * x504 ) ) + ( ( gclwh10_2 * x516 ) ) + ( ( ( 1.224 ) * gclwh4_8 * x511 ) ) + ( ( ( -1.0 ) * gclwh6_2 * x573 ) ) + ( ( ( -0.01638506376 ) * x509 ) ) );
            op[64] = ( ( ( ( -1.0 ) * gclwh10_12 * x581 ) ) + ( ( ( 0.0794 ) * gclwh14_8 * x513 ) ) + ( ( ( -0.000531443653 ) * x509 ) ) + ( ( ( -0.0794 ) * gclwh4_8 * x507 ) ) + ( ( ( -1.0 ) * x684 ) ) + ( ( ( -0.0794 ) * gclwh12_8 * x500 ) ) + ( ( ( 0.0397 ) * gclwh12_8 * x493 ) ) + ( ( gclwh4_8 * x619 ) ) + ( ( ( -1.0 ) * x880 ) ) + ( ( ( 0.00918658 ) * x612 ) ) + ( ( ( 0.000531443653 ) * x529 ) ) + ( ( ( -0.00918658 ) * x596 ) ) + ( ( ( -0.0397 ) * gclwh14_8 * x498 ) ) + x872 + x894 + ( ( ( 0.0397 ) * gclwh4_8 * x511 ) ) );
            op[65] = ( ( -0.028452741481 ) + ( ( gclwh1_3 * x523 ) ) + ( ( gclwh14_11 * x498 ) ) + ( ( ( -0.001679761481 ) * pp * x497 ) ) + ( ( ( -0.001679761481 ) * gclwh12_3 * x493 ) ) + ( ( ( -1.0 ) * gclwh4_11 * x511 ) ) + ( ( ( 0.030132502962 ) * gclwh4_3 * x507 ) ) + ( ( ( -1.0 ) * x903 ) ) + ( ( ( -1.0 ) * x883 ) ) + ( ( ( 0.030132502962 ) * gclwh3_3 * x500 ) ) + ( ( gclwh14_3 * x523 ) ) + ( ( ( -0.028452741481 ) * gclwh1_3 * x498 ) ) + ( ( ( 0.030132502962 ) * gclwh12_3 * x500 ) ) + ( ( ( 0.001679761481 ) * gclwh14_3 * x498 ) ) + ( ( ( -0.030132502962 ) * gclwh14_3 * x513 ) ) + ( ( ( 0.030132502962 ) * gclwh1_3 * x513 ) ) + ( ( ( -0.000201684224787892 ) * x540 ) ) + ( ( gclwh3_3 * x607 ) ) + ( ( ( -0.000201684224787892 ) * x497 ) ) + ( ( ( -0.028452741481 ) * gclwh3_3 * x493 ) ) + x875 + x902 + ( ( ( -1.0 ) * gclwh12_11 * x493 ) ) );
            op[66] = ( ( -1.429443141481 ) + ( ( ( -0.0189560282044839 ) * x508 ) ) + ( ( gclwh5_10 * x511 ) ) + ( ( ( 1.402670161481 ) * gclwh5_1 * x511 ) ) + ( ( ( 2.832113302962 ) * gclwh2_1 * x500 ) ) + ( ( ( -2.832113302962 ) * gclwh5_1 * x507 ) ) + ( ( gclwh2_1 * x567 ) ) + ( ( ( -1.0 ) * x901 ) ) + ( ( ( -1.429443141481 ) * gclwh0_1 * x498 ) ) + ( ( ( -1.0 ) * gclwh15_10 * x498 ) ) + ( ( gclwh13_10 * x493 ) ) + x884 + ( ( ( 2.832113302962 ) * gclwh0_1 * x513 ) ) + ( ( ( -2.832113302962 ) * gclwh13_1 * x500 ) ) + ( ( gclwh0_1 * x593 ) ) + ( ( ( 1.402670161481 ) * gclwh13_1 * x493 ) ) + x904 + ( ( ( 0.0189560282044839 ) * x524 ) ) + ( ( ( 2.832113302962 ) * gclwh15_1 * x513 ) ) + ( ( ( 0.0189560282044839 ) * x610 ) ) + ( ( ( -1.429443141481 ) * gclwh2_1 * x493 ) ) + ( ( ( -1.402670161481 ) * gclwh15_1 * x498 ) ) + ( ( ( -1.0 ) * x876 ) ) );
            op[67] = ( ( ( ( 1.1843 ) * gclwh13_9 * x493 ) ) + ( ( ( 1.1843 ) * gclwh5_9 * x511 ) ) + ( ( ( 2.3686 ) * gclwh15_9 * x513 ) ) + ( ( gclwh11_13 * x512 ) ) + ( ( ( -1.1843 ) * gclwh15_9 * x498 ) ) + ( ( ( -2.3686 ) * gclwh13_9 * x500 ) ) + ( ( ( 0.015853620107 ) * x510 ) ) + ( ( gclwh5_9 * x553 ) ) + ( ( ( -0.27404702 ) * x571 ) ) + ( ( ( 0.27404702 ) * x599 ) ) + x703 + ( ( ( -2.3686 ) * gclwh5_9 * x507 ) ) + x890 + ( ( ( -0.015853620107 ) * x623 ) ) + ( ( ( -1.0 ) * x879 ) ) + ( ( ( -1.0 ) * x870 ) ) );
            op[68] = ( ( ( ( -1.1446 ) * gclwh13_0 * x493 ) ) + ( ( ( -2.448 ) * gclwh13_9 * x500 ) ) + ( ( ( 0.015322176454 ) * x534 ) ) + ( ( ( 1.224 ) * gclwh13_9 * x493 ) ) + ( ( ( 0.01638506376 ) * x510 ) ) + ( ( ( -1.0 ) * gclwh11_0 * x516 ) ) + ( ( ( -2.2892 ) * gclwh2_0 * x500 ) ) + ( ( ( -0.01638506376 ) * x623 ) ) + ( ( ( -1.1446 ) * gclwh5_0 * x511 ) ) + ( ( ( 1.1446 ) * gclwh15_0 * x498 ) ) + ( ( ( -2.2892 ) * gclwh0_0 * x513 ) ) + ( ( ( -1.224 ) * gclwh15_9 * x498 ) ) + ( ( ( -2.448 ) * gclwh5_9 * x507 ) ) + ( ( ( -1.0 ) * gclwh5_0 * x533 ) ) + ( ( ( -0.015322176454 ) * x582 ) ) + ( ( ( 2.2892 ) * gclwh13_0 * x500 ) ) + ( ( ( -1.0 ) * gclwh9_0 * x504 ) ) + ( ( ( 0.01638506376 ) * x568 ) ) + ( ( ( 1.1446 ) * gclwh0_0 * x498 ) ) + ( ( gclwh7_0 * x573 ) ) + x889 + ( ( ( 2.448 ) * gclwh15_9 * x513 ) ) + ( ( ( -2.2892 ) * gclwh15_0 * x513 ) ) + ( ( ( 1.1446 ) * gclwh2_0 * x493 ) ) + ( ( ( -1.0 ) * gclwh0_0 * x577 ) ) + ( ( ( 1.224 ) * gclwh5_9 * x511 ) ) + ( ( ( 2.2892 ) * gclwh5_0 * x507 ) ) + ( ( ( -1.0 ) * x878 ) ) + ( ( ( -1.0 ) * gclwh2_0 * x586 ) ) );
            op[69] = ( ( 0.147786722962 ) + ( ( ( -1.0 ) * x895 ) ) + x893 );
            op[70] = ( ( 0.028452741481 ) + ( ( ( 0.000201684224787892 ) * x524 ) ) + ( ( ( 0.001679761481 ) * gclwh13_1 * x493 ) ) + ( ( ( -1.0 ) * gclwh13_10 * x493 ) ) + ( ( gclwh15_10 * x498 ) ) + ( ( ( -1.0 ) * x901 ) ) + ( ( ( 0.000201684224787892 ) * x610 ) ) + ( ( gclwh2_1 * x607 ) ) + ( ( ( -0.000201684224787892 ) * x508 ) ) + ( ( ( 0.030132502962 ) * gclwh2_1 * x500 ) ) + ( ( ( 0.001679761481 ) * gclwh5_1 * x511 ) ) + ( ( ( -0.030132502962 ) * gclwh13_1 * x500 ) ) + ( ( ( -1.0 ) * x884 ) ) + ( ( ( -0.028452741481 ) * gclwh2_1 * x493 ) ) + ( ( ( -1.0 ) * gclwh5_10 * x511 ) ) + ( ( ( 0.030132502962 ) * gclwh15_1 * x513 ) ) + ( ( ( -0.001679761481 ) * gclwh15_1 * x498 ) ) + ( ( ( 0.030132502962 ) * gclwh0_1 * x513 ) ) + ( ( ( -0.030132502962 ) * gclwh5_1 * x507 ) ) + x876 + x904 + ( ( gclwh0_1 * x523 ) ) + ( ( ( -0.028452741481 ) * gclwh0_1 * x498 ) ) );
            op[71] = ( ( ( gclwh15_9 * x608 ) ) + ( ( ( 0.0397 ) * gclwh15_9 * x498 ) ) + ( ( ( -1.0 ) * x890 ) ) + ( ( ( -0.00918658 ) * x571 ) ) + ( ( ( -0.000531443653 ) * x510 ) ) + ( ( ( 0.00918658 ) * x544 ) ) + ( ( ( -0.0794 ) * gclwh15_9 * x513 ) ) + ( ( ( -0.0397 ) * gclwh5_9 * x511 ) ) + x703 + x879 + ( ( ( 0.0794 ) * gclwh13_9 * x500 ) ) + ( ( ( -0.0397 ) * gclwh13_9 * x493 ) ) + ( ( ( 0.0794 ) * gclwh5_9 * x507 ) ) + ( ( ( 0.00918658 ) * x599 ) ) + ( ( ( -0.000531443653 ) * x568 ) ) + ( ( ( -1.0 ) * x870 ) ) );
            solvedialyticpoly8qep ( op, zeror, numroots );
            IkReal j8array[16], cj8array[16], sj8array[16], j7array[16], cj7array[16], sj7array[16], j10array[16], cj10array[16], sj10array[16];
            int numsolutions = 0;
            for ( int ij8 = 0; ij8 < numroots; ij8 += 3 )
            {
                IkReal htj8 = zeror[ij8 + 0], htj7 = zeror[ij8 + 1], htj10 = zeror[ij8 + 2];
                if ( isnan ( htj8 ) || isnan ( htj7 ) || isnan ( htj10 ) ) {
                    continue;
                }
                j8array[numsolutions] = ( ( 2.0 ) * ( atan ( htj8 ) ) );
                j7array[numsolutions] = ( ( 2.0 ) * ( atan ( htj7 ) ) );
                j10array[numsolutions] = ( ( 2.0 ) * ( atan ( htj10 ) ) );
                if ( isinf ( htj8 ) ) {
                    cj8array[numsolutions] = IKcos ( j8array[numsolutions] );
                    sj8array[numsolutions] = IKsin ( j8array[numsolutions] );
                }
                else {
                    IkReal x905 = htj8 * htj8;
                    CheckValue<IkReal> x906 = IKPowWithIntegerCheck ( ( ( 1.0 ) + x905 ), -1 );
                    if ( !x906.valid ) {
                        continue;
                    }
                    cj8array[numsolutions] = ( ( x906.value ) * ( ( ( 1.0 ) + ( ( ( -1.0 ) * x905 ) ) ) ) );
                    CheckValue<IkReal> x907 = IKPowWithIntegerCheck ( ( ( 1.0 ) + ( htj8 * htj8 ) ), -1 );
                    if ( !x907.valid ) {
                        continue;
                    }
                    sj8array[numsolutions] = ( ( 2.0 ) * htj8 * ( x907.value ) );
                }
                if ( isinf ( htj7 ) ) {
                    cj7array[numsolutions] = IKcos ( j7array[numsolutions] );
                    sj7array[numsolutions] = IKsin ( j7array[numsolutions] );
                }
                else {
                    IkReal x908 = htj7 * htj7;
                    CheckValue<IkReal> x909 = IKPowWithIntegerCheck ( ( ( 1.0 ) + x908 ), -1 );
                    if ( !x909.valid ) {
                        continue;
                    }
                    cj7array[numsolutions] = ( ( x909.value ) * ( ( ( 1.0 ) + ( ( ( -1.0 ) * x908 ) ) ) ) );
                    CheckValue<IkReal> x910 = IKPowWithIntegerCheck ( ( ( 1.0 ) + ( htj7 * htj7 ) ), -1 );
                    if ( !x910.valid ) {
                        continue;
                    }
                    sj7array[numsolutions] = ( ( 2.0 ) * htj7 * ( x910.value ) );
                }
                if ( isinf ( htj10 ) ) {
                    cj10array[numsolutions] = IKcos ( j10array[numsolutions] );
                    sj10array[numsolutions] = IKsin ( j10array[numsolutions] );
                }
                else {
                    IkReal x911 = htj10 * htj10;
                    CheckValue<IkReal> x912 = IKPowWithIntegerCheck ( ( ( 1.0 ) + x911 ), -1 );
                    if ( !x912.valid ) {
                        continue;
                    }
                    cj10array[numsolutions] = ( ( x912.value ) * ( ( ( 1.0 ) + ( ( ( -1.0 ) * x911 ) ) ) ) );
                    CheckValue<IkReal> x913 = IKPowWithIntegerCheck ( ( ( 1.0 ) + ( htj10 * htj10 ) ), -1 );
                    if ( !x913.valid ) {
                        continue;
                    }
                    sj10array[numsolutions] = ( ( 2.0 ) * htj10 * ( x913.value ) );
                }
                if ( j8array[numsolutions] > IKPI )
                {
                    j8array[numsolutions] -= IK2PI;
                }
                else if ( j8array[numsolutions] < -IKPI )
                {
                    j8array[numsolutions] += IK2PI;
                }
                if ( j7array[numsolutions] > IKPI )
                {
                    j7array[numsolutions] -= IK2PI;
                }
                else if ( j7array[numsolutions] < -IKPI )
                {
                    j7array[numsolutions] += IK2PI;
                }
                if ( j10array[numsolutions] > IKPI )
                {
                    j10array[numsolutions] -= IK2PI;
                }
                else if ( j10array[numsolutions] < -IKPI )
                {
                    j10array[numsolutions] += IK2PI;
                }
                numsolutions++;
            }
            bool j8valid[16] = {true, true, true, true, true, true, true, true, true, true, true, true, true, true, true, true};
            _nj8 = 16;
            _nj7 = 1;
            _nj10 = 1;
            for ( int ij8 = 0; ij8 < numsolutions; ++ij8 )
            {
                if ( !j8valid[ij8] )
                {
                    continue;
                }
                _ij8[0] = ij8;
                _ij8[1] = -1;
                _ij7[0] = 0;
                _ij7[1] = -1;
                _ij10[0] = 0;
                _ij10[1] = -1;
                for ( int iij8 = ij8 + 1; iij8 < numsolutions; ++iij8 )
                {
                    if ( !j8valid[iij8] ) {
                        continue;
                    }
                    if ( IKabs ( cj8array[ij8] - cj8array[iij8] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj8array[ij8] - sj8array[iij8] ) < IKFAST_SOLUTION_THRESH && IKabs ( cj7array[ij8] - cj7array[iij8] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj7array[ij8] - sj7array[iij8] ) < IKFAST_SOLUTION_THRESH && IKabs ( cj10array[ij8] - cj10array[iij8] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj10array[ij8] - sj10array[iij8] ) < IKFAST_SOLUTION_THRESH &&  1 )
                    {
                        j8valid[iij8] = false;
                        _ij8[1] = iij8;
                        _ij7[1] = 0;
                        _ij10[1] = 0;
                        break;
                    }
                }
                j8 = j8array[ij8];
                cj8 = cj8array[ij8];
                sj8 = sj8array[ij8];

                j7 = j7array[ij8];
                cj7 = cj7array[ij8];
                sj7 = sj7array[ij8];

                j10 = j10array[ij8];
                cj10 = cj10array[ij8];
                sj10 = sj10array[ij8];

                innerfn ( solutions );
            }
        }
        return solutions.GetNumSolutions() > 0;
    }
    static inline void polyroots3 ( IkReal rawcoeffs[3 + 1], IkReal rawroots[3], int& numroots )
    {
        using std::complex;
        if ( rawcoeffs[0] == 0 ) {
            // solve with one reduced degree
            polyroots2 ( &rawcoeffs[1], &rawroots[0], numroots );
            return;
        }
        IKFAST_ASSERT ( rawcoeffs[0] != 0 );
        const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
        const IkReal tolsqrt = sqrt ( std::numeric_limits<IkReal>::epsilon() );
        complex<IkReal> coeffs[3];
        const int maxsteps = 110;
        for ( int i = 0; i < 3; ++i ) {
            coeffs[i] = complex<IkReal> ( rawcoeffs[i + 1] / rawcoeffs[0] );
        }
        complex<IkReal> roots[3];
        IkReal err[3];
        roots[0] = complex<IkReal> ( 1, 0 );
        roots[1] = complex<IkReal> ( 0.4, 0.9 ); // any complex number not a root of unity works
        err[0] = 1.0;
        err[1] = 1.0;
        for ( int i = 2; i < 3; ++i ) {
            roots[i] = roots[i - 1] * roots[1];
            err[i] = 1.0;
        }
        for ( int step = 0; step < maxsteps; ++step ) {
            bool changed = false;
            for ( int i = 0; i < 3; ++i ) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IkReal> x = roots[i] + coeffs[0];
                    for ( int j = 1; j < 3; ++j ) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for ( int j = 0; j < 3; ++j ) {
                        if ( i != j ) {
                            if ( roots[i] != roots[j] ) {
                                x /= ( roots[i] - roots[j] );
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs ( x );
                }
            }
            if ( !changed ) {
                break;
            }
        }

        numroots = 0;
        bool visited[3] = {false};
        for ( int i = 0; i < 3; ++i ) {
            if ( !visited[i] ) {
                // might be a multiple root, in which case it will have more error than the other roots
                // find any neighboring roots, and take the average
                complex<IkReal> newroot = roots[i];
                int n = 1;
                for ( int j = i + 1; j < 3; ++j ) {
                    // care about error in real much more than imaginary
                    if ( abs ( real ( roots[i] ) - real ( roots[j] ) ) < tolsqrt && abs ( imag ( roots[i] ) - imag ( roots[j] ) ) < 0.002 ) {
                        newroot += roots[j];
                        n += 1;
                        visited[j] = true;
                    }
                }
                if ( n > 1 ) {
                    newroot /= n;
                }
                // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                if ( IKabs ( imag ( newroot ) ) < tolsqrt ) {
                    rawroots[numroots++] = real ( newroot );
                }
            }
        }
    }
    static inline void polyroots2 ( IkReal rawcoeffs[2 + 1], IkReal rawroots[2], int& numroots ) {
        IkReal det = rawcoeffs[1] * rawcoeffs[1] - 4 * rawcoeffs[0] * rawcoeffs[2];
        if ( det < 0 ) {
            numroots = 0;
        }
        else if ( det == 0 ) {
            rawroots[0] = -0.5 * rawcoeffs[1] / rawcoeffs[0];
            numroots = 1;
        }
        else {
            det = IKsqrt ( det );
            rawroots[0] = ( -rawcoeffs[1] + det ) / ( 2 * rawcoeffs[0] );
            rawroots[1] = ( -rawcoeffs[1] - det ) / ( 2 * rawcoeffs[0] ); //rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
            numroots = 2;
        }
    }
    static inline void polyroots5 ( IkReal rawcoeffs[5 + 1], IkReal rawroots[5], int& numroots )
    {
        using std::complex;
        if ( rawcoeffs[0] == 0 ) {
            // solve with one reduced degree
            polyroots4 ( &rawcoeffs[1], &rawroots[0], numroots );
            return;
        }
        IKFAST_ASSERT ( rawcoeffs[0] != 0 );
        const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
        const IkReal tolsqrt = sqrt ( std::numeric_limits<IkReal>::epsilon() );
        complex<IkReal> coeffs[5];
        const int maxsteps = 110;
        for ( int i = 0; i < 5; ++i ) {
            coeffs[i] = complex<IkReal> ( rawcoeffs[i + 1] / rawcoeffs[0] );
        }
        complex<IkReal> roots[5];
        IkReal err[5];
        roots[0] = complex<IkReal> ( 1, 0 );
        roots[1] = complex<IkReal> ( 0.4, 0.9 ); // any complex number not a root of unity works
        err[0] = 1.0;
        err[1] = 1.0;
        for ( int i = 2; i < 5; ++i ) {
            roots[i] = roots[i - 1] * roots[1];
            err[i] = 1.0;
        }
        for ( int step = 0; step < maxsteps; ++step ) {
            bool changed = false;
            for ( int i = 0; i < 5; ++i ) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IkReal> x = roots[i] + coeffs[0];
                    for ( int j = 1; j < 5; ++j ) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for ( int j = 0; j < 5; ++j ) {
                        if ( i != j ) {
                            if ( roots[i] != roots[j] ) {
                                x /= ( roots[i] - roots[j] );
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs ( x );
                }
            }
            if ( !changed ) {
                break;
            }
        }

        numroots = 0;
        bool visited[5] = {false};
        for ( int i = 0; i < 5; ++i ) {
            if ( !visited[i] ) {
                // might be a multiple root, in which case it will have more error than the other roots
                // find any neighboring roots, and take the average
                complex<IkReal> newroot = roots[i];
                int n = 1;
                for ( int j = i + 1; j < 5; ++j ) {
                    // care about error in real much more than imaginary
                    if ( abs ( real ( roots[i] ) - real ( roots[j] ) ) < tolsqrt && abs ( imag ( roots[i] ) - imag ( roots[j] ) ) < 0.002 ) {
                        newroot += roots[j];
                        n += 1;
                        visited[j] = true;
                    }
                }
                if ( n > 1 ) {
                    newroot /= n;
                }
                // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                if ( IKabs ( imag ( newroot ) ) < tolsqrt ) {
                    rawroots[numroots++] = real ( newroot );
                }
            }
        }
    }
    static inline void polyroots4 ( IkReal rawcoeffs[4 + 1], IkReal rawroots[4], int& numroots )
    {
        using std::complex;
        if ( rawcoeffs[0] == 0 ) {
            // solve with one reduced degree
            polyroots3 ( &rawcoeffs[1], &rawroots[0], numroots );
            return;
        }
        IKFAST_ASSERT ( rawcoeffs[0] != 0 );
        const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
        const IkReal tolsqrt = sqrt ( std::numeric_limits<IkReal>::epsilon() );
        complex<IkReal> coeffs[4];
        const int maxsteps = 110;
        for ( int i = 0; i < 4; ++i ) {
            coeffs[i] = complex<IkReal> ( rawcoeffs[i + 1] / rawcoeffs[0] );
        }
        complex<IkReal> roots[4];
        IkReal err[4];
        roots[0] = complex<IkReal> ( 1, 0 );
        roots[1] = complex<IkReal> ( 0.4, 0.9 ); // any complex number not a root of unity works
        err[0] = 1.0;
        err[1] = 1.0;
        for ( int i = 2; i < 4; ++i ) {
            roots[i] = roots[i - 1] * roots[1];
            err[i] = 1.0;
        }
        for ( int step = 0; step < maxsteps; ++step ) {
            bool changed = false;
            for ( int i = 0; i < 4; ++i ) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IkReal> x = roots[i] + coeffs[0];
                    for ( int j = 1; j < 4; ++j ) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for ( int j = 0; j < 4; ++j ) {
                        if ( i != j ) {
                            if ( roots[i] != roots[j] ) {
                                x /= ( roots[i] - roots[j] );
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs ( x );
                }
            }
            if ( !changed ) {
                break;
            }
        }

        numroots = 0;
        bool visited[4] = {false};
        for ( int i = 0; i < 4; ++i ) {
            if ( !visited[i] ) {
                // might be a multiple root, in which case it will have more error than the other roots
                // find any neighboring roots, and take the average
                complex<IkReal> newroot = roots[i];
                int n = 1;
                for ( int j = i + 1; j < 4; ++j ) {
                    // care about error in real much more than imaginary
                    if ( abs ( real ( roots[i] ) - real ( roots[j] ) ) < tolsqrt && abs ( imag ( roots[i] ) - imag ( roots[j] ) ) < 0.002 ) {
                        newroot += roots[j];
                        n += 1;
                        visited[j] = true;
                    }
                }
                if ( n > 1 ) {
                    newroot /= n;
                }
                // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                if ( IKabs ( imag ( newroot ) ) < tolsqrt ) {
                    rawroots[numroots++] = real ( newroot );
                }
            }
        }
    }
    static inline void polyroots6 ( IkReal rawcoeffs[6 + 1], IkReal rawroots[6], int& numroots )
    {
        using std::complex;
        if ( rawcoeffs[0] == 0 ) {
            // solve with one reduced degree
            polyroots5 ( &rawcoeffs[1], &rawroots[0], numroots );
            return;
        }
        IKFAST_ASSERT ( rawcoeffs[0] != 0 );
        const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
        const IkReal tolsqrt = sqrt ( std::numeric_limits<IkReal>::epsilon() );
        complex<IkReal> coeffs[6];
        const int maxsteps = 110;
        for ( int i = 0; i < 6; ++i ) {
            coeffs[i] = complex<IkReal> ( rawcoeffs[i + 1] / rawcoeffs[0] );
        }
        complex<IkReal> roots[6];
        IkReal err[6];
        roots[0] = complex<IkReal> ( 1, 0 );
        roots[1] = complex<IkReal> ( 0.4, 0.9 ); // any complex number not a root of unity works
        err[0] = 1.0;
        err[1] = 1.0;
        for ( int i = 2; i < 6; ++i ) {
            roots[i] = roots[i - 1] * roots[1];
            err[i] = 1.0;
        }
        for ( int step = 0; step < maxsteps; ++step ) {
            bool changed = false;
            for ( int i = 0; i < 6; ++i ) {
                if ( err[i] >= tol ) {
                    changed = true;
                    // evaluate
                    complex<IkReal> x = roots[i] + coeffs[0];
                    for ( int j = 1; j < 6; ++j ) {
                        x = roots[i] * x + coeffs[j];
                    }
                    for ( int j = 0; j < 6; ++j ) {
                        if ( i != j ) {
                            if ( roots[i] != roots[j] ) {
                                x /= ( roots[i] - roots[j] );
                            }
                        }
                    }
                    roots[i] -= x;
                    err[i] = abs ( x );
                }
            }
            if ( !changed ) {
                break;
            }
        }

        numroots = 0;
        bool visited[6] = {false};
        for ( int i = 0; i < 6; ++i ) {
            if ( !visited[i] ) {
                // might be a multiple root, in which case it will have more error than the other roots
                // find any neighboring roots, and take the average
                complex<IkReal> newroot = roots[i];
                int n = 1;
                for ( int j = i + 1; j < 6; ++j ) {
                    // care about error in real much more than imaginary
                    if ( abs ( real ( roots[i] ) - real ( roots[j] ) ) < tolsqrt && abs ( imag ( roots[i] ) - imag ( roots[j] ) ) < 0.002 ) {
                        newroot += roots[j];
                        n += 1;
                        visited[j] = true;
                    }
                }
                if ( n > 1 ) {
                    newroot /= n;
                }
                // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
                if ( IKabs ( imag ( newroot ) ) < tolsqrt ) {
                    rawroots[numroots++] = real ( newroot );
                }
            }
        }
    }
    inline void innerfn ( IkSolutionListBase<IkReal>& solutions ) {
        for ( int fniter = 0; fniter < 1; ++fniter ) {
            {
                IkReal j12eval[2];
                j12eval[0] = ( ( r20 * r20 ) + ( r21 * r21 ) );
                j12eval[1] = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r22 * r22 ) ) ) );
                if ( IKabs ( j12eval[0] ) < 0.0000010000000000  || IKabs ( j12eval[1] ) < 0.0000010000000000  )
                {
                    {
                        IkReal evalcond[1];
                        bool bgotonextstatement = true;
                        do
                        {
                            evalcond[0] = ( ( r20 * r20 ) + ( r21 * r21 ) );
                            if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                            {
                                bgotonextstatement = false;
                                {
                                    IkReal j11eval[2];
                                    IkReal x914 = ( ( -1.0 ) * pz );
                                    r20 = 0;
                                    r21 = 0;
                                    npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                    npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                    rxp0_0 = ( pz * r10 );
                                    rxp0_1 = ( r00 * x914 );
                                    rxp1_0 = ( pz * r11 );
                                    rxp1_1 = ( r01 * x914 );
                                    j11eval[0] = cj10;
                                    j11eval[1] = r22;
                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                    {
                                        {
                                            IkReal j11eval[2];
                                            IkReal x915 = ( ( -1.0 ) * pz );
                                            r20 = 0;
                                            r21 = 0;
                                            npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                            npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                            rxp0_0 = ( pz * r10 );
                                            rxp0_1 = ( r00 * x915 );
                                            rxp1_0 = ( pz * r11 );
                                            rxp1_1 = ( r01 * x915 );
                                            j11eval[0] = r22;
                                            j11eval[1] = sj10;
                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                            {
                                                continue; // 1 cases reached

                                            } else
                                            {
                                                {
                                                    IkReal j11array[2], cj11array[2], sj11array[2];
                                                    bool j11valid[2] = {false};
                                                    _nj11 = 2;
                                                    CheckValue<IkReal> x916 = IKPowWithIntegerCheck ( r22, -1 );
                                                    if ( !x916.valid ) {
                                                        continue;
                                                    }
                                                    CheckValue<IkReal> x917 = IKPowWithIntegerCheck ( sj10, -1 );
                                                    if ( !x917.valid ) {
                                                        continue;
                                                    }
                                                    sj11array[0] = ( ( x916.value ) * ( x917.value ) * ( ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) ) ) );
                                                    if ( sj11array[0] >= -1 - IKFAST_SINCOS_THRESH && sj11array[0] <= 1 + IKFAST_SINCOS_THRESH )
                                                    {
                                                        j11valid[0] = j11valid[1] = true;
                                                        j11array[0] = IKasin ( sj11array[0] );
                                                        cj11array[0] = IKcos ( j11array[0] );
                                                        sj11array[1] = sj11array[0];
                                                        j11array[1] = j11array[0] > 0 ? ( IKPI - j11array[0] ) : ( -IKPI - j11array[0] );
                                                        cj11array[1] = -cj11array[0];
                                                    }
                                                    else if ( isnan ( sj11array[0] ) )
                                                    {
                                                        // probably any value will work
                                                        j11valid[0] = true;
                                                        cj11array[0] = 1;
                                                        sj11array[0] = 0;
                                                        j11array[0] = 0;
                                                    }
                                                    for ( int ij11 = 0; ij11 < 2; ++ij11 )
                                                    {
                                                        if ( !j11valid[ij11] )
                                                        {
                                                            continue;
                                                        }
                                                        _ij11[0] = ij11;
                                                        _ij11[1] = -1;
                                                        for ( int iij11 = ij11 + 1; iij11 < 2; ++iij11 )
                                                        {
                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                            {
                                                                j11valid[iij11] = false;
                                                                _ij11[1] = iij11;
                                                                break;
                                                            }
                                                        }
                                                        j11 = j11array[ij11];
                                                        cj11 = cj11array[ij11];
                                                        sj11 = sj11array[ij11];
                                                        {
                                                            IkReal evalcond[2];
                                                            evalcond[0] = ( ( -1.0 ) * r22 * ( IKcos ( j11 ) ) );
                                                            evalcond[1] = ( ( ( cj8 * sj7 ) ) + ( ( cj7 * sj8 ) ) + ( ( cj10 * r22 * ( IKsin ( j11 ) ) ) ) );
                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                            {
                                                                continue;
                                                            }
                                                        }

                                                        {
                                                            IkReal j12eval[1];
                                                            IkReal x918 = ( ( -1.0 ) * pz );
                                                            r20 = 0;
                                                            r21 = 0;
                                                            npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                                            npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                                            rxp0_0 = ( pz * r10 );
                                                            rxp0_1 = ( r00 * x918 );
                                                            rxp1_0 = ( pz * r11 );
                                                            rxp1_1 = ( r01 * x918 );
                                                            IkReal x919 = ( r01 * sj11 );
                                                            IkReal x920 = ( sj7 * sj8 );
                                                            IkReal x921 = ( cj10 * cj11 );
                                                            IkReal x922 = ( ( 4.0 ) * r10 );
                                                            IkReal x923 = ( cj7 * cj8 );
                                                            IkReal x924 = ( ( 12.0 ) * r12 );
                                                            IkReal x925 = ( cj10 * sj11 );
                                                            IkReal x926 = ( ( 12.0 ) * r02 );
                                                            IkReal x927 = ( ( 4.0 ) * sj10 );
                                                            IkReal x928 = ( ( 8.0 ) * r11 );
                                                            IkReal x929 = ( ( 4.0 ) * r02 );
                                                            IkReal x930 = ( ( 16.0 ) * r11 );
                                                            IkReal x931 = ( ( 4.0 ) * r12 );
                                                            IkReal x932 = ( r00 * sj10 );
                                                            IkReal x933 = ( r10 * sj10 );
                                                            IkReal x934 = ( r11 * x927 );
                                                            IkReal x935 = ( r01 * x927 );
                                                            IkReal x936 = ( ( 4.0 ) * r00 * sj11 );
                                                            IkReal x937 = ( x921 * x922 );
                                                            IkReal x938 = ( ( 4.0 ) * r00 * x921 );
                                                            IkReal x939 = ( x925 * x926 );
                                                            IkReal x940 = ( x924 * x925 );
                                                            IkReal x941 = ( x920 * x936 );
                                                            IkReal x942 = ( x923 * x936 );
                                                            IkReal x943 = ( cj11 * x923 * x924 );
                                                            IkReal x944 = ( sj11 * x920 * x922 );
                                                            IkReal x945 = ( cj11 * x920 * x924 );
                                                            IkReal x946 = ( sj11 * x922 * x923 );
                                                            IkReal x947 = ( cj11 * x920 * x926 );
                                                            IkReal x948 = ( cj11 * x923 * x926 );
                                                            IkReal x949 = ( x935 + x944 );
                                                            IkReal x950 = ( x934 + x942 );
                                                            IkReal x951 = ( x937 + x941 );
                                                            IkReal x952 = ( x938 + x946 );
                                                            IkReal x953 = ( x939 + x945 );
                                                            IkReal x954 = ( x948 + x940 );
                                                            j12eval[0] = ( ( IKabs ( ( ( ( ( -8.0 ) * r01 * x921 ) ) + ( ( ( -8.0 ) * x932 ) ) + ( ( ( -1.0 ) * sj11 * x923 * x928 ) ) + ( ( sj11 * x920 * x928 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * x925 * x929 ) ) + ( ( ( -1.0 ) * cj11 * x920 * x931 ) ) + ( ( ( -1.0 ) * x952 ) ) + ( ( cj11 * x923 * x931 ) ) + x949 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -16.0 ) * x919 * x920 ) ) + ( ( ( -1.0 ) * x921 * x930 ) ) + ( ( ( -16.0 ) * x933 ) ) + ( ( ( 16.0 ) * x919 * x923 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * x954 ) ) + ( ( ( -1.0 ) * x950 ) ) + x951 + x947 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * x949 ) ) + ( ( ( -1.0 ) * x953 ) ) + x952 + x943 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * x954 ) ) + ( ( ( -1.0 ) * x951 ) ) + x950 + x947 ) ) ) ) ) + ( IKabs ( ( ( ( ( -8.0 ) * x933 ) ) + ( ( ( -8.0 ) * x919 * x920 ) ) + ( ( ( 8.0 ) * x919 * x923 ) ) + ( ( ( -1.0 ) * x921 * x928 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * x925 * x931 ) ) + ( ( ( -1.0 ) * cj11 * x923 * x929 ) ) + ( ( ( -1.0 ) * x951 ) ) + x950 + ( ( cj11 * x920 * x929 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * x953 ) ) + ( ( ( -1.0 ) * x952 ) ) + x949 + x943 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( sj11 * x920 * x930 ) ) + ( ( ( -1.0 ) * sj11 * x923 * x930 ) ) + ( ( ( -16.0 ) * r01 * x921 ) ) + ( ( ( -16.0 ) * x932 ) ) ) ) ) ) ) );
                                                            if ( IKabs ( j12eval[0] ) < 0.0000000010000000  )
                                                            {
                                                                continue; // 1 cases reached

                                                            } else
                                                            {
                                                                IkReal op[6 + 1], zeror[6];
                                                                int numroots;
                                                                IkReal j12evalpoly[1];
                                                                IkReal x955 = ( ( 16.0 ) * r01 );
                                                                IkReal x956 = ( ( 4.0 ) * r00 );
                                                                IkReal x957 = ( r10 * sj10 );
                                                                IkReal x958 = ( cj10 * cj11 );
                                                                IkReal x959 = ( cj7 * cj8 );
                                                                IkReal x960 = ( cj11 * r02 );
                                                                IkReal x961 = ( ( 8.0 ) * r01 );
                                                                IkReal x962 = ( sj7 * sj8 );
                                                                IkReal x963 = ( ( 4.0 ) * r11 * sj10 );
                                                                IkReal x964 = ( sj11 * x962 );
                                                                IkReal x965 = ( cj10 * r12 * sj11 );
                                                                IkReal x966 = ( ( 4.0 ) * r10 * x958 );
                                                                IkReal x967 = ( ( 12.0 ) * x965 );
                                                                IkReal x968 = ( ( 4.0 ) * x965 );
                                                                IkReal x969 = ( sj11 * x956 * x959 );
                                                                IkReal x970 = ( x956 * x964 );
                                                                IkReal x971 = ( ( 12.0 ) * x960 * x962 );
                                                                IkReal x972 = ( ( 12.0 ) * x959 * x960 );
                                                                IkReal x973 = ( ( 4.0 ) * x960 * x962 );
                                                                IkReal x974 = ( ( 4.0 ) * x959 * x960 );
                                                                IkReal x975 = ( x963 + x969 );
                                                                IkReal x976 = ( x970 + x966 );
                                                                IkReal x977 = ( x974 + x968 );
                                                                IkReal x978 = ( x972 + x967 );
                                                                IkReal x979 = ( ( ( ( -1.0 ) * x961 * x964 ) ) + ( ( ( -8.0 ) * x957 ) ) + ( ( sj11 * x959 * x961 ) ) + ( ( ( -8.0 ) * r11 * x958 ) ) );
                                                                op[0] = ( x973 + x975 + ( ( ( -1.0 ) * x976 ) ) + ( ( ( -1.0 ) * x977 ) ) );
                                                                op[1] = x979;
                                                                op[2] = ( x971 + x975 + ( ( ( -1.0 ) * x978 ) ) + ( ( ( -1.0 ) * x976 ) ) );
                                                                op[3] = ( ( ( ( -16.0 ) * r11 * x958 ) ) + ( ( ( -16.0 ) * x957 ) ) + ( ( ( -1.0 ) * x955 * x964 ) ) + ( ( sj11 * x955 * x959 ) ) );
                                                                op[4] = ( x971 + x976 + ( ( ( -1.0 ) * x975 ) ) + ( ( ( -1.0 ) * x978 ) ) );
                                                                op[5] = x979;
                                                                op[6] = ( x973 + x976 + ( ( ( -1.0 ) * x975 ) ) + ( ( ( -1.0 ) * x977 ) ) );
                                                                polyroots6 ( op, zeror, numroots );
                                                                IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
                                                                int numsolutions = 0;
                                                                for ( int ij12 = 0; ij12 < numroots; ++ij12 )
                                                                {
                                                                    IkReal htj12 = zeror[ij12];
                                                                    tempj12array[0] = ( ( 2.0 ) * ( atan ( htj12 ) ) );
                                                                    for ( int kj12 = 0; kj12 < 1; ++kj12 )
                                                                    {
                                                                        j12array[numsolutions] = tempj12array[kj12];
                                                                        if ( j12array[numsolutions] > IKPI )
                                                                        {
                                                                            j12array[numsolutions] -= IK2PI;
                                                                        }
                                                                        else if ( j12array[numsolutions] < -IKPI )
                                                                        {
                                                                            j12array[numsolutions] += IK2PI;
                                                                        }
                                                                        sj12array[numsolutions] = IKsin ( j12array[numsolutions] );
                                                                        cj12array[numsolutions] = IKcos ( j12array[numsolutions] );
                                                                        numsolutions++;
                                                                    }
                                                                }
                                                                bool j12valid[6] = {true, true, true, true, true, true};
                                                                _nj12 = 6;
                                                                for ( int ij12 = 0; ij12 < numsolutions; ++ij12 )
                                                                {
                                                                    if ( !j12valid[ij12] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    j12 = j12array[ij12];
                                                                    cj12 = cj12array[ij12];
                                                                    sj12 = sj12array[ij12];
                                                                    htj12 = IKtan ( j12 / 2 );

                                                                    IkReal x980 = ( sj7 * sj8 );
                                                                    IkReal x981 = ( cj10 * cj11 );
                                                                    IkReal x982 = ( cj7 * cj8 );
                                                                    IkReal x983 = ( r11 * sj11 );
                                                                    IkReal x984 = ( r00 * sj10 );
                                                                    IkReal x985 = ( ( 4.0 ) * r01 * sj10 );
                                                                    IkReal x986 = ( ( 12.0 ) * cj11 * r12 );
                                                                    IkReal x987 = ( cj10 * r02 * sj11 );
                                                                    IkReal x988 = ( ( 4.0 ) * r10 * sj11 );
                                                                    IkReal x989 = ( ( 4.0 ) * cj11 * r12 );
                                                                    IkReal x990 = ( ( 4.0 ) * r00 * x981 );
                                                                    IkReal x991 = ( ( 12.0 ) * x987 );
                                                                    IkReal x992 = ( ( 4.0 ) * x987 );
                                                                    IkReal x993 = ( x980 * x988 );
                                                                    IkReal x994 = ( x982 * x988 );
                                                                    IkReal x995 = ( x982 * x989 );
                                                                    IkReal x996 = ( x982 * x986 );
                                                                    IkReal x997 = ( x980 * x986 );
                                                                    IkReal x998 = ( x980 * x989 );
                                                                    IkReal x999 = ( x993 + x985 );
                                                                    IkReal x1000 = ( x990 + x994 );
                                                                    IkReal x1001 = ( x991 + x997 );
                                                                    IkReal x1002 = ( x992 + x998 );
                                                                    IkReal x1003 = ( ( ( ( -8.0 ) * x984 ) ) + ( ( ( -8.0 ) * x982 * x983 ) ) + ( ( ( 8.0 ) * x980 * x983 ) ) + ( ( ( -8.0 ) * r01 * x981 ) ) );
                                                                    j12evalpoly[0] = ( ( ( ( htj12 * htj12 * htj12 ) * ( ( ( ( ( -16.0 ) * r01 * x981 ) ) + ( ( ( -16.0 ) * x982 * x983 ) ) + ( ( ( -16.0 ) * x984 ) ) + ( ( ( 16.0 ) * x980 * x983 ) ) ) ) ) ) + x1000 + ( ( ( -1.0 ) * x1002 ) ) + ( ( htj12 * x1003 ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( -1.0 ) * x1002 ) ) + ( ( ( -1.0 ) * x1000 ) ) + x995 + x999 ) ) ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( -1.0 ) * x1001 ) ) + ( ( ( -1.0 ) * x1000 ) ) + x996 + x999 ) ) ) ) + ( ( ( -1.0 ) * x999 ) ) + ( ( ( htj12 * htj12 ) * ( ( x1000 + ( ( ( -1.0 ) * x1001 ) ) + ( ( ( -1.0 ) * x999 ) ) + x996 ) ) ) ) + ( ( x1003 * ( htj12 * htj12 * htj12 * htj12 * htj12 ) ) ) + x995 );
                                                                    if ( IKabs ( j12evalpoly[0] ) > 0.0000000010000000  )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij12[0] = ij12;
                                                                    _ij12[1] = -1;
                                                                    for ( int iij12 = ij12 + 1; iij12 < numsolutions; ++iij12 )
                                                                    {
                                                                        if ( j12valid[iij12] && IKabs ( cj12array[ij12] - cj12array[iij12] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj12array[ij12] - sj12array[iij12] ) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j12valid[iij12] = false;
                                                                            _ij12[1] = iij12;
                                                                            break;
                                                                        }
                                                                    }
                                                                    {
                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                        bool j9valid[1] = {false};
                                                                        _nj9 = 1;
                                                                        IkReal x1004 = ( sj11 * sj12 );
                                                                        IkReal x1005 = ( cj12 * sj11 );
                                                                        if ( IKabs ( ( ( ( r01 * x1004 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( ( -1.0 ) *r00 * x1005 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1004 ) ) + ( ( r10 * x1005 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( r01 * x1004 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( ( -1.0 ) *r00 * x1005 ) ) ) ) + IKsqr ( ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1004 ) ) + ( ( r10 * x1005 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                            continue;
                                                                        j9array[0] = IKatan2 ( ( ( ( r01 * x1004 ) ) + ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( ( -1.0 ) * r00 * x1005 ) ) ), ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) * r11 * x1004 ) ) + ( ( r10 * x1005 ) ) ) );
                                                                        sj9array[0] = IKsin ( j9array[0] );
                                                                        cj9array[0] = IKcos ( j9array[0] );
                                                                        if ( j9array[0] > IKPI )
                                                                        {
                                                                            j9array[0] -= IK2PI;
                                                                        }
                                                                        else if ( j9array[0] < -IKPI )
                                                                        {   j9array[0] += IK2PI;
                                                                        }
                                                                        j9valid[0] = true;
                                                                        for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                        {
                                                                            if ( !j9valid[ij9] )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij9[0] = ij9;
                                                                            _ij9[1] = -1;
                                                                            for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                            {
                                                                                if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                {
                                                                                    j9valid[iij9] = false;
                                                                                    _ij9[1] = iij9;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j9 = j9array[ij9];
                                                                            cj9 = cj9array[ij9];
                                                                            sj9 = sj9array[ij9];
                                                                            {
                                                                                IkReal evalcond[8];
                                                                                IkReal x1006 = IKcos ( j9 );
                                                                                IkReal x1007 = IKsin ( j9 );
                                                                                IkReal x1008 = ( cj10 * r11 );
                                                                                IkReal x1009 = ( cj11 * sj12 );
                                                                                IkReal x1010 = ( sj11 * sj12 );
                                                                                IkReal x1011 = ( cj10 * r00 );
                                                                                IkReal x1012 = ( ( 1.0 ) * sj11 );
                                                                                IkReal x1013 = ( cj12 * r00 );
                                                                                IkReal x1014 = ( r10 * sj12 );
                                                                                IkReal x1015 = ( ( 1.0 ) * cj11 );
                                                                                IkReal x1016 = ( cj12 * r10 );
                                                                                IkReal x1017 = ( ( 0.5723 ) * sj7 );
                                                                                IkReal x1018 = ( r11 * sj10 );
                                                                                IkReal x1019 = ( cj12 * r01 );
                                                                                IkReal x1020 = ( ( 0.612 ) * cj8 );
                                                                                IkReal x1021 = ( cj11 * sj10 );
                                                                                IkReal x1022 = ( ( 1.0 ) * cj7 );
                                                                                IkReal x1023 = ( cj10 * sj11 );
                                                                                IkReal x1024 = ( r00 * sj12 );
                                                                                IkReal x1025 = ( ( 1.0 ) * cj8 * sj7 );
                                                                                IkReal x1026 = ( sj8 * x1006 );
                                                                                IkReal x1027 = ( ( 0.5723 ) * cj7 * cj8 );
                                                                                IkReal x1028 = ( sj8 * x1007 );
                                                                                IkReal x1029 = ( x1007 * x1022 );
                                                                                evalcond[0] = ( ( ( ( -1.0 ) * x1012 * x1016 ) ) + x1006 + ( ( ( -1.0 ) * r12 * x1015 ) ) + ( ( r11 * x1010 ) ) );
                                                                                evalcond[1] = ( ( ( ( -1.0 ) * x1012 * x1013 ) ) + ( ( ( -1.0 ) * x1007 ) ) + ( ( ( -1.0 ) * r02 * x1015 ) ) + ( ( r01 * x1010 ) ) );
                                                                                evalcond[2] = ( ( ( ( -0.163941 ) * x1007 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -0.1157 ) * x1024 ) ) + ( ( ( -0.1157 ) * x1019 ) ) + ( ( x1006 * x1027 ) ) + ( ( x1006 * x1020 ) ) + ( ( ( -1.0 ) * x1017 * x1026 ) ) );
                                                                                evalcond[3] = ( ( ( ( -0.1157 ) * cj12 * r11 ) ) + ( ( ( 0.163941 ) * x1006 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -0.1157 ) * x1014 ) ) + ( ( x1007 * x1027 ) ) + ( ( x1007 * x1020 ) ) + ( ( ( -1.0 ) * x1017 * x1028 ) ) );
                                                                                evalcond[4] = ( ( ( cj10 * r01 * x1009 ) ) + ( ( ( -1.0 ) * cj8 * x1006 * x1022 ) ) + ( ( ( -1.0 ) * cj12 * x1011 * x1015 ) ) + ( ( r02 * x1023 ) ) + ( ( sj7 * x1026 ) ) + ( ( sj10 * x1019 ) ) + ( ( sj10 * x1024 ) ) );
                                                                                evalcond[5] = ( ( ( x1008 * x1009 ) ) + ( ( cj12 * x1018 ) ) + ( ( r12 * x1023 ) ) + ( ( ( -1.0 ) * cj10 * x1015 * x1016 ) ) + ( ( ( -1.0 ) * cj8 * x1029 ) ) + ( ( sj7 * x1028 ) ) + ( ( sj10 * x1014 ) ) );
                                                                                evalcond[6] = ( ( ( cj10 * x1019 ) ) + ( ( ( -1.0 ) * x1022 * x1026 ) ) + ( ( ( -1.0 ) * r01 * sj10 * x1009 ) ) + ( ( x1013 * x1021 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x1012 ) ) + ( ( sj12 * x1011 ) ) + ( ( ( -1.0 ) * x1006 * x1025 ) ) );
                                                                                evalcond[7] = ( ( ( cj12 * x1008 ) ) + ( ( cj10 * x1014 ) ) + ( ( ( -1.0 ) * x1022 * x1028 ) ) + ( ( ( -1.0 ) * x1009 * x1018 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x1012 ) ) + ( ( ( -1.0 ) * x1007 * x1025 ) ) + ( ( x1016 * x1021 ) ) );
                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j9;
                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j8;
                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j7;
                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j10;
                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j11;
                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j12;
                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                std::vector<int> vfree ( 0 );
                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                            }
                                                                        }
                                                                    }
                                                                }

                                                            }

                                                        }
                                                    }
                                                }

                                            }

                                        }

                                    } else
                                    {
                                        {
                                            IkReal j11array[2], cj11array[2], sj11array[2];
                                            bool j11valid[2] = {false};
                                            _nj11 = 2;
                                            CheckValue<IkReal> x1030 = IKPowWithIntegerCheck ( cj10, -1 );
                                            if ( !x1030.valid ) {
                                                continue;
                                            }
                                            CheckValue<IkReal> x1031 = IKPowWithIntegerCheck ( r22, -1 );
                                            if ( !x1031.valid ) {
                                                continue;
                                            }
                                            sj11array[0] = ( ( -1.0 ) * ( x1030.value ) * ( x1031.value ) * ( ( ( ( cj8 * sj7 ) ) + ( ( cj7 * sj8 ) ) ) ) );
                                            if ( sj11array[0] >= -1 - IKFAST_SINCOS_THRESH && sj11array[0] <= 1 + IKFAST_SINCOS_THRESH )
                                            {
                                                j11valid[0] = j11valid[1] = true;
                                                j11array[0] = IKasin ( sj11array[0] );
                                                cj11array[0] = IKcos ( j11array[0] );
                                                sj11array[1] = sj11array[0];
                                                j11array[1] = j11array[0] > 0 ? ( IKPI - j11array[0] ) : ( -IKPI - j11array[0] );
                                                cj11array[1] = -cj11array[0];
                                            }
                                            else if ( isnan ( sj11array[0] ) )
                                            {
                                                // probably any value will work
                                                j11valid[0] = true;
                                                cj11array[0] = 1;
                                                sj11array[0] = 0;
                                                j11array[0] = 0;
                                            }
                                            for ( int ij11 = 0; ij11 < 2; ++ij11 )
                                            {
                                                if ( !j11valid[ij11] )
                                                {
                                                    continue;
                                                }
                                                _ij11[0] = ij11;
                                                _ij11[1] = -1;
                                                for ( int iij11 = ij11 + 1; iij11 < 2; ++iij11 )
                                                {
                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                    {
                                                        j11valid[iij11] = false;
                                                        _ij11[1] = iij11;
                                                        break;
                                                    }
                                                }
                                                j11 = j11array[ij11];
                                                cj11 = cj11array[ij11];
                                                sj11 = sj11array[ij11];
                                                {
                                                    IkReal evalcond[2];
                                                    evalcond[0] = ( ( -1.0 ) * r22 * ( IKcos ( j11 ) ) );
                                                    evalcond[1] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) + ( ( ( -1.0 ) * r22 * sj10 * ( IKsin ( j11 ) ) ) ) );
                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                    {
                                                        continue;
                                                    }
                                                }

                                                {
                                                    IkReal j12eval[1];
                                                    IkReal x1032 = ( ( -1.0 ) * pz );
                                                    r20 = 0;
                                                    r21 = 0;
                                                    npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                                    npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                                    rxp0_0 = ( pz * r10 );
                                                    rxp0_1 = ( r00 * x1032 );
                                                    rxp1_0 = ( pz * r11 );
                                                    rxp1_1 = ( r01 * x1032 );
                                                    IkReal x1033 = ( r01 * sj11 );
                                                    IkReal x1034 = ( sj7 * sj8 );
                                                    IkReal x1035 = ( cj10 * cj11 );
                                                    IkReal x1036 = ( ( 4.0 ) * r10 );
                                                    IkReal x1037 = ( cj7 * cj8 );
                                                    IkReal x1038 = ( ( 12.0 ) * r12 );
                                                    IkReal x1039 = ( cj10 * sj11 );
                                                    IkReal x1040 = ( ( 12.0 ) * r02 );
                                                    IkReal x1041 = ( ( 4.0 ) * sj10 );
                                                    IkReal x1042 = ( ( 8.0 ) * r11 );
                                                    IkReal x1043 = ( ( 4.0 ) * r02 );
                                                    IkReal x1044 = ( ( 16.0 ) * r11 );
                                                    IkReal x1045 = ( ( 4.0 ) * r12 );
                                                    IkReal x1046 = ( r00 * sj10 );
                                                    IkReal x1047 = ( r10 * sj10 );
                                                    IkReal x1048 = ( r11 * x1041 );
                                                    IkReal x1049 = ( r01 * x1041 );
                                                    IkReal x1050 = ( ( 4.0 ) * r00 * sj11 );
                                                    IkReal x1051 = ( x1035 * x1036 );
                                                    IkReal x1052 = ( ( 4.0 ) * r00 * x1035 );
                                                    IkReal x1053 = ( x1039 * x1040 );
                                                    IkReal x1054 = ( x1038 * x1039 );
                                                    IkReal x1055 = ( x1034 * x1050 );
                                                    IkReal x1056 = ( x1037 * x1050 );
                                                    IkReal x1057 = ( cj11 * x1037 * x1038 );
                                                    IkReal x1058 = ( sj11 * x1034 * x1036 );
                                                    IkReal x1059 = ( cj11 * x1034 * x1038 );
                                                    IkReal x1060 = ( sj11 * x1036 * x1037 );
                                                    IkReal x1061 = ( cj11 * x1034 * x1040 );
                                                    IkReal x1062 = ( cj11 * x1037 * x1040 );
                                                    IkReal x1063 = ( x1058 + x1049 );
                                                    IkReal x1064 = ( x1056 + x1048 );
                                                    IkReal x1065 = ( x1051 + x1055 );
                                                    IkReal x1066 = ( x1052 + x1060 );
                                                    IkReal x1067 = ( x1053 + x1059 );
                                                    IkReal x1068 = ( x1054 + x1062 );
                                                    j12eval[0] = ( ( ( ( 0.5 ) * ( IKabs ( ( x1057 + x1063 + ( ( ( -1.0 ) * x1066 ) ) + ( ( ( -1.0 ) * x1067 ) ) ) ) ) ) ) + ( IKabs ( ( ( ( ( -8.0 ) * x1047 ) ) + ( ( ( -1.0 ) * x1035 * x1042 ) ) + ( ( ( -8.0 ) * x1033 * x1034 ) ) + ( ( ( 8.0 ) * x1033 * x1037 ) ) ) ) ) + ( IKabs ( ( ( ( ( -8.0 ) * x1046 ) ) + ( ( ( -8.0 ) * r01 * x1035 ) ) + ( ( ( -1.0 ) * sj11 * x1037 * x1042 ) ) + ( ( sj11 * x1034 * x1042 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 16.0 ) * x1033 * x1037 ) ) + ( ( ( -16.0 ) * x1033 * x1034 ) ) + ( ( ( -1.0 ) * x1035 * x1044 ) ) + ( ( ( -16.0 ) * x1047 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( x1057 + x1066 + ( ( ( -1.0 ) * x1067 ) ) + ( ( ( -1.0 ) * x1063 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( x1061 + x1064 + ( ( ( -1.0 ) * x1068 ) ) + ( ( ( -1.0 ) * x1065 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( x1061 + x1065 + ( ( ( -1.0 ) * x1068 ) ) + ( ( ( -1.0 ) * x1064 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( x1063 + ( ( ( -1.0 ) * cj11 * x1034 * x1045 ) ) + ( ( ( -1.0 ) * x1039 * x1043 ) ) + ( ( cj11 * x1037 * x1045 ) ) + ( ( ( -1.0 ) * x1066 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * sj11 * x1037 * x1044 ) ) + ( ( sj11 * x1034 * x1044 ) ) + ( ( ( -16.0 ) * x1046 ) ) + ( ( ( -16.0 ) * r01 * x1035 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( -1.0 ) * cj11 * x1037 * x1043 ) ) + x1064 + ( ( ( -1.0 ) * x1039 * x1045 ) ) + ( ( ( -1.0 ) * x1065 ) ) + ( ( cj11 * x1034 * x1043 ) ) ) ) ) ) ) );
                                                    if ( IKabs ( j12eval[0] ) < 0.0000000010000000  )
                                                    {
                                                        continue; // 1 cases reached

                                                    } else
                                                    {
                                                        IkReal op[6 + 1], zeror[6];
                                                        int numroots;
                                                        IkReal j12evalpoly[1];
                                                        IkReal x1069 = ( ( 16.0 ) * r01 );
                                                        IkReal x1070 = ( ( 4.0 ) * r00 );
                                                        IkReal x1071 = ( r10 * sj10 );
                                                        IkReal x1072 = ( cj10 * cj11 );
                                                        IkReal x1073 = ( cj7 * cj8 );
                                                        IkReal x1074 = ( cj11 * r02 );
                                                        IkReal x1075 = ( ( 8.0 ) * r01 );
                                                        IkReal x1076 = ( sj7 * sj8 );
                                                        IkReal x1077 = ( ( 4.0 ) * r11 * sj10 );
                                                        IkReal x1078 = ( sj11 * x1076 );
                                                        IkReal x1079 = ( cj10 * r12 * sj11 );
                                                        IkReal x1080 = ( ( 4.0 ) * r10 * x1072 );
                                                        IkReal x1081 = ( ( 12.0 ) * x1079 );
                                                        IkReal x1082 = ( ( 4.0 ) * x1079 );
                                                        IkReal x1083 = ( sj11 * x1070 * x1073 );
                                                        IkReal x1084 = ( x1070 * x1078 );
                                                        IkReal x1085 = ( ( 12.0 ) * x1074 * x1076 );
                                                        IkReal x1086 = ( ( 12.0 ) * x1073 * x1074 );
                                                        IkReal x1087 = ( ( 4.0 ) * x1074 * x1076 );
                                                        IkReal x1088 = ( ( 4.0 ) * x1073 * x1074 );
                                                        IkReal x1089 = ( x1077 + x1083 );
                                                        IkReal x1090 = ( x1084 + x1080 );
                                                        IkReal x1091 = ( x1082 + x1088 );
                                                        IkReal x1092 = ( x1086 + x1081 );
                                                        IkReal x1093 = ( ( ( ( -1.0 ) * x1075 * x1078 ) ) + ( ( ( -8.0 ) * x1071 ) ) + ( ( sj11 * x1073 * x1075 ) ) + ( ( ( -8.0 ) * r11 * x1072 ) ) );
                                                        op[0] = ( x1087 + x1089 + ( ( ( -1.0 ) * x1091 ) ) + ( ( ( -1.0 ) * x1090 ) ) );
                                                        op[1] = x1093;
                                                        op[2] = ( x1085 + x1089 + ( ( ( -1.0 ) * x1090 ) ) + ( ( ( -1.0 ) * x1092 ) ) );
                                                        op[3] = ( ( ( sj11 * x1069 * x1073 ) ) + ( ( ( -16.0 ) * r11 * x1072 ) ) + ( ( ( -16.0 ) * x1071 ) ) + ( ( ( -1.0 ) * x1069 * x1078 ) ) );
                                                        op[4] = ( x1090 + x1085 + ( ( ( -1.0 ) * x1092 ) ) + ( ( ( -1.0 ) * x1089 ) ) );
                                                        op[5] = x1093;
                                                        op[6] = ( x1090 + x1087 + ( ( ( -1.0 ) * x1091 ) ) + ( ( ( -1.0 ) * x1089 ) ) );
                                                        polyroots6 ( op, zeror, numroots );
                                                        IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
                                                        int numsolutions = 0;
                                                        for ( int ij12 = 0; ij12 < numroots; ++ij12 )
                                                        {
                                                            IkReal htj12 = zeror[ij12];
                                                            tempj12array[0] = ( ( 2.0 ) * ( atan ( htj12 ) ) );
                                                            for ( int kj12 = 0; kj12 < 1; ++kj12 )
                                                            {
                                                                j12array[numsolutions] = tempj12array[kj12];
                                                                if ( j12array[numsolutions] > IKPI )
                                                                {
                                                                    j12array[numsolutions] -= IK2PI;
                                                                }
                                                                else if ( j12array[numsolutions] < -IKPI )
                                                                {
                                                                    j12array[numsolutions] += IK2PI;
                                                                }
                                                                sj12array[numsolutions] = IKsin ( j12array[numsolutions] );
                                                                cj12array[numsolutions] = IKcos ( j12array[numsolutions] );
                                                                numsolutions++;
                                                            }
                                                        }
                                                        bool j12valid[6] = {true, true, true, true, true, true};
                                                        _nj12 = 6;
                                                        for ( int ij12 = 0; ij12 < numsolutions; ++ij12 )
                                                        {
                                                            if ( !j12valid[ij12] )
                                                            {
                                                                continue;
                                                            }
                                                            j12 = j12array[ij12];
                                                            cj12 = cj12array[ij12];
                                                            sj12 = sj12array[ij12];
                                                            htj12 = IKtan ( j12 / 2 );

                                                            IkReal x1094 = ( sj7 * sj8 );
                                                            IkReal x1095 = ( cj10 * cj11 );
                                                            IkReal x1096 = ( cj7 * cj8 );
                                                            IkReal x1097 = ( r11 * sj11 );
                                                            IkReal x1098 = ( r00 * sj10 );
                                                            IkReal x1099 = ( ( 4.0 ) * r01 * sj10 );
                                                            IkReal x1100 = ( ( 12.0 ) * cj11 * r12 );
                                                            IkReal x1101 = ( cj10 * r02 * sj11 );
                                                            IkReal x1102 = ( ( 4.0 ) * r10 * sj11 );
                                                            IkReal x1103 = ( ( 4.0 ) * cj11 * r12 );
                                                            IkReal x1104 = ( ( 4.0 ) * r00 * x1095 );
                                                            IkReal x1105 = ( ( 12.0 ) * x1101 );
                                                            IkReal x1106 = ( ( 4.0 ) * x1101 );
                                                            IkReal x1107 = ( x1094 * x1102 );
                                                            IkReal x1108 = ( x1096 * x1102 );
                                                            IkReal x1109 = ( x1096 * x1103 );
                                                            IkReal x1110 = ( x1096 * x1100 );
                                                            IkReal x1111 = ( x1094 * x1100 );
                                                            IkReal x1112 = ( x1094 * x1103 );
                                                            IkReal x1113 = ( x1107 + x1099 );
                                                            IkReal x1114 = ( x1104 + x1108 );
                                                            IkReal x1115 = ( x1105 + x1111 );
                                                            IkReal x1116 = ( x1106 + x1112 );
                                                            IkReal x1117 = ( ( ( ( -8.0 ) * r01 * x1095 ) ) + ( ( ( -8.0 ) * x1096 * x1097 ) ) + ( ( ( 8.0 ) * x1094 * x1097 ) ) + ( ( ( -8.0 ) * x1098 ) ) );
                                                            j12evalpoly[0] = ( x1109 + x1114 + ( ( ( htj12 * htj12 * htj12 * htj12 ) * ( ( x1110 + x1113 + ( ( ( -1.0 ) * x1114 ) ) + ( ( ( -1.0 ) * x1115 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 * htj12 * htj12 ) * ( ( x1109 + x1113 + ( ( ( -1.0 ) * x1116 ) ) + ( ( ( -1.0 ) * x1114 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 ) * ( ( ( ( ( -16.0 ) * x1096 * x1097 ) ) + ( ( ( 16.0 ) * x1094 * x1097 ) ) + ( ( ( -16.0 ) * x1098 ) ) + ( ( ( -16.0 ) * r01 * x1095 ) ) ) ) ) ) + ( ( x1117 * ( htj12 * htj12 * htj12 * htj12 * htj12 ) ) ) + ( ( ( -1.0 ) * x1116 ) ) + ( ( ( -1.0 ) * x1113 ) ) + ( ( ( htj12 * htj12 ) * ( ( x1110 + x1114 + ( ( ( -1.0 ) * x1115 ) ) + ( ( ( -1.0 ) * x1113 ) ) ) ) ) ) + ( ( htj12 * x1117 ) ) );
                                                            if ( IKabs ( j12evalpoly[0] ) > 0.0000000010000000  )
                                                            {
                                                                continue;
                                                            }
                                                            _ij12[0] = ij12;
                                                            _ij12[1] = -1;
                                                            for ( int iij12 = ij12 + 1; iij12 < numsolutions; ++iij12 )
                                                            {
                                                                if ( j12valid[iij12] && IKabs ( cj12array[ij12] - cj12array[iij12] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj12array[ij12] - sj12array[iij12] ) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j12valid[iij12] = false;
                                                                    _ij12[1] = iij12;
                                                                    break;
                                                                }
                                                            }
                                                            {
                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                bool j9valid[1] = {false};
                                                                _nj9 = 1;
                                                                IkReal x1118 = ( sj11 * sj12 );
                                                                IkReal x1119 = ( cj12 * sj11 );
                                                                if ( IKabs ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x1118 ) ) + ( ( ( -1.0 ) *r00 * x1119 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1118 ) ) + ( ( r10 * x1119 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x1118 ) ) + ( ( ( -1.0 ) *r00 * x1119 ) ) ) ) + IKsqr ( ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1118 ) ) + ( ( r10 * x1119 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                    continue;
                                                                j9array[0] = IKatan2 ( ( ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( r01 * x1118 ) ) + ( ( ( -1.0 ) * r00 * x1119 ) ) ), ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) * r11 * x1118 ) ) + ( ( r10 * x1119 ) ) ) );
                                                                sj9array[0] = IKsin ( j9array[0] );
                                                                cj9array[0] = IKcos ( j9array[0] );
                                                                if ( j9array[0] > IKPI )
                                                                {
                                                                    j9array[0] -= IK2PI;
                                                                }
                                                                else if ( j9array[0] < -IKPI )
                                                                {   j9array[0] += IK2PI;
                                                                }
                                                                j9valid[0] = true;
                                                                for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                {
                                                                    if ( !j9valid[ij9] )
                                                                    {
                                                                        continue;
                                                                    }
                                                                    _ij9[0] = ij9;
                                                                    _ij9[1] = -1;
                                                                    for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                    {
                                                                        if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                        {
                                                                            j9valid[iij9] = false;
                                                                            _ij9[1] = iij9;
                                                                            break;
                                                                        }
                                                                    }
                                                                    j9 = j9array[ij9];
                                                                    cj9 = cj9array[ij9];
                                                                    sj9 = sj9array[ij9];
                                                                    {
                                                                        IkReal evalcond[8];
                                                                        IkReal x1120 = IKcos ( j9 );
                                                                        IkReal x1121 = IKsin ( j9 );
                                                                        IkReal x1122 = ( cj10 * r11 );
                                                                        IkReal x1123 = ( cj11 * sj12 );
                                                                        IkReal x1124 = ( sj11 * sj12 );
                                                                        IkReal x1125 = ( cj10 * r00 );
                                                                        IkReal x1126 = ( ( 1.0 ) * sj11 );
                                                                        IkReal x1127 = ( cj12 * r00 );
                                                                        IkReal x1128 = ( r10 * sj12 );
                                                                        IkReal x1129 = ( ( 1.0 ) * cj11 );
                                                                        IkReal x1130 = ( cj12 * r10 );
                                                                        IkReal x1131 = ( ( 0.5723 ) * sj7 );
                                                                        IkReal x1132 = ( r11 * sj10 );
                                                                        IkReal x1133 = ( cj12 * r01 );
                                                                        IkReal x1134 = ( ( 0.612 ) * cj8 );
                                                                        IkReal x1135 = ( cj11 * sj10 );
                                                                        IkReal x1136 = ( ( 1.0 ) * cj7 );
                                                                        IkReal x1137 = ( cj10 * sj11 );
                                                                        IkReal x1138 = ( r00 * sj12 );
                                                                        IkReal x1139 = ( ( 1.0 ) * cj8 * sj7 );
                                                                        IkReal x1140 = ( sj8 * x1120 );
                                                                        IkReal x1141 = ( ( 0.5723 ) * cj7 * cj8 );
                                                                        IkReal x1142 = ( sj8 * x1121 );
                                                                        IkReal x1143 = ( x1121 * x1136 );
                                                                        evalcond[0] = ( x1120 + ( ( ( -1.0 ) * r12 * x1129 ) ) + ( ( ( -1.0 ) * x1126 * x1130 ) ) + ( ( r11 * x1124 ) ) );
                                                                        evalcond[1] = ( ( ( r01 * x1124 ) ) + ( ( ( -1.0 ) * x1126 * x1127 ) ) + ( ( ( -1.0 ) * x1121 ) ) + ( ( ( -1.0 ) * r02 * x1129 ) ) );
                                                                        evalcond[2] = ( ( ( x1120 * x1134 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * x1131 * x1140 ) ) + ( ( ( -0.163941 ) * x1121 ) ) + ( ( ( -0.1157 ) * x1133 ) ) + ( ( ( -0.1157 ) * x1138 ) ) + ( ( x1120 * x1141 ) ) );
                                                                        evalcond[3] = ( ( ( x1121 * x1134 ) ) + ( ( ( -0.1157 ) * cj12 * r11 ) ) + ( ( x1121 * x1141 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -1.0 ) * x1131 * x1142 ) ) + ( ( ( 0.163941 ) * x1120 ) ) + ( ( ( -0.1157 ) * x1128 ) ) );
                                                                        evalcond[4] = ( ( ( cj10 * r01 * x1123 ) ) + ( ( sj7 * x1140 ) ) + ( ( ( -1.0 ) * cj12 * x1125 * x1129 ) ) + ( ( ( -1.0 ) * cj8 * x1120 * x1136 ) ) + ( ( r02 * x1137 ) ) + ( ( sj10 * x1138 ) ) + ( ( sj10 * x1133 ) ) );
                                                                        evalcond[5] = ( ( ( ( -1.0 ) * cj10 * x1129 * x1130 ) ) + ( ( sj7 * x1142 ) ) + ( ( ( -1.0 ) * cj8 * x1143 ) ) + ( ( r12 * x1137 ) ) + ( ( x1122 * x1123 ) ) + ( ( sj10 * x1128 ) ) + ( ( cj12 * x1132 ) ) );
                                                                        evalcond[6] = ( ( ( sj12 * x1125 ) ) + ( ( ( -1.0 ) * x1136 * x1140 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x1126 ) ) + ( ( ( -1.0 ) * r01 * sj10 * x1123 ) ) + ( ( cj10 * x1133 ) ) + ( ( ( -1.0 ) * x1120 * x1139 ) ) + ( ( x1127 * x1135 ) ) );
                                                                        evalcond[7] = ( ( ( ( -1.0 ) * x1136 * x1142 ) ) + ( ( x1130 * x1135 ) ) + ( ( ( -1.0 ) * x1121 * x1139 ) ) + ( ( ( -1.0 ) * x1123 * x1132 ) ) + ( ( cj10 * x1128 ) ) + ( ( cj12 * x1122 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x1126 ) ) );
                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                    }

                                                                    {
                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                        vinfos[0].jointtype = 1;
                                                                        vinfos[0].foffset = j9;
                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                        vinfos[0].maxsolutions = _nj9;
                                                                        vinfos[1].jointtype = 1;
                                                                        vinfos[1].foffset = j8;
                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                        vinfos[1].maxsolutions = _nj8;
                                                                        vinfos[2].jointtype = 1;
                                                                        vinfos[2].foffset = j7;
                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                        vinfos[2].maxsolutions = _nj7;
                                                                        vinfos[3].jointtype = 1;
                                                                        vinfos[3].foffset = j10;
                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                        vinfos[3].maxsolutions = _nj10;
                                                                        vinfos[4].jointtype = 1;
                                                                        vinfos[4].foffset = j11;
                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                        vinfos[4].maxsolutions = _nj11;
                                                                        vinfos[5].jointtype = 1;
                                                                        vinfos[5].foffset = j12;
                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                        vinfos[5].maxsolutions = _nj12;
                                                                        std::vector<int> vfree ( 0 );
                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                    }
                                                                }
                                                            }
                                                        }

                                                    }

                                                }
                                            }
                                        }

                                    }

                                }

                            }
                        } while ( 0 );
                        if ( bgotonextstatement )
                        {
                            bool bgotonextstatement = true;
                            do
                            {
                                evalcond[0] = ( ( IKabs ( r21 ) ) + ( IKabs ( r20 ) ) );
                                if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                {
                                    bgotonextstatement = false;
                                    {
                                        IkReal j11eval[2];
                                        IkReal x1144 = ( ( -1.0 ) * pz );
                                        r20 = 0;
                                        r21 = 0;
                                        r02 = 0;
                                        r12 = 0;
                                        npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                        npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                        npz = ( pz * r22 );
                                        rxp0_0 = ( pz * r10 );
                                        rxp0_1 = ( r00 * x1144 );
                                        rxp1_0 = ( pz * r11 );
                                        rxp1_1 = ( r01 * x1144 );
                                        rxp2_0 = ( ( -1.0 ) * py * r22 );
                                        rxp2_1 = ( px * r22 );
                                        rxp2_2 = 0;
                                        j11eval[0] = cj10;
                                        j11eval[1] = r22;
                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j11eval[2];
                                                IkReal x1145 = ( ( -1.0 ) * pz );
                                                r20 = 0;
                                                r21 = 0;
                                                r02 = 0;
                                                r12 = 0;
                                                npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                                npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                                npz = ( pz * r22 );
                                                rxp0_0 = ( pz * r10 );
                                                rxp0_1 = ( r00 * x1145 );
                                                rxp1_0 = ( pz * r11 );
                                                rxp1_1 = ( r01 * x1145 );
                                                rxp2_0 = ( ( -1.0 ) * py * r22 );
                                                rxp2_1 = ( px * r22 );
                                                rxp2_2 = 0;
                                                j11eval[0] = r22;
                                                j11eval[1] = sj10;
                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                {
                                                    continue; // 1 cases reached

                                                } else
                                                {
                                                    {
                                                        IkReal j11array[2], cj11array[2], sj11array[2];
                                                        bool j11valid[2] = {false};
                                                        _nj11 = 2;
                                                        CheckValue<IkReal> x1146 = IKPowWithIntegerCheck ( r22, -1 );
                                                        if ( !x1146.valid ) {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x1147 = IKPowWithIntegerCheck ( sj10, -1 );
                                                        if ( !x1147.valid ) {
                                                            continue;
                                                        }
                                                        sj11array[0] = ( ( x1146.value ) * ( x1147.value ) * ( ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) ) ) );
                                                        if ( sj11array[0] >= -1 - IKFAST_SINCOS_THRESH && sj11array[0] <= 1 + IKFAST_SINCOS_THRESH )
                                                        {
                                                            j11valid[0] = j11valid[1] = true;
                                                            j11array[0] = IKasin ( sj11array[0] );
                                                            cj11array[0] = IKcos ( j11array[0] );
                                                            sj11array[1] = sj11array[0];
                                                            j11array[1] = j11array[0] > 0 ? ( IKPI - j11array[0] ) : ( -IKPI - j11array[0] );
                                                            cj11array[1] = -cj11array[0];
                                                        }
                                                        else if ( isnan ( sj11array[0] ) )
                                                        {
                                                            // probably any value will work
                                                            j11valid[0] = true;
                                                            cj11array[0] = 1;
                                                            sj11array[0] = 0;
                                                            j11array[0] = 0;
                                                        }
                                                        for ( int ij11 = 0; ij11 < 2; ++ij11 )
                                                        {
                                                            if ( !j11valid[ij11] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij11[0] = ij11;
                                                            _ij11[1] = -1;
                                                            for ( int iij11 = ij11 + 1; iij11 < 2; ++iij11 )
                                                            {
                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j11valid[iij11] = false;
                                                                    _ij11[1] = iij11;
                                                                    break;
                                                                }
                                                            }
                                                            j11 = j11array[ij11];
                                                            cj11 = cj11array[ij11];
                                                            sj11 = sj11array[ij11];
                                                            {
                                                                IkReal evalcond[2];
                                                                evalcond[0] = ( ( -1.0 ) * r22 * ( IKcos ( j11 ) ) );
                                                                evalcond[1] = ( ( ( cj8 * sj7 ) ) + ( ( cj7 * sj8 ) ) + ( ( cj10 * r22 * ( IKsin ( j11 ) ) ) ) );
                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkReal j12eval[1];
                                                                IkReal x1148 = ( ( -1.0 ) * pz );
                                                                r20 = 0;
                                                                r21 = 0;
                                                                r02 = 0;
                                                                r12 = 0;
                                                                npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                                                npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                                                npz = ( pz * r22 );
                                                                rxp0_0 = ( pz * r10 );
                                                                rxp0_1 = ( r00 * x1148 );
                                                                rxp1_0 = ( pz * r11 );
                                                                rxp1_1 = ( r01 * x1148 );
                                                                rxp2_0 = ( ( -1.0 ) * py * r22 );
                                                                rxp2_1 = ( px * r22 );
                                                                rxp2_2 = 0;
                                                                j12eval[0] = ( ( IKabs ( ( ( ( ( -4.0 ) * cj11 * r00 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * r01 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r00 * sj10 ) ) + ( ( ( -4.0 ) * cj8 * r01 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r00 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r00 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r01 * sj10 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r01 ) ) ) ) ) + ( IKabs ( ( ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r10 ) ) + ( ( ( 8.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( -8.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 16.0 ) * cj10 * r00 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj8 * r00 * sj10 * sj7 ) ) + ( ( ( 16.0 ) * cj11 * cj7 * cj8 * r01 * sj10 ) ) + ( ( ( -16.0 ) * cj11 * r01 * sj10 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj8 * r01 * sj7 ) ) + ( ( ( -16.0 ) * cj10 * cj7 * cj8 * r00 ) ) + ( ( ( 16.0 ) * cj7 * r00 * sj10 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj7 * r01 * sj8 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r11 ) ) + ( ( ( 4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 16.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( -16.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( 16.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( -16.0 ) * cj10 * cj7 * cj8 * r10 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 4.0 ) * cj8 * r01 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj7 * r01 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r00 * sj10 ) ) + ( ( ( 4.0 ) * cj10 * r01 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r00 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r01 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r00 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r00 * sj10 * sj7 * sj8 ) ) ) ) ) ) ) + ( IKabs ( ( ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r11 ) ) ) ) ) + ( IKabs ( ( ( ( ( 8.0 ) * cj10 * r00 * sj7 * sj8 ) ) + ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r00 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r01 * sj10 ) ) + ( ( ( 8.0 ) * cj7 * r00 * sj10 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r00 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r01 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r01 * sj7 ) ) + ( ( ( -8.0 ) * cj11 * r01 * sj10 * sj7 * sj8 ) ) ) ) ) );
                                                                if ( IKabs ( j12eval[0] ) < 0.0000000010000000  )
                                                                {
                                                                    continue; // 1 cases reached

                                                                } else
                                                                {
                                                                    IkReal op[6 + 1], zeror[6];
                                                                    int numroots;
                                                                    IkReal j12evalpoly[1];
                                                                    IkReal x1149 = ( cj10 * cj8 );
                                                                    IkReal x1150 = ( ( 8.0 ) * sj10 );
                                                                    IkReal x1151 = ( r00 * sj7 );
                                                                    IkReal x1152 = ( ( 4.0 ) * cj11 );
                                                                    IkReal x1153 = ( cj7 * r00 );
                                                                    IkReal x1154 = ( cj8 * sj10 );
                                                                    IkReal x1155 = ( cj11 * cj7 );
                                                                    IkReal x1156 = ( ( 4.0 ) * sj7 );
                                                                    IkReal x1157 = ( ( 16.0 ) * sj8 );
                                                                    IkReal x1158 = ( sj10 * sj8 );
                                                                    IkReal x1159 = ( cj10 * sj8 );
                                                                    IkReal x1160 = ( cj11 * r01 * sj7 );
                                                                    IkReal x1161 = ( r01 * x1159 );
                                                                    IkReal x1162 = ( ( 4.0 ) * cj7 * r01 );
                                                                    IkReal x1163 = ( ( ( r01 * x1154 * x1156 ) ) + ( ( x1156 * x1161 ) ) + ( ( x1158 * x1162 ) ) + ( ( x1151 * x1152 * x1158 ) ) );
                                                                    IkReal x1164 = ( ( ( x1149 * x1151 * x1152 ) ) + ( ( x1149 * x1162 ) ) + ( ( x1152 * x1153 * x1154 ) ) + ( ( x1152 * x1153 * x1159 ) ) );
                                                                    IkReal x1165 = ( x1164 + ( ( ( -1.0 ) * x1163 ) ) );
                                                                    IkReal x1166 = ( ( ( sj8 * x1150 * x1153 ) ) + ( ( ( -8.0 ) * x1149 * x1153 ) ) + ( ( ( 8.0 ) * x1151 * x1159 ) ) + ( ( ( 8.0 ) * x1155 * x1161 ) ) + ( ( cj8 * r01 * x1150 * x1155 ) ) + ( ( ( 8.0 ) * x1149 * x1160 ) ) + ( ( ( -1.0 ) * sj8 * x1150 * x1160 ) ) + ( ( cj8 * x1150 * x1151 ) ) );
                                                                    IkReal x1167 = ( x1163 + ( ( ( -1.0 ) * x1164 ) ) );
                                                                    op[0] = x1165;
                                                                    op[1] = x1166;
                                                                    op[2] = x1165;
                                                                    op[3] = ( ( ( ( 16.0 ) * x1151 * x1154 ) ) + ( ( ( 16.0 ) * x1149 * x1160 ) ) + ( ( ( -16.0 ) * x1149 * x1153 ) ) + ( ( sj10 * x1153 * x1157 ) ) + ( ( ( 16.0 ) * r01 * x1154 * x1155 ) ) + ( ( cj10 * r01 * x1155 * x1157 ) ) + ( ( cj10 * x1151 * x1157 ) ) + ( ( ( -1.0 ) * sj10 * x1157 * x1160 ) ) );
                                                                    op[4] = x1167;
                                                                    op[5] = x1166;
                                                                    op[6] = x1167;
                                                                    polyroots6 ( op, zeror, numroots );
                                                                    IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
                                                                    int numsolutions = 0;
                                                                    for ( int ij12 = 0; ij12 < numroots; ++ij12 )
                                                                    {
                                                                        IkReal htj12 = zeror[ij12];
                                                                        tempj12array[0] = ( ( 2.0 ) * ( atan ( htj12 ) ) );
                                                                        for ( int kj12 = 0; kj12 < 1; ++kj12 )
                                                                        {
                                                                            j12array[numsolutions] = tempj12array[kj12];
                                                                            if ( j12array[numsolutions] > IKPI )
                                                                            {
                                                                                j12array[numsolutions] -= IK2PI;
                                                                            }
                                                                            else if ( j12array[numsolutions] < -IKPI )
                                                                            {
                                                                                j12array[numsolutions] += IK2PI;
                                                                            }
                                                                            sj12array[numsolutions] = IKsin ( j12array[numsolutions] );
                                                                            cj12array[numsolutions] = IKcos ( j12array[numsolutions] );
                                                                            numsolutions++;
                                                                        }
                                                                    }
                                                                    bool j12valid[6] = {true, true, true, true, true, true};
                                                                    _nj12 = 6;
                                                                    for ( int ij12 = 0; ij12 < numsolutions; ++ij12 )
                                                                    {
                                                                        if ( !j12valid[ij12] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        j12 = j12array[ij12];
                                                                        cj12 = cj12array[ij12];
                                                                        sj12 = sj12array[ij12];
                                                                        htj12 = IKtan ( j12 / 2 );

                                                                        j12evalpoly[0] = ( ( ( ( htj12 * htj12 ) * ( ( ( ( ( 4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r11 ) ) + ( ( ( 4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r11 ) ) ) ) ) ) + ( ( ( 4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( htj12 * ( ( ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r10 ) ) + ( ( ( 8.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( -8.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 ) * ( ( ( ( ( 16.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( -16.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( 16.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( -16.0 ) * cj10 * cj7 * cj8 * r10 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r11 ) ) ) ) ) ) + ( ( ( 4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r11 ) ) + ( ( ( 4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r10 ) ) + ( ( ( 8.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( -8.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) ) ) ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) );
                                                                        if ( IKabs ( j12evalpoly[0] ) > 0.0000000010000000  )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij12[0] = ij12;
                                                                        _ij12[1] = -1;
                                                                        for ( int iij12 = ij12 + 1; iij12 < numsolutions; ++iij12 )
                                                                        {
                                                                            if ( j12valid[iij12] && IKabs ( cj12array[ij12] - cj12array[iij12] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj12array[ij12] - sj12array[iij12] ) < IKFAST_SOLUTION_THRESH )
                                                                            {
                                                                                j12valid[iij12] = false;
                                                                                _ij12[1] = iij12;
                                                                                break;
                                                                            }
                                                                        }
                                                                        {
                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                            bool j9valid[1] = {false};
                                                                            _nj9 = 1;
                                                                            IkReal x1168 = ( sj11 * sj12 );
                                                                            IkReal x1169 = ( cj12 * sj11 );
                                                                            if ( IKabs ( ( ( ( r01 * x1168 ) ) + ( ( ( -1.0 ) *r00 * x1169 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( r10 * x1169 ) ) + ( ( ( -1.0 ) *r11 * x1168 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( r01 * x1168 ) ) + ( ( ( -1.0 ) *r00 * x1169 ) ) ) ) + IKsqr ( ( ( ( r10 * x1169 ) ) + ( ( ( -1.0 ) *r11 * x1168 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                continue;
                                                                            j9array[0] = IKatan2 ( ( ( ( r01 * x1168 ) ) + ( ( ( -1.0 ) * r00 * x1169 ) ) ), ( ( ( r10 * x1169 ) ) + ( ( ( -1.0 ) * r11 * x1168 ) ) ) );
                                                                            sj9array[0] = IKsin ( j9array[0] );
                                                                            cj9array[0] = IKcos ( j9array[0] );
                                                                            if ( j9array[0] > IKPI )
                                                                            {
                                                                                j9array[0] -= IK2PI;
                                                                            }
                                                                            else if ( j9array[0] < -IKPI )
                                                                            {   j9array[0] += IK2PI;
                                                                            }
                                                                            j9valid[0] = true;
                                                                            for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                            {
                                                                                if ( !j9valid[ij9] )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij9[0] = ij9;
                                                                                _ij9[1] = -1;
                                                                                for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                {
                                                                                    if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                    {
                                                                                        j9valid[iij9] = false;
                                                                                        _ij9[1] = iij9;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j9 = j9array[ij9];
                                                                                cj9 = cj9array[ij9];
                                                                                sj9 = sj9array[ij9];
                                                                                {
                                                                                    IkReal evalcond[8];
                                                                                    IkReal x1170 = IKcos ( j9 );
                                                                                    IkReal x1171 = IKsin ( j9 );
                                                                                    IkReal x1172 = ( cj10 * cj11 );
                                                                                    IkReal x1173 = ( r11 * sj12 );
                                                                                    IkReal x1174 = ( ( 1.0 ) * cj12 );
                                                                                    IkReal x1175 = ( cj12 * r11 );
                                                                                    IkReal x1176 = ( cj10 * sj12 );
                                                                                    IkReal x1177 = ( r10 * sj12 );
                                                                                    IkReal x1178 = ( r01 * sj12 );
                                                                                    IkReal x1179 = ( cj11 * sj10 );
                                                                                    IkReal x1180 = ( cj12 * r01 );
                                                                                    IkReal x1181 = ( ( 0.612 ) * cj8 );
                                                                                    IkReal x1182 = ( r00 * sj12 );
                                                                                    IkReal x1183 = ( ( 0.5723 ) * cj8 );
                                                                                    IkReal x1184 = ( sj7 * sj8 );
                                                                                    IkReal x1185 = ( ( 1.0 ) * cj8 * sj7 );
                                                                                    IkReal x1186 = ( cj7 * x1170 );
                                                                                    IkReal x1187 = ( ( 0.5723 ) * x1184 );
                                                                                    IkReal x1188 = ( ( 1.0 ) * cj7 * x1171 );
                                                                                    evalcond[0] = ( x1170 + ( ( ( -1.0 ) * r10 * sj11 * x1174 ) ) + ( ( sj11 * x1173 ) ) );
                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * r00 * sj11 * x1174 ) ) + ( ( sj11 * x1178 ) ) + ( ( ( -1.0 ) * x1171 ) ) );
                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * r00 * x1172 * x1174 ) ) + ( ( x1172 * x1178 ) ) + ( ( x1170 * x1184 ) ) + ( ( ( -1.0 ) * cj8 * x1186 ) ) + ( ( sj10 * x1180 ) ) + ( ( sj10 * x1182 ) ) );
                                                                                    evalcond[3] = ( ( ( sj10 * x1175 ) ) + ( ( sj10 * x1177 ) ) + ( ( ( -1.0 ) * cj8 * x1188 ) ) + ( ( ( -1.0 ) * r10 * x1172 * x1174 ) ) + ( ( x1171 * x1184 ) ) + ( ( x1172 * x1173 ) ) );
                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * sj8 * x1186 ) ) + ( ( r00 * x1176 ) ) + ( ( ( -1.0 ) * x1178 * x1179 ) ) + ( ( ( -1.0 ) * x1170 * x1185 ) ) + ( ( cj10 * x1180 ) ) + ( ( cj12 * r00 * x1179 ) ) );
                                                                                    evalcond[5] = ( ( ( ( -1.0 ) * x1171 * x1185 ) ) + ( ( cj10 * x1175 ) ) + ( ( r10 * x1176 ) ) + ( ( cj12 * r10 * x1179 ) ) + ( ( ( -1.0 ) * x1173 * x1179 ) ) + ( ( ( -1.0 ) * sj8 * x1188 ) ) );
                                                                                    evalcond[6] = ( ( ( x1183 * x1186 ) ) + ( ( ( -0.163941 ) * x1171 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -0.1157 ) * x1180 ) ) + ( ( ( -0.1157 ) * x1182 ) ) + ( ( x1170 * x1181 ) ) + ( ( ( -1.0 ) * x1170 * x1187 ) ) );
                                                                                    evalcond[7] = ( ( ( ( -1.0 ) * x1171 * x1187 ) ) + ( ( ( -0.1157 ) * x1175 ) ) + ( ( ( -0.1157 ) * x1177 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( x1171 * x1181 ) ) + ( ( ( 0.163941 ) * x1170 ) ) + ( ( cj7 * x1171 * x1183 ) ) );
                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                    vinfos[0].jointtype = 1;
                                                                                    vinfos[0].foffset = j9;
                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                    vinfos[1].jointtype = 1;
                                                                                    vinfos[1].foffset = j8;
                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                    vinfos[2].jointtype = 1;
                                                                                    vinfos[2].foffset = j7;
                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                    vinfos[3].jointtype = 1;
                                                                                    vinfos[3].foffset = j10;
                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                    vinfos[4].jointtype = 1;
                                                                                    vinfos[4].foffset = j11;
                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                    vinfos[5].jointtype = 1;
                                                                                    vinfos[5].foffset = j12;
                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                    std::vector<int> vfree ( 0 );
                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                }
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        } else
                                        {
                                            {
                                                IkReal j11array[2], cj11array[2], sj11array[2];
                                                bool j11valid[2] = {false};
                                                _nj11 = 2;
                                                CheckValue<IkReal> x1189 = IKPowWithIntegerCheck ( cj10, -1 );
                                                if ( !x1189.valid ) {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x1190 = IKPowWithIntegerCheck ( r22, -1 );
                                                if ( !x1190.valid ) {
                                                    continue;
                                                }
                                                sj11array[0] = ( ( -1.0 ) * ( x1189.value ) * ( x1190.value ) * ( ( ( ( cj8 * sj7 ) ) + ( ( cj7 * sj8 ) ) ) ) );
                                                if ( sj11array[0] >= -1 - IKFAST_SINCOS_THRESH && sj11array[0] <= 1 + IKFAST_SINCOS_THRESH )
                                                {
                                                    j11valid[0] = j11valid[1] = true;
                                                    j11array[0] = IKasin ( sj11array[0] );
                                                    cj11array[0] = IKcos ( j11array[0] );
                                                    sj11array[1] = sj11array[0];
                                                    j11array[1] = j11array[0] > 0 ? ( IKPI - j11array[0] ) : ( -IKPI - j11array[0] );
                                                    cj11array[1] = -cj11array[0];
                                                }
                                                else if ( isnan ( sj11array[0] ) )
                                                {
                                                    // probably any value will work
                                                    j11valid[0] = true;
                                                    cj11array[0] = 1;
                                                    sj11array[0] = 0;
                                                    j11array[0] = 0;
                                                }
                                                for ( int ij11 = 0; ij11 < 2; ++ij11 )
                                                {
                                                    if ( !j11valid[ij11] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij11[0] = ij11;
                                                    _ij11[1] = -1;
                                                    for ( int iij11 = ij11 + 1; iij11 < 2; ++iij11 )
                                                    {
                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j11valid[iij11] = false;
                                                            _ij11[1] = iij11;
                                                            break;
                                                        }
                                                    }
                                                    j11 = j11array[ij11];
                                                    cj11 = cj11array[ij11];
                                                    sj11 = sj11array[ij11];
                                                    {
                                                        IkReal evalcond[2];
                                                        evalcond[0] = ( ( -1.0 ) * r22 * ( IKcos ( j11 ) ) );
                                                        evalcond[1] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) + ( ( ( -1.0 ) * r22 * sj10 * ( IKsin ( j11 ) ) ) ) );
                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkReal j12eval[1];
                                                        IkReal x1191 = ( ( -1.0 ) * pz );
                                                        r20 = 0;
                                                        r21 = 0;
                                                        r02 = 0;
                                                        r12 = 0;
                                                        npx = ( ( ( px * r00 ) ) + ( ( py * r10 ) ) );
                                                        npy = ( ( ( px * r01 ) ) + ( ( py * r11 ) ) );
                                                        npz = ( pz * r22 );
                                                        rxp0_0 = ( pz * r10 );
                                                        rxp0_1 = ( r00 * x1191 );
                                                        rxp1_0 = ( pz * r11 );
                                                        rxp1_1 = ( r01 * x1191 );
                                                        rxp2_0 = ( ( -1.0 ) * py * r22 );
                                                        rxp2_1 = ( px * r22 );
                                                        rxp2_2 = 0;
                                                        j12eval[0] = ( ( IKabs ( ( ( ( ( -4.0 ) * cj11 * r00 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * r01 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r00 * sj10 ) ) + ( ( ( -4.0 ) * cj8 * r01 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r00 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r00 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r01 * sj10 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r01 ) ) ) ) ) + ( IKabs ( ( ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r10 ) ) + ( ( ( 8.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( -8.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 16.0 ) * cj10 * r00 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj8 * r00 * sj10 * sj7 ) ) + ( ( ( 16.0 ) * cj11 * cj7 * cj8 * r01 * sj10 ) ) + ( ( ( -16.0 ) * cj11 * r01 * sj10 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj8 * r01 * sj7 ) ) + ( ( ( -16.0 ) * cj10 * cj7 * cj8 * r00 ) ) + ( ( ( 16.0 ) * cj7 * r00 * sj10 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj7 * r01 * sj8 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r11 ) ) + ( ( ( 4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 16.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( -16.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( 16.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( -16.0 ) * cj10 * cj7 * cj8 * r10 ) ) ) ) ) ) ) + ( ( ( 0.5 ) * ( IKabs ( ( ( ( ( 4.0 ) * cj8 * r01 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj7 * r01 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r00 * sj10 ) ) + ( ( ( 4.0 ) * cj10 * r01 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r00 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r01 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r00 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r00 * sj10 * sj7 * sj8 ) ) ) ) ) ) ) + ( IKabs ( ( ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r11 ) ) ) ) ) + ( IKabs ( ( ( ( ( 8.0 ) * cj10 * r00 * sj7 * sj8 ) ) + ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r00 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r01 * sj10 ) ) + ( ( ( 8.0 ) * cj7 * r00 * sj10 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r00 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r01 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r01 * sj7 ) ) + ( ( ( -8.0 ) * cj11 * r01 * sj10 * sj7 * sj8 ) ) ) ) ) );
                                                        if ( IKabs ( j12eval[0] ) < 0.0000000010000000  )
                                                        {
                                                            continue; // 1 cases reached

                                                        } else
                                                        {
                                                            IkReal op[6 + 1], zeror[6];
                                                            int numroots;
                                                            IkReal j12evalpoly[1];
                                                            IkReal x1192 = ( cj10 * cj8 );
                                                            IkReal x1193 = ( ( 8.0 ) * sj10 );
                                                            IkReal x1194 = ( r00 * sj7 );
                                                            IkReal x1195 = ( ( 4.0 ) * cj11 );
                                                            IkReal x1196 = ( cj7 * r00 );
                                                            IkReal x1197 = ( cj8 * sj10 );
                                                            IkReal x1198 = ( cj11 * cj7 );
                                                            IkReal x1199 = ( ( 4.0 ) * sj7 );
                                                            IkReal x1200 = ( ( 16.0 ) * sj8 );
                                                            IkReal x1201 = ( sj10 * sj8 );
                                                            IkReal x1202 = ( cj10 * sj8 );
                                                            IkReal x1203 = ( cj11 * r01 * sj7 );
                                                            IkReal x1204 = ( r01 * x1202 );
                                                            IkReal x1205 = ( ( 4.0 ) * cj7 * r01 );
                                                            IkReal x1206 = ( ( ( x1194 * x1195 * x1201 ) ) + ( ( r01 * x1197 * x1199 ) ) + ( ( x1199 * x1204 ) ) + ( ( x1201 * x1205 ) ) );
                                                            IkReal x1207 = ( ( ( x1192 * x1205 ) ) + ( ( x1195 * x1196 * x1202 ) ) + ( ( x1192 * x1194 * x1195 ) ) + ( ( x1195 * x1196 * x1197 ) ) );
                                                            IkReal x1208 = ( x1207 + ( ( ( -1.0 ) * x1206 ) ) );
                                                            IkReal x1209 = ( ( ( cj8 * r01 * x1193 * x1198 ) ) + ( ( ( 8.0 ) * x1194 * x1202 ) ) + ( ( cj8 * x1193 * x1194 ) ) + ( ( ( 8.0 ) * x1192 * x1203 ) ) + ( ( sj8 * x1193 * x1196 ) ) + ( ( ( -1.0 ) * sj8 * x1193 * x1203 ) ) + ( ( ( -8.0 ) * x1192 * x1196 ) ) + ( ( ( 8.0 ) * x1198 * x1204 ) ) );
                                                            IkReal x1210 = ( x1206 + ( ( ( -1.0 ) * x1207 ) ) );
                                                            op[0] = x1208;
                                                            op[1] = x1209;
                                                            op[2] = x1208;
                                                            op[3] = ( ( ( cj10 * r01 * x1198 * x1200 ) ) + ( ( ( 16.0 ) * x1194 * x1197 ) ) + ( ( ( 16.0 ) * x1192 * x1203 ) ) + ( ( sj10 * x1196 * x1200 ) ) + ( ( ( -1.0 ) * sj10 * x1200 * x1203 ) ) + ( ( cj10 * x1194 * x1200 ) ) + ( ( ( -16.0 ) * x1192 * x1196 ) ) + ( ( ( 16.0 ) * r01 * x1197 * x1198 ) ) );
                                                            op[4] = x1210;
                                                            op[5] = x1209;
                                                            op[6] = x1210;
                                                            polyroots6 ( op, zeror, numroots );
                                                            IkReal j12array[6], cj12array[6], sj12array[6], tempj12array[1];
                                                            int numsolutions = 0;
                                                            for ( int ij12 = 0; ij12 < numroots; ++ij12 )
                                                            {
                                                                IkReal htj12 = zeror[ij12];
                                                                tempj12array[0] = ( ( 2.0 ) * ( atan ( htj12 ) ) );
                                                                for ( int kj12 = 0; kj12 < 1; ++kj12 )
                                                                {
                                                                    j12array[numsolutions] = tempj12array[kj12];
                                                                    if ( j12array[numsolutions] > IKPI )
                                                                    {
                                                                        j12array[numsolutions] -= IK2PI;
                                                                    }
                                                                    else if ( j12array[numsolutions] < -IKPI )
                                                                    {
                                                                        j12array[numsolutions] += IK2PI;
                                                                    }
                                                                    sj12array[numsolutions] = IKsin ( j12array[numsolutions] );
                                                                    cj12array[numsolutions] = IKcos ( j12array[numsolutions] );
                                                                    numsolutions++;
                                                                }
                                                            }
                                                            bool j12valid[6] = {true, true, true, true, true, true};
                                                            _nj12 = 6;
                                                            for ( int ij12 = 0; ij12 < numsolutions; ++ij12 )
                                                            {
                                                                if ( !j12valid[ij12] )
                                                                {
                                                                    continue;
                                                                }
                                                                j12 = j12array[ij12];
                                                                cj12 = cj12array[ij12];
                                                                sj12 = sj12array[ij12];
                                                                htj12 = IKtan ( j12 / 2 );

                                                                j12evalpoly[0] = ( ( ( ( htj12 * htj12 ) * ( ( ( ( ( 4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r11 ) ) + ( ( ( 4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r11 ) ) ) ) ) ) + ( ( ( 4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( htj12 * ( ( ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r10 ) ) + ( ( ( 8.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( -8.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 ) * ( ( ( ( ( 16.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 16.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( -16.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 16.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( 16.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 16.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( -16.0 ) * cj10 * cj7 * cj8 * r10 ) ) ) ) ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( 4.0 ) * cj10 * cj11 * cj8 * r10 * sj7 ) ) + ( ( ( 4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( 4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) + ( ( ( -4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj8 * r11 * sj10 * sj7 ) ) + ( ( ( 4.0 ) * cj10 * cj7 * cj8 * r11 ) ) ) ) ) ) + ( ( ( 4.0 ) * cj7 * r11 * sj10 * sj8 ) ) + ( ( ( -4.0 ) * cj11 * cj7 * cj8 * r10 * sj10 ) ) + ( ( ( -4.0 ) * cj10 * cj7 * cj8 * r11 ) ) + ( ( ( 4.0 ) * cj10 * r11 * sj7 * sj8 ) ) + ( ( ( htj12 * htj12 * htj12 * htj12 * htj12 ) * ( ( ( ( ( -8.0 ) * cj10 * cj7 * cj8 * r10 ) ) + ( ( ( 8.0 ) * cj7 * r10 * sj10 * sj8 ) ) + ( ( ( -8.0 ) * cj11 * r11 * sj10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj8 * r10 * sj10 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj8 * r11 * sj7 ) ) + ( ( ( 8.0 ) * cj10 * cj11 * cj7 * r11 * sj8 ) ) + ( ( ( 8.0 ) * cj10 * r10 * sj7 * sj8 ) ) + ( ( ( 8.0 ) * cj11 * cj7 * cj8 * r11 * sj10 ) ) ) ) ) ) + ( ( ( -4.0 ) * cj10 * cj11 * cj7 * r10 * sj8 ) ) + ( ( ( 4.0 ) * cj11 * r10 * sj10 * sj7 * sj8 ) ) );
                                                                if ( IKabs ( j12evalpoly[0] ) > 0.0000000010000000  )
                                                                {
                                                                    continue;
                                                                }
                                                                _ij12[0] = ij12;
                                                                _ij12[1] = -1;
                                                                for ( int iij12 = ij12 + 1; iij12 < numsolutions; ++iij12 )
                                                                {
                                                                    if ( j12valid[iij12] && IKabs ( cj12array[ij12] - cj12array[iij12] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj12array[ij12] - sj12array[iij12] ) < IKFAST_SOLUTION_THRESH )
                                                                    {
                                                                        j12valid[iij12] = false;
                                                                        _ij12[1] = iij12;
                                                                        break;
                                                                    }
                                                                }
                                                                {
                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                    bool j9valid[1] = {false};
                                                                    _nj9 = 1;
                                                                    IkReal x1211 = ( sj11 * sj12 );
                                                                    IkReal x1212 = ( cj12 * sj11 );
                                                                    if ( IKabs ( ( ( ( r01 * x1211 ) ) + ( ( ( -1.0 ) *r00 * x1212 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( r10 * x1212 ) ) + ( ( ( -1.0 ) *r11 * x1211 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( r01 * x1211 ) ) + ( ( ( -1.0 ) *r00 * x1212 ) ) ) ) + IKsqr ( ( ( ( r10 * x1212 ) ) + ( ( ( -1.0 ) *r11 * x1211 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                        continue;
                                                                    j9array[0] = IKatan2 ( ( ( ( r01 * x1211 ) ) + ( ( ( -1.0 ) * r00 * x1212 ) ) ), ( ( ( r10 * x1212 ) ) + ( ( ( -1.0 ) * r11 * x1211 ) ) ) );
                                                                    sj9array[0] = IKsin ( j9array[0] );
                                                                    cj9array[0] = IKcos ( j9array[0] );
                                                                    if ( j9array[0] > IKPI )
                                                                    {
                                                                        j9array[0] -= IK2PI;
                                                                    }
                                                                    else if ( j9array[0] < -IKPI )
                                                                    {   j9array[0] += IK2PI;
                                                                    }
                                                                    j9valid[0] = true;
                                                                    for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                    {
                                                                        if ( !j9valid[ij9] )
                                                                        {
                                                                            continue;
                                                                        }
                                                                        _ij9[0] = ij9;
                                                                        _ij9[1] = -1;
                                                                        for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                        {
                                                                            if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                            {
                                                                                j9valid[iij9] = false;
                                                                                _ij9[1] = iij9;
                                                                                break;
                                                                            }
                                                                        }
                                                                        j9 = j9array[ij9];
                                                                        cj9 = cj9array[ij9];
                                                                        sj9 = sj9array[ij9];
                                                                        {
                                                                            IkReal evalcond[8];
                                                                            IkReal x1213 = IKcos ( j9 );
                                                                            IkReal x1214 = IKsin ( j9 );
                                                                            IkReal x1215 = ( cj10 * cj11 );
                                                                            IkReal x1216 = ( r11 * sj12 );
                                                                            IkReal x1217 = ( ( 1.0 ) * cj12 );
                                                                            IkReal x1218 = ( cj12 * r11 );
                                                                            IkReal x1219 = ( cj10 * sj12 );
                                                                            IkReal x1220 = ( r10 * sj12 );
                                                                            IkReal x1221 = ( r01 * sj12 );
                                                                            IkReal x1222 = ( cj11 * sj10 );
                                                                            IkReal x1223 = ( cj12 * r01 );
                                                                            IkReal x1224 = ( ( 0.612 ) * cj8 );
                                                                            IkReal x1225 = ( r00 * sj12 );
                                                                            IkReal x1226 = ( ( 0.5723 ) * cj8 );
                                                                            IkReal x1227 = ( sj7 * sj8 );
                                                                            IkReal x1228 = ( ( 1.0 ) * cj8 * sj7 );
                                                                            IkReal x1229 = ( cj7 * x1213 );
                                                                            IkReal x1230 = ( ( 0.5723 ) * x1227 );
                                                                            IkReal x1231 = ( ( 1.0 ) * cj7 * x1214 );
                                                                            evalcond[0] = ( x1213 + ( ( ( -1.0 ) * r10 * sj11 * x1217 ) ) + ( ( sj11 * x1216 ) ) );
                                                                            evalcond[1] = ( ( ( sj11 * x1221 ) ) + ( ( ( -1.0 ) * r00 * sj11 * x1217 ) ) + ( ( ( -1.0 ) * x1214 ) ) );
                                                                            evalcond[2] = ( ( ( sj10 * x1223 ) ) + ( ( sj10 * x1225 ) ) + ( ( ( -1.0 ) * cj8 * x1229 ) ) + ( ( x1213 * x1227 ) ) + ( ( x1215 * x1221 ) ) + ( ( ( -1.0 ) * r00 * x1215 * x1217 ) ) );
                                                                            evalcond[3] = ( ( ( x1214 * x1227 ) ) + ( ( sj10 * x1220 ) ) + ( ( sj10 * x1218 ) ) + ( ( ( -1.0 ) * cj8 * x1231 ) ) + ( ( x1215 * x1216 ) ) + ( ( ( -1.0 ) * r10 * x1215 * x1217 ) ) );
                                                                            evalcond[4] = ( ( ( ( -1.0 ) * x1213 * x1228 ) ) + ( ( ( -1.0 ) * x1221 * x1222 ) ) + ( ( cj12 * r00 * x1222 ) ) + ( ( ( -1.0 ) * sj8 * x1229 ) ) + ( ( r00 * x1219 ) ) + ( ( cj10 * x1223 ) ) );
                                                                            evalcond[5] = ( ( ( ( -1.0 ) * x1216 * x1222 ) ) + ( ( ( -1.0 ) * x1214 * x1228 ) ) + ( ( r10 * x1219 ) ) + ( ( ( -1.0 ) * sj8 * x1231 ) ) + ( ( cj12 * r10 * x1222 ) ) + ( ( cj10 * x1218 ) ) );
                                                                            evalcond[6] = ( ( ( ( -1.0 ) * x1213 * x1230 ) ) + ( ( ( -0.163941 ) * x1214 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( x1226 * x1229 ) ) + ( ( ( -0.1157 ) * x1223 ) ) + ( ( ( -0.1157 ) * x1225 ) ) + ( ( x1213 * x1224 ) ) );
                                                                            evalcond[7] = ( ( ( x1214 * x1224 ) ) + ( ( cj7 * x1214 * x1226 ) ) + ( ( ( -1.0 ) * x1214 * x1230 ) ) + ( ( ( -0.1157 ) * x1218 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.163941 ) * x1213 ) ) + ( ( ( -0.1157 ) * x1220 ) ) );
                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                            {
                                                                                continue;
                                                                            }
                                                                        }

                                                                        {
                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                            vinfos[0].jointtype = 1;
                                                                            vinfos[0].foffset = j9;
                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                            vinfos[0].maxsolutions = _nj9;
                                                                            vinfos[1].jointtype = 1;
                                                                            vinfos[1].foffset = j8;
                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                            vinfos[1].maxsolutions = _nj8;
                                                                            vinfos[2].jointtype = 1;
                                                                            vinfos[2].foffset = j7;
                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                            vinfos[2].maxsolutions = _nj7;
                                                                            vinfos[3].jointtype = 1;
                                                                            vinfos[3].foffset = j10;
                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                            vinfos[3].maxsolutions = _nj10;
                                                                            vinfos[4].jointtype = 1;
                                                                            vinfos[4].foffset = j11;
                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                            vinfos[4].maxsolutions = _nj11;
                                                                            vinfos[5].jointtype = 1;
                                                                            vinfos[5].foffset = j12;
                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                            vinfos[5].maxsolutions = _nj12;
                                                                            std::vector<int> vfree ( 0 );
                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                        }
                                                                    }
                                                                }
                                                            }

                                                        }

                                                    }
                                                }
                                            }

                                        }

                                    }

                                }
                            } while ( 0 );
                            if ( bgotonextstatement )
                            {
                                bool bgotonextstatement = true;
                                do
                                {
                                    if ( 1 )
                                    {
                                        bgotonextstatement = false;
                                        continue; // branch miss [j9, j11, j12]

                                    }
                                } while ( 0 );
                                if ( bgotonextstatement )
                                {
                                }
                            }
                        }
                    }

                } else
                {
                    {
                        IkReal j12array[2], cj12array[2], sj12array[2];
                        bool j12valid[2] = {false};
                        _nj12 = 2;
                        CheckValue<IkReal> x1234 = IKatan2WithCheck ( IkReal ( ( ( -0.1157 ) * r21 ) ), IkReal ( ( ( -0.1157 ) * r20 ) ), IKFAST_ATAN2_MAGTHRESH );
                        if ( !x1234.valid ) {
                            continue;
                        }
                        IkReal x1232 = ( ( 1.0 ) * ( x1234.value ) );
                        if ( ( ( ( ( ( 0.01338649 ) * ( r20 * r20 ) ) ) + ( ( ( 0.01338649 ) * ( r21 * r21 ) ) ) ) ) < -0.00001 )
                            continue;
                        CheckValue<IkReal> x1235 = IKPowWithIntegerCheck ( IKabs ( IKsqrt ( ( ( ( ( 0.01338649 ) * ( r20 * r20 ) ) ) + ( ( ( 0.01338649 ) * ( r21 * r21 ) ) ) ) ) ), -1 );
                        if ( !x1235.valid ) {
                            continue;
                        }
                        if ( ( ( ( -1.0 ) * ( x1235.value ) * ( ( ( ( ( -0.5723 ) *cj7 * sj8 ) ) + ( ( ( -0.5723 ) *cj8 * sj7 ) ) + ( ( ( -1.0 ) *pz ) ) + ( ( ( -0.612 ) *sj8 ) ) ) ) ) ) < -1 - IKFAST_SINCOS_THRESH || ( ( ( -1.0 ) * ( x1235.value ) * ( ( ( ( ( -0.5723 ) *cj7 * sj8 ) ) + ( ( ( -0.5723 ) *cj8 * sj7 ) ) + ( ( ( -1.0 ) *pz ) ) + ( ( ( -0.612 ) *sj8 ) ) ) ) ) ) > 1 + IKFAST_SINCOS_THRESH )
                            continue;
                        IkReal x1233 = ( ( -1.0 ) * ( IKasin ( ( ( -1.0 ) * ( x1235.value ) * ( ( ( ( ( -0.5723 ) * cj7 * sj8 ) ) + ( ( ( -0.5723 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * pz ) ) + ( ( ( -0.612 ) * sj8 ) ) ) ) ) ) ) );
                        j12array[0] = ( ( ( ( -1.0 ) * x1233 ) ) + ( ( ( -1.0 ) * x1232 ) ) );
                        sj12array[0] = IKsin ( j12array[0] );
                        cj12array[0] = IKcos ( j12array[0] );
                        j12array[1] = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x1232 ) ) + ( ( ( 1.0 ) * x1233 ) ) );
                        sj12array[1] = IKsin ( j12array[1] );
                        cj12array[1] = IKcos ( j12array[1] );
                        if ( j12array[0] > IKPI )
                        {
                            j12array[0] -= IK2PI;
                        }
                        else if ( j12array[0] < -IKPI )
                        {   j12array[0] += IK2PI;
                        }
                        j12valid[0] = true;
                        if ( j12array[1] > IKPI )
                        {
                            j12array[1] -= IK2PI;
                        }
                        else if ( j12array[1] < -IKPI )
                        {   j12array[1] += IK2PI;
                        }
                        j12valid[1] = true;
                        for ( int ij12 = 0; ij12 < 2; ++ij12 )
                        {
                            if ( !j12valid[ij12] )
                            {
                                continue;
                            }
                            _ij12[0] = ij12;
                            _ij12[1] = -1;
                            for ( int iij12 = ij12 + 1; iij12 < 2; ++iij12 )
                            {
                                if ( j12valid[iij12] && IKabs ( cj12array[ij12] - cj12array[iij12] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj12array[ij12] - sj12array[iij12] ) < IKFAST_SOLUTION_THRESH )
                                {
                                    j12valid[iij12] = false;
                                    _ij12[1] = iij12;
                                    break;
                                }
                            }
                            j12 = j12array[ij12];
                            cj12 = cj12array[ij12];
                            sj12 = sj12array[ij12];

                            {
                                IkReal j11eval[2];
                                IkReal x1236 = cj12 * cj12;
                                IkReal x1237 = r21 * r21;
                                IkReal x1238 = ( sj10 * x1236 );
                                IkReal x1239 = ( ( ( x1238 * ( r20 * r20 ) ) ) + ( ( sj10 * ( r22 * r22 ) ) ) + ( ( ( -1.0 ) * x1237 * x1238 ) ) + ( ( ( -2.0 ) * cj12 * r20 * r21 * sj10 * sj12 ) ) + ( ( sj10 * x1237 ) ) );
                                j11eval[0] = x1239;
                                j11eval[1] = IKsign ( x1239 );
                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                {
                                    {
                                        IkReal j11eval[2];
                                        IkReal x1240 = r21 * r21;
                                        IkReal x1241 = cj12 * cj12;
                                        IkReal x1242 = ( ( 1.0 ) * cj10 );
                                        IkReal x1243 = ( cj10 * x1241 );
                                        IkReal x1244 = ( ( ( ( -1.0 ) * x1242 * ( r22 * r22 ) ) ) + ( ( x1240 * x1243 ) ) + ( ( ( -1.0 ) * x1241 * x1242 * ( r20 * r20 ) ) ) + ( ( ( -1.0 ) * x1240 * x1242 ) ) + ( ( ( 2.0 ) * cj10 * cj12 * r20 * r21 * sj12 ) ) );
                                        j11eval[0] = x1244;
                                        j11eval[1] = IKsign ( x1244 );
                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                        {
                                            {
                                                IkReal j9eval[2];
                                                IkReal x1245 = cj8 * cj8;
                                                IkReal x1246 = cj7 * cj7;
                                                IkReal x1247 = ( cj8 * sj7 * sj8 );
                                                IkReal x1248 = ( cj7 * x1245 );
                                                IkReal x1249 = ( x1245 * x1246 );
                                                j9eval[0] = ( ( 7.53782945427275 ) + x1245 + ( ( ( -14.8988561726246 ) * x1247 ) ) + ( ( ( 13.9323780843024 ) * x1249 ) ) + ( ( ( -13.9323780843024 ) * cj7 * x1247 ) ) + ( ( ( -6.96618904215118 ) * x1246 ) ) + ( ( ( 14.8988561726246 ) * x1248 ) ) );
                                                j9eval[1] = IKsign ( ( ( 354403941481.0 ) + ( ( ( 700495200000.0 ) * x1248 ) ) + ( ( ( -655054580000.0 ) * cj7 * x1247 ) ) + ( ( ( 655054580000.0 ) * x1249 ) ) + ( ( ( -327527290000.0 ) * x1246 ) ) + ( ( ( -700495200000.0 ) * x1247 ) ) + ( ( ( 47016710000.0 ) * x1245 ) ) ) );
                                                if ( IKabs ( j9eval[0] ) < 0.0000010000000000  || IKabs ( j9eval[1] ) < 0.0000010000000000  )
                                                {
                                                    {
                                                        IkReal evalcond[1];
                                                        bool bgotonextstatement = true;
                                                        do
                                                        {
                                                            evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( -1.5707963267949 ) + j10 ) ) ) ), 6.28318530717959 ) ) );
                                                            if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                            {
                                                                bgotonextstatement = false;
                                                                {
                                                                    IkReal j9eval[3];
                                                                    sj10 = 1.0;
                                                                    cj10 = 0;
                                                                    j10 = 1.5707963267949;
                                                                    IkReal x1250 = ( ( 1.0 ) * cj12 );
                                                                    IkReal x1251 = ( ( 1.0 ) * sj12 );
                                                                    IkReal x1252 = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) );
                                                                    j9eval[0] = x1252;
                                                                    j9eval[1] = IKsign ( x1252 );
                                                                    j9eval[2] = ( ( IKabs ( ( ( ( ( -1.0 ) * r00 * x1251 ) ) + ( ( ( -1.0 ) * r01 * x1250 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * r11 * x1250 ) ) + ( ( ( -1.0 ) * r10 * x1251 ) ) ) ) ) );
                                                                    if ( IKabs ( j9eval[0] ) < 0.0000010000000000  || IKabs ( j9eval[1] ) < 0.0000010000000000  || IKabs ( j9eval[2] ) < 0.0000010000000000  )
                                                                    {
                                                                        {
                                                                            IkReal j11eval[3];
                                                                            sj10 = 1.0;
                                                                            cj10 = 0;
                                                                            j10 = 1.5707963267949;
                                                                            IkReal x1253 = cj12 * cj12;
                                                                            IkReal x1254 = r21 * r21;
                                                                            IkReal x1255 = ( sj7 * sj8 );
                                                                            IkReal x1256 = ( r21 * sj12 );
                                                                            IkReal x1257 = ( cj12 * r20 );
                                                                            IkReal x1258 = ( ( 1.0 ) * cj7 * cj8 );
                                                                            IkReal x1259 = ( x1254 + ( r22 * r22 ) + ( ( x1253 * ( r20 * r20 ) ) ) + ( ( ( -2.0 ) * x1256 * x1257 ) ) + ( ( ( -1.0 ) * x1253 * x1254 ) ) );
                                                                            j11eval[0] = x1259;
                                                                            j11eval[1] = ( ( IKabs ( ( ( ( r22 * x1255 ) ) + ( ( ( -1.0 ) * r22 * x1258 ) ) ) ) ) + ( IKabs ( ( ( ( cj7 * cj8 * x1257 ) ) + ( ( ( -1.0 ) * x1256 * x1258 ) ) + ( ( x1255 * x1256 ) ) + ( ( ( -1.0 ) * x1255 * x1257 ) ) ) ) ) );
                                                                            j11eval[2] = IKsign ( x1259 );
                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                            {
                                                                                {
                                                                                    IkReal j9eval[1];
                                                                                    sj10 = 1.0;
                                                                                    cj10 = 0;
                                                                                    j10 = 1.5707963267949;
                                                                                    j9eval[0] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                    if ( IKabs ( j9eval[0] ) < 0.0000010000000000  )
                                                                                    {
                                                                                        continue; // 1 cases reached

                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                            bool j9valid[1] = {false};
                                                                                            _nj9 = 1;
                                                                                            IkReal x1260 = ( cj7 * cj8 );
                                                                                            IkReal x1261 = ( ( 1000000.0 ) * px );
                                                                                            IkReal x1262 = ( cj12 * r01 );
                                                                                            IkReal x1263 = ( r00 * sj12 );
                                                                                            IkReal x1264 = ( sj7 * sj8 );
                                                                                            IkReal x1265 = ( ( 612000.0 ) * cj8 );
                                                                                            CheckValue<IkReal> x1266 = IKPowWithIntegerCheck ( ( ( ( ( 163941.0 ) * x1264 ) ) + ( ( ( -163941.0 ) * x1260 ) ) ), -1 );
                                                                                            if ( !x1266.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x1267 = IKPowWithIntegerCheck ( ( x1264 + ( ( ( -1.0 ) * x1260 ) ) ), -1 );
                                                                                            if ( !x1267.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            if ( IKabs ( ( ( x1266.value ) * ( ( ( ( ( 456600.0 ) *x1263 * x1264 ) ) + ( ( ( -456600.0 ) *x1260 * x1262 ) ) + ( ( ( -456600.0 ) *x1260 * x1263 ) ) + ( ( ( -1.0 ) *x1261 * x1264 ) ) + ( ( ( -1.0 ) *x1263 * x1265 ) ) + ( ( ( -1.0 ) *x1262 * x1265 ) ) + ( ( x1260 * x1261 ) ) + ( ( ( 456600.0 ) *x1262 * x1264 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( x1267.value ) * ( ( ( ( ( -1.0 ) *x1263 ) ) + ( ( ( -1.0 ) *x1262 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( x1266.value ) * ( ( ( ( ( 456600.0 ) *x1263 * x1264 ) ) + ( ( ( -456600.0 ) *x1260 * x1262 ) ) + ( ( ( -456600.0 ) *x1260 * x1263 ) ) + ( ( ( -1.0 ) *x1261 * x1264 ) ) + ( ( ( -1.0 ) *x1263 * x1265 ) ) + ( ( ( -1.0 ) *x1262 * x1265 ) ) + ( ( x1260 * x1261 ) ) + ( ( ( 456600.0 ) *x1262 * x1264 ) ) ) ) ) ) + IKsqr ( ( ( x1267.value ) * ( ( ( ( ( -1.0 ) *x1263 ) ) + ( ( ( -1.0 ) *x1262 ) ) ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                continue;
                                                                                            j9array[0] = IKatan2 ( ( ( x1266.value ) * ( ( ( ( ( 456600.0 ) * x1263 * x1264 ) ) + ( ( ( -456600.0 ) * x1260 * x1262 ) ) + ( ( ( -456600.0 ) * x1260 * x1263 ) ) + ( ( ( -1.0 ) * x1261 * x1264 ) ) + ( ( ( -1.0 ) * x1263 * x1265 ) ) + ( ( ( -1.0 ) * x1262 * x1265 ) ) + ( ( x1260 * x1261 ) ) + ( ( ( 456600.0 ) * x1262 * x1264 ) ) ) ) ), ( ( x1267.value ) * ( ( ( ( ( -1.0 ) * x1263 ) ) + ( ( ( -1.0 ) * x1262 ) ) ) ) ) );
                                                                                            sj9array[0] = IKsin ( j9array[0] );
                                                                                            cj9array[0] = IKcos ( j9array[0] );
                                                                                            if ( j9array[0] > IKPI )
                                                                                            {
                                                                                                j9array[0] -= IK2PI;
                                                                                            }
                                                                                            else if ( j9array[0] < -IKPI )
                                                                                            {   j9array[0] += IK2PI;
                                                                                            }
                                                                                            j9valid[0] = true;
                                                                                            for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                            {
                                                                                                if ( !j9valid[ij9] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij9[0] = ij9;
                                                                                                _ij9[1] = -1;
                                                                                                for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                {
                                                                                                    if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j9valid[iij9] = false;
                                                                                                        _ij9[1] = iij9;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j9 = j9array[ij9];
                                                                                                cj9 = cj9array[ij9];
                                                                                                sj9 = sj9array[ij9];
                                                                                                {
                                                                                                    IkReal evalcond[4];
                                                                                                    IkReal x1268 = IKcos ( j9 );
                                                                                                    IkReal x1269 = IKsin ( j9 );
                                                                                                    IkReal x1270 = ( ( 0.1157 ) * sj12 );
                                                                                                    IkReal x1271 = ( sj7 * sj8 );
                                                                                                    IkReal x1272 = ( ( 0.612 ) * cj8 );
                                                                                                    IkReal x1273 = ( cj12 * r11 );
                                                                                                    IkReal x1274 = ( cj7 * cj8 );
                                                                                                    IkReal x1275 = ( cj12 * r01 );
                                                                                                    IkReal x1276 = ( ( 0.5723 ) * x1268 );
                                                                                                    IkReal x1277 = ( x1269 * x1274 );
                                                                                                    evalcond[0] = ( x1275 + ( ( ( -1.0 ) * x1268 * x1274 ) ) + ( ( r00 * sj12 ) ) + ( ( x1268 * x1271 ) ) );
                                                                                                    evalcond[1] = ( ( ( x1269 * x1271 ) ) + x1273 + ( ( ( -1.0 ) * x1277 ) ) + ( ( r10 * sj12 ) ) );
                                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * r00 * x1270 ) ) + ( ( ( -0.1157 ) * x1275 ) ) + ( ( ( -1.0 ) * x1271 * x1276 ) ) + ( ( x1274 * x1276 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( x1268 * x1272 ) ) + ( ( ( -0.163941 ) * x1269 ) ) );
                                                                                                    evalcond[3] = ( ( ( x1269 * x1272 ) ) + ( ( ( 0.5723 ) * x1277 ) ) + ( ( ( -0.1157 ) * x1273 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.163941 ) * x1268 ) ) + ( ( ( -0.5723 ) * x1269 * x1271 ) ) + ( ( ( -1.0 ) * r10 * x1270 ) ) );
                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j11eval[3];
                                                                                                    sj10 = 1.0;
                                                                                                    cj10 = 0;
                                                                                                    j10 = 1.5707963267949;
                                                                                                    IkReal x1278 = ( ( 1.0 ) * cj12 );
                                                                                                    IkReal x1279 = ( ( ( ( -1.0 ) * r01 * x1278 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                                                    j11eval[0] = x1279;
                                                                                                    j11eval[1] = IKsign ( x1279 );
                                                                                                    j11eval[2] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( cj9 * r21 * sj12 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x1278 ) ) ) ) ) );
                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j11eval[3];
                                                                                                            sj10 = 1.0;
                                                                                                            cj10 = 0;
                                                                                                            j10 = 1.5707963267949;
                                                                                                            IkReal x1280 = ( ( 1.0 ) * cj12 );
                                                                                                            IkReal x1281 = ( ( ( ( -1.0 ) * r11 * x1280 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) );
                                                                                                            j11eval[0] = x1281;
                                                                                                            j11eval[1] = ( ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1280 ) ) ) ) ) + ( IKabs ( ( r22 * sj9 ) ) ) );
                                                                                                            j11eval[2] = IKsign ( x1281 );
                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11eval[3];
                                                                                                                    sj10 = 1.0;
                                                                                                                    cj10 = 0;
                                                                                                                    j10 = 1.5707963267949;
                                                                                                                    IkReal x1282 = ( ( 1.0 ) * sj12 );
                                                                                                                    IkReal x1283 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1282 ) ) );
                                                                                                                    j11eval[0] = x1283;
                                                                                                                    j11eval[1] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r01 * x1282 ) ) + ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1282 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) );
                                                                                                                    j11eval[2] = IKsign ( x1283 );
                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                    {
                                                                                                                        continue; // 1 cases reached

                                                                                                                    } else
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                            bool j11valid[1] = {false};
                                                                                                                            _nj11 = 1;
                                                                                                                            IkReal x1284 = ( ( 1.0 ) * sj12 );
                                                                                                                            CheckValue<IkReal> x1285 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r01 * x1284 ) ) + ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1284 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                            if ( !x1285.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            CheckValue<IkReal> x1286 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1284 ) ) ) ), -1 );
                                                                                                                            if ( !x1286.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x1285.value ) + ( ( ( 1.5707963267949 ) * ( x1286.value ) ) ) );
                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                            {
                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j11valid[0] = true;
                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                            {
                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij11[0] = ij11;
                                                                                                                                _ij11[1] = -1;
                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                {
                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                    {
                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j11 = j11array[ij11];
                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[6];
                                                                                                                                    IkReal x1287 = IKsin ( j11 );
                                                                                                                                    IkReal x1288 = IKcos ( j11 );
                                                                                                                                    IkReal x1289 = ( ( 1.0 ) * cj9 );
                                                                                                                                    IkReal x1290 = ( cj7 * sj8 );
                                                                                                                                    IkReal x1291 = ( cj12 * r20 );
                                                                                                                                    IkReal x1292 = ( cj8 * sj7 );
                                                                                                                                    IkReal x1293 = ( ( 1.0 ) * sj9 );
                                                                                                                                    IkReal x1294 = ( ( 1.0 ) * x1287 );
                                                                                                                                    IkReal x1295 = ( sj12 * x1287 );
                                                                                                                                    IkReal x1296 = ( cj12 * x1288 );
                                                                                                                                    IkReal x1297 = ( ( 1.0 ) * x1288 );
                                                                                                                                    IkReal x1298 = ( sj12 * x1297 );
                                                                                                                                    evalcond[0] = ( ( ( r21 * x1295 ) ) + ( ( ( -1.0 ) * r22 * x1297 ) ) + ( ( ( -1.0 ) * x1291 * x1294 ) ) );
                                                                                                                                    evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r12 * x1297 ) ) + ( ( r11 * x1295 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1294 ) ) );
                                                                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * x1293 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1294 ) ) + ( ( ( -1.0 ) * r02 * x1297 ) ) + ( ( r01 * x1295 ) ) );
                                                                                                                                    evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r21 * x1298 ) ) + ( ( x1288 * x1291 ) ) + ( ( ( -1.0 ) * r22 * x1294 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * r01 * x1298 ) ) + ( ( ( -1.0 ) * x1289 * x1292 ) ) + ( ( ( -1.0 ) * x1289 * x1290 ) ) + ( ( ( -1.0 ) * r02 * x1294 ) ) + ( ( r00 * x1296 ) ) );
                                                                                                                                    evalcond[5] = ( ( ( ( -1.0 ) * r11 * x1298 ) ) + ( ( ( -1.0 ) * r12 * x1294 ) ) + ( ( ( -1.0 ) * x1292 * x1293 ) ) + ( ( ( -1.0 ) * x1290 * x1293 ) ) + ( ( r10 * x1296 ) ) );
                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }

                                                                                                                    }

                                                                                                                }

                                                                                                            } else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                    bool j11valid[1] = {false};
                                                                                                                    _nj11 = 1;
                                                                                                                    IkReal x1299 = ( ( 1.0 ) * cj12 );
                                                                                                                    CheckValue<IkReal> x1300 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x1299 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                                    if ( !x1300.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x1301 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1299 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x1301.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1300.value ) ) ) + ( x1301.value ) );
                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                    {
                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j11valid[0] = true;
                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                    {
                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij11[0] = ij11;
                                                                                                                        _ij11[1] = -1;
                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                        {
                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                            {
                                                                                                                                j11valid[iij11] = false;
                                                                                                                                _ij11[1] = iij11;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j11 = j11array[ij11];
                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                        {
                                                                                                                            IkReal evalcond[6];
                                                                                                                            IkReal x1302 = IKsin ( j11 );
                                                                                                                            IkReal x1303 = IKcos ( j11 );
                                                                                                                            IkReal x1304 = ( ( 1.0 ) * cj9 );
                                                                                                                            IkReal x1305 = ( cj7 * sj8 );
                                                                                                                            IkReal x1306 = ( cj12 * r20 );
                                                                                                                            IkReal x1307 = ( cj8 * sj7 );
                                                                                                                            IkReal x1308 = ( ( 1.0 ) * sj9 );
                                                                                                                            IkReal x1309 = ( ( 1.0 ) * x1302 );
                                                                                                                            IkReal x1310 = ( sj12 * x1302 );
                                                                                                                            IkReal x1311 = ( cj12 * x1303 );
                                                                                                                            IkReal x1312 = ( ( 1.0 ) * x1303 );
                                                                                                                            IkReal x1313 = ( sj12 * x1312 );
                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * x1306 * x1309 ) ) + ( ( ( -1.0 ) * r22 * x1312 ) ) + ( ( r21 * x1310 ) ) );
                                                                                                                            evalcond[1] = ( cj9 + ( ( r11 * x1310 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1309 ) ) + ( ( ( -1.0 ) * r12 * x1312 ) ) );
                                                                                                                            evalcond[2] = ( ( ( r01 * x1310 ) ) + ( ( ( -1.0 ) * x1308 ) ) + ( ( ( -1.0 ) * r02 * x1312 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1309 ) ) );
                                                                                                                            evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r22 * x1309 ) ) + ( ( x1303 * x1306 ) ) + ( ( ( -1.0 ) * r21 * x1313 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                            evalcond[4] = ( ( ( r00 * x1311 ) ) + ( ( ( -1.0 ) * r01 * x1313 ) ) + ( ( ( -1.0 ) * r02 * x1309 ) ) + ( ( ( -1.0 ) * x1304 * x1307 ) ) + ( ( ( -1.0 ) * x1304 * x1305 ) ) );
                                                                                                                            evalcond[5] = ( ( ( ( -1.0 ) * x1307 * x1308 ) ) + ( ( r10 * x1311 ) ) + ( ( ( -1.0 ) * r11 * x1313 ) ) + ( ( ( -1.0 ) * r12 * x1309 ) ) + ( ( ( -1.0 ) * x1305 * x1308 ) ) );
                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                            }

                                                                                                        }

                                                                                                    } else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                            bool j11valid[1] = {false};
                                                                                                            _nj11 = 1;
                                                                                                            IkReal x1314 = ( ( 1.0 ) * cj12 );
                                                                                                            CheckValue<IkReal> x1315 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x1314 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                                                            if ( !x1315.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x1316 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( cj9 * r21 * sj12 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x1314 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                            if ( !x1316.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1315.value ) ) ) + ( x1316.value ) );
                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                            if ( j11array[0] > IKPI )
                                                                                                            {
                                                                                                                j11array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                            {   j11array[0] += IK2PI;
                                                                                                            }
                                                                                                            j11valid[0] = true;
                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                            {
                                                                                                                if ( !j11valid[ij11] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij11[0] = ij11;
                                                                                                                _ij11[1] = -1;
                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                {
                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j11valid[iij11] = false;
                                                                                                                        _ij11[1] = iij11;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j11 = j11array[ij11];
                                                                                                                cj11 = cj11array[ij11];
                                                                                                                sj11 = sj11array[ij11];
                                                                                                                {
                                                                                                                    IkReal evalcond[6];
                                                                                                                    IkReal x1317 = IKsin ( j11 );
                                                                                                                    IkReal x1318 = IKcos ( j11 );
                                                                                                                    IkReal x1319 = ( ( 1.0 ) * cj9 );
                                                                                                                    IkReal x1320 = ( cj7 * sj8 );
                                                                                                                    IkReal x1321 = ( cj12 * r20 );
                                                                                                                    IkReal x1322 = ( cj8 * sj7 );
                                                                                                                    IkReal x1323 = ( ( 1.0 ) * sj9 );
                                                                                                                    IkReal x1324 = ( ( 1.0 ) * x1317 );
                                                                                                                    IkReal x1325 = ( sj12 * x1317 );
                                                                                                                    IkReal x1326 = ( cj12 * x1318 );
                                                                                                                    IkReal x1327 = ( ( 1.0 ) * x1318 );
                                                                                                                    IkReal x1328 = ( sj12 * x1327 );
                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1327 ) ) + ( ( ( -1.0 ) * x1321 * x1324 ) ) + ( ( r21 * x1325 ) ) );
                                                                                                                    evalcond[1] = ( cj9 + ( ( ( -1.0 ) * cj12 * r10 * x1324 ) ) + ( ( r11 * x1325 ) ) + ( ( ( -1.0 ) * r12 * x1327 ) ) );
                                                                                                                    evalcond[2] = ( ( ( r01 * x1325 ) ) + ( ( ( -1.0 ) * x1323 ) ) + ( ( ( -1.0 ) * r02 * x1327 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1324 ) ) );
                                                                                                                    evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r22 * x1324 ) ) + ( ( ( -1.0 ) * r21 * x1328 ) ) + ( ( sj7 * sj8 ) ) + ( ( x1318 * x1321 ) ) );
                                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * x1319 * x1322 ) ) + ( ( ( -1.0 ) * x1319 * x1320 ) ) + ( ( r00 * x1326 ) ) + ( ( ( -1.0 ) * r01 * x1328 ) ) + ( ( ( -1.0 ) * r02 * x1324 ) ) );
                                                                                                                    evalcond[5] = ( ( ( ( -1.0 ) * x1322 * x1323 ) ) + ( ( r10 * x1326 ) ) + ( ( ( -1.0 ) * r11 * x1328 ) ) + ( ( ( -1.0 ) * r12 * x1324 ) ) + ( ( ( -1.0 ) * x1320 * x1323 ) ) );
                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                }
                                                                                                            }
                                                                                                        }

                                                                                                    }

                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            } else
                                                                            {
                                                                                {
                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                    bool j11valid[1] = {false};
                                                                                    _nj11 = 1;
                                                                                    IkReal x1329 = cj12 * cj12;
                                                                                    IkReal x1330 = r21 * r21;
                                                                                    IkReal x1331 = ( sj7 * sj8 );
                                                                                    IkReal x1332 = ( r21 * sj12 );
                                                                                    IkReal x1333 = ( cj12 * r20 );
                                                                                    IkReal x1334 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                    CheckValue<IkReal> x1335 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * r22 * x1334 ) ) + ( ( r22 * x1331 ) ) ) ), IkReal ( ( ( ( x1331 * x1332 ) ) + ( ( cj7 * cj8 * x1333 ) ) + ( ( ( -1.0 ) * x1332 * x1334 ) ) + ( ( ( -1.0 ) * x1331 * x1333 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                    if ( !x1335.valid ) {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x1336 = IKPowWithIntegerCheck ( IKsign ( ( x1330 + ( r22 * r22 ) + ( ( x1329 * ( r20 * r20 ) ) ) + ( ( ( -2.0 ) * x1332 * x1333 ) ) + ( ( ( -1.0 ) * x1329 * x1330 ) ) ) ), -1 );
                                                                                    if ( !x1336.valid ) {
                                                                                        continue;
                                                                                    }
                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( x1335.value ) + ( ( ( 1.5707963267949 ) * ( x1336.value ) ) ) );
                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                    if ( j11array[0] > IKPI )
                                                                                    {
                                                                                        j11array[0] -= IK2PI;
                                                                                    }
                                                                                    else if ( j11array[0] < -IKPI )
                                                                                    {   j11array[0] += IK2PI;
                                                                                    }
                                                                                    j11valid[0] = true;
                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                    {
                                                                                        if ( !j11valid[ij11] )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij11[0] = ij11;
                                                                                        _ij11[1] = -1;
                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                        {
                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                            {
                                                                                                j11valid[iij11] = false;
                                                                                                _ij11[1] = iij11;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j11 = j11array[ij11];
                                                                                        cj11 = cj11array[ij11];
                                                                                        sj11 = sj11array[ij11];
                                                                                        {
                                                                                            IkReal evalcond[2];
                                                                                            IkReal x1337 = IKsin ( j11 );
                                                                                            IkReal x1338 = IKcos ( j11 );
                                                                                            IkReal x1339 = ( cj12 * r20 );
                                                                                            IkReal x1340 = ( r21 * sj12 );
                                                                                            IkReal x1341 = ( ( 1.0 ) * x1337 );
                                                                                            IkReal x1342 = ( ( 1.0 ) * x1338 );
                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * x1339 * x1341 ) ) + ( ( x1337 * x1340 ) ) + ( ( ( -1.0 ) * r22 * x1342 ) ) );
                                                                                            evalcond[1] = ( ( ( x1338 * x1339 ) ) + ( ( ( -1.0 ) * x1340 * x1342 ) ) + ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r22 * x1341 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                            bool j9valid[1] = {false};
                                                                                            _nj9 = 1;
                                                                                            IkReal x1343 = ( sj11 * sj12 );
                                                                                            IkReal x1344 = ( cj12 * sj11 );
                                                                                            if ( IKabs ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x1343 ) ) + ( ( ( -1.0 ) *r00 * x1344 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1343 ) ) + ( ( r10 * x1344 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x1343 ) ) + ( ( ( -1.0 ) *r00 * x1344 ) ) ) ) + IKsqr ( ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1343 ) ) + ( ( r10 * x1344 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                continue;
                                                                                            j9array[0] = IKatan2 ( ( ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( r01 * x1343 ) ) + ( ( ( -1.0 ) * r00 * x1344 ) ) ), ( ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) * r11 * x1343 ) ) + ( ( r10 * x1344 ) ) ) );
                                                                                            sj9array[0] = IKsin ( j9array[0] );
                                                                                            cj9array[0] = IKcos ( j9array[0] );
                                                                                            if ( j9array[0] > IKPI )
                                                                                            {
                                                                                                j9array[0] -= IK2PI;
                                                                                            }
                                                                                            else if ( j9array[0] < -IKPI )
                                                                                            {   j9array[0] += IK2PI;
                                                                                            }
                                                                                            j9valid[0] = true;
                                                                                            for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                            {
                                                                                                if ( !j9valid[ij9] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij9[0] = ij9;
                                                                                                _ij9[1] = -1;
                                                                                                for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                {
                                                                                                    if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j9valid[iij9] = false;
                                                                                                        _ij9[1] = iij9;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j9 = j9array[ij9];
                                                                                                cj9 = cj9array[ij9];
                                                                                                sj9 = sj9array[ij9];
                                                                                                {
                                                                                                    IkReal evalcond[8];
                                                                                                    IkReal x1345 = IKcos ( j9 );
                                                                                                    IkReal x1346 = IKsin ( j9 );
                                                                                                    IkReal x1347 = ( sj11 * sj12 );
                                                                                                    IkReal x1348 = ( ( 1.0 ) * sj11 );
                                                                                                    IkReal x1349 = ( cj12 * r00 );
                                                                                                    IkReal x1350 = ( cj12 * r10 );
                                                                                                    IkReal x1351 = ( ( 1.0 ) * cj8 );
                                                                                                    IkReal x1352 = ( ( 0.1157 ) * sj12 );
                                                                                                    IkReal x1353 = ( ( 1.0 ) * sj8 );
                                                                                                    IkReal x1354 = ( ( 0.5723 ) * sj8 );
                                                                                                    IkReal x1355 = ( ( 1.0 ) * cj11 );
                                                                                                    IkReal x1356 = ( cj12 * r11 );
                                                                                                    IkReal x1357 = ( cj12 * r01 );
                                                                                                    IkReal x1358 = ( sj7 * x1345 );
                                                                                                    IkReal x1359 = ( cj7 * x1346 );
                                                                                                    IkReal x1360 = ( cj8 * x1345 );
                                                                                                    IkReal x1361 = ( cj7 * x1345 );
                                                                                                    IkReal x1362 = ( sj7 * x1346 );
                                                                                                    evalcond[0] = ( x1345 + ( ( ( -1.0 ) * r12 * x1355 ) ) + ( ( ( -1.0 ) * x1348 * x1350 ) ) + ( ( r11 * x1347 ) ) );
                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * r02 * x1355 ) ) + ( ( ( -1.0 ) * x1348 * x1349 ) ) + ( ( r01 * x1347 ) ) + ( ( ( -1.0 ) * x1346 ) ) );
                                                                                                    evalcond[2] = ( x1357 + ( ( sj8 * x1358 ) ) + ( ( r00 * sj12 ) ) + ( ( ( -1.0 ) * x1351 * x1361 ) ) );
                                                                                                    evalcond[3] = ( x1356 + ( ( sj8 * x1362 ) ) + ( ( r10 * sj12 ) ) + ( ( ( -1.0 ) * x1351 * x1359 ) ) );
                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * x1353 * x1361 ) ) + ( ( cj11 * x1349 ) ) + ( ( ( -1.0 ) * r02 * x1348 ) ) + ( ( ( -1.0 ) * r01 * sj12 * x1355 ) ) + ( ( ( -1.0 ) * x1351 * x1358 ) ) );
                                                                                                    evalcond[5] = ( ( ( cj11 * x1350 ) ) + ( ( ( -1.0 ) * r12 * x1348 ) ) + ( ( ( -1.0 ) * r11 * sj12 * x1355 ) ) + ( ( ( -1.0 ) * x1351 * x1362 ) ) + ( ( ( -1.0 ) * x1353 * x1359 ) ) );
                                                                                                    evalcond[6] = ( ( ( ( 0.5723 ) * cj7 * x1360 ) ) + ( ( ( -0.1157 ) * x1357 ) ) + ( ( ( -1.0 ) * x1354 * x1358 ) ) + ( ( ( -0.163941 ) * x1346 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( 0.612 ) * x1360 ) ) + ( ( ( -1.0 ) * r00 * x1352 ) ) );
                                                                                                    evalcond[7] = ( ( ( ( -1.0 ) * r10 * x1352 ) ) + ( ( ( 0.5723 ) * cj8 * x1359 ) ) + ( ( ( -0.1157 ) * x1356 ) ) + ( ( ( -1.0 ) * x1354 * x1362 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.163941 ) * x1345 ) ) + ( ( ( 0.612 ) * cj8 * x1346 ) ) );
                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j9;
                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j8;
                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j7;
                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j10;
                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j11;
                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j12;
                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }
                                                                                }

                                                                            }

                                                                        }

                                                                    } else
                                                                    {
                                                                        {
                                                                            IkReal j9array[1], cj9array[1], sj9array[1];
                                                                            bool j9valid[1] = {false};
                                                                            _nj9 = 1;
                                                                            IkReal x1363 = ( ( 1.0 ) * cj12 );
                                                                            IkReal x1364 = ( ( 1.0 ) * sj12 );
                                                                            CheckValue<IkReal> x1365 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * r11 * x1363 ) ) + ( ( ( -1.0 ) * r10 * x1364 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * r01 * x1363 ) ) + ( ( ( -1.0 ) * r00 * x1364 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                            if ( !x1365.valid ) {
                                                                                continue;
                                                                            }
                                                                            CheckValue<IkReal> x1366 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) ) ), -1 );
                                                                            if ( !x1366.valid ) {
                                                                                continue;
                                                                            }
                                                                            j9array[0] = ( ( -1.5707963267949 ) + ( x1365.value ) + ( ( ( 1.5707963267949 ) * ( x1366.value ) ) ) );
                                                                            sj9array[0] = IKsin ( j9array[0] );
                                                                            cj9array[0] = IKcos ( j9array[0] );
                                                                            if ( j9array[0] > IKPI )
                                                                            {
                                                                                j9array[0] -= IK2PI;
                                                                            }
                                                                            else if ( j9array[0] < -IKPI )
                                                                            {   j9array[0] += IK2PI;
                                                                            }
                                                                            j9valid[0] = true;
                                                                            for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                            {
                                                                                if ( !j9valid[ij9] )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                                _ij9[0] = ij9;
                                                                                _ij9[1] = -1;
                                                                                for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                {
                                                                                    if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                    {
                                                                                        j9valid[iij9] = false;
                                                                                        _ij9[1] = iij9;
                                                                                        break;
                                                                                    }
                                                                                }
                                                                                j9 = j9array[ij9];
                                                                                cj9 = cj9array[ij9];
                                                                                sj9 = sj9array[ij9];
                                                                                {
                                                                                    IkReal evalcond[4];
                                                                                    IkReal x1367 = IKcos ( j9 );
                                                                                    IkReal x1368 = IKsin ( j9 );
                                                                                    IkReal x1369 = ( ( 0.1157 ) * sj12 );
                                                                                    IkReal x1370 = ( sj7 * sj8 );
                                                                                    IkReal x1371 = ( ( 0.612 ) * cj8 );
                                                                                    IkReal x1372 = ( cj12 * r11 );
                                                                                    IkReal x1373 = ( cj7 * cj8 );
                                                                                    IkReal x1374 = ( cj12 * r01 );
                                                                                    IkReal x1375 = ( ( 0.5723 ) * x1367 );
                                                                                    IkReal x1376 = ( x1368 * x1373 );
                                                                                    evalcond[0] = ( x1374 + ( ( x1367 * x1370 ) ) + ( ( ( -1.0 ) * x1367 * x1373 ) ) + ( ( r00 * sj12 ) ) );
                                                                                    evalcond[1] = ( x1372 + ( ( ( -1.0 ) * x1376 ) ) + ( ( x1368 * x1370 ) ) + ( ( r10 * sj12 ) ) );
                                                                                    evalcond[2] = ( ( ( ( -0.1157 ) * x1374 ) ) + ( ( ( -0.163941 ) * x1368 ) ) + ( ( ( -1.0 ) * x1370 * x1375 ) ) + ( ( x1367 * x1371 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * r00 * x1369 ) ) + ( ( x1373 * x1375 ) ) );
                                                                                    evalcond[3] = ( ( ( ( -0.1157 ) * x1372 ) ) + ( ( ( 0.163941 ) * x1367 ) ) + ( ( ( 0.5723 ) * x1376 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( x1368 * x1371 ) ) + ( ( ( -0.5723 ) * x1368 * x1370 ) ) + ( ( ( -1.0 ) * r10 * x1369 ) ) );
                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                }

                                                                                {
                                                                                    IkReal j11eval[3];
                                                                                    sj10 = 1.0;
                                                                                    cj10 = 0;
                                                                                    j10 = 1.5707963267949;
                                                                                    IkReal x1377 = ( ( 1.0 ) * cj12 );
                                                                                    IkReal x1378 = ( ( ( ( -1.0 ) * r01 * x1377 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                                    j11eval[0] = x1378;
                                                                                    j11eval[1] = IKsign ( x1378 );
                                                                                    j11eval[2] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r20 * x1377 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ) ) );
                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j11eval[3];
                                                                                            sj10 = 1.0;
                                                                                            cj10 = 0;
                                                                                            j10 = 1.5707963267949;
                                                                                            IkReal x1379 = ( ( 1.0 ) * cj12 );
                                                                                            IkReal x1380 = ( ( ( ( -1.0 ) * r11 * x1379 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) );
                                                                                            j11eval[0] = x1380;
                                                                                            j11eval[1] = ( ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1379 ) ) ) ) ) + ( IKabs ( ( r22 * sj9 ) ) ) );
                                                                                            j11eval[2] = IKsign ( x1380 );
                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j11eval[3];
                                                                                                    sj10 = 1.0;
                                                                                                    cj10 = 0;
                                                                                                    j10 = 1.5707963267949;
                                                                                                    IkReal x1381 = ( ( 1.0 ) * sj12 );
                                                                                                    IkReal x1382 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1381 ) ) );
                                                                                                    j11eval[0] = x1382;
                                                                                                    j11eval[1] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) + ( IKabs ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1381 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1381 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ) ) );
                                                                                                    j11eval[2] = IKsign ( x1382 );
                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                    {
                                                                                                        continue; // 1 cases reached

                                                                                                    } else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                            bool j11valid[1] = {false};
                                                                                                            _nj11 = 1;
                                                                                                            IkReal x1383 = ( ( 1.0 ) * sj12 );
                                                                                                            CheckValue<IkReal> x1384 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1383 ) ) ) ), -1 );
                                                                                                            if ( !x1384.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x1385 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1383 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1383 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                            if ( !x1385.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1384.value ) ) ) + ( x1385.value ) );
                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                            if ( j11array[0] > IKPI )
                                                                                                            {
                                                                                                                j11array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                            {   j11array[0] += IK2PI;
                                                                                                            }
                                                                                                            j11valid[0] = true;
                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                            {
                                                                                                                if ( !j11valid[ij11] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij11[0] = ij11;
                                                                                                                _ij11[1] = -1;
                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                {
                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j11valid[iij11] = false;
                                                                                                                        _ij11[1] = iij11;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j11 = j11array[ij11];
                                                                                                                cj11 = cj11array[ij11];
                                                                                                                sj11 = sj11array[ij11];
                                                                                                                {
                                                                                                                    IkReal evalcond[6];
                                                                                                                    IkReal x1386 = IKsin ( j11 );
                                                                                                                    IkReal x1387 = IKcos ( j11 );
                                                                                                                    IkReal x1388 = ( ( 1.0 ) * cj9 );
                                                                                                                    IkReal x1389 = ( cj7 * sj8 );
                                                                                                                    IkReal x1390 = ( cj12 * r20 );
                                                                                                                    IkReal x1391 = ( cj8 * sj7 );
                                                                                                                    IkReal x1392 = ( ( 1.0 ) * sj9 );
                                                                                                                    IkReal x1393 = ( ( 1.0 ) * x1386 );
                                                                                                                    IkReal x1394 = ( sj12 * x1386 );
                                                                                                                    IkReal x1395 = ( cj12 * x1387 );
                                                                                                                    IkReal x1396 = ( ( 1.0 ) * x1387 );
                                                                                                                    IkReal x1397 = ( sj12 * x1396 );
                                                                                                                    evalcond[0] = ( ( ( r21 * x1394 ) ) + ( ( ( -1.0 ) * x1390 * x1393 ) ) + ( ( ( -1.0 ) * r22 * x1396 ) ) );
                                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * cj12 * r10 * x1393 ) ) + ( ( ( -1.0 ) * r12 * x1396 ) ) + cj9 + ( ( r11 * x1394 ) ) );
                                                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * r02 * x1396 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1393 ) ) + ( ( r01 * x1394 ) ) + ( ( ( -1.0 ) * x1392 ) ) );
                                                                                                                    evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r21 * x1397 ) ) + ( ( x1387 * x1390 ) ) + ( ( ( -1.0 ) * r22 * x1393 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * r02 * x1393 ) ) + ( ( ( -1.0 ) * r01 * x1397 ) ) + ( ( ( -1.0 ) * x1388 * x1391 ) ) + ( ( r00 * x1395 ) ) + ( ( ( -1.0 ) * x1388 * x1389 ) ) );
                                                                                                                    evalcond[5] = ( ( ( ( -1.0 ) * r12 * x1393 ) ) + ( ( r10 * x1395 ) ) + ( ( ( -1.0 ) * x1389 * x1392 ) ) + ( ( ( -1.0 ) * x1391 * x1392 ) ) + ( ( ( -1.0 ) * r11 * x1397 ) ) );
                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                }
                                                                                                            }
                                                                                                        }

                                                                                                    }

                                                                                                }

                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                    bool j11valid[1] = {false};
                                                                                                    _nj11 = 1;
                                                                                                    IkReal x1398 = ( ( 1.0 ) * cj12 );
                                                                                                    CheckValue<IkReal> x1399 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r10 * sj12 ) ) + ( ( ( -1.0 ) * r11 * x1398 ) ) ) ), -1 );
                                                                                                    if ( !x1399.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x1400 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1398 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                    if ( !x1400.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1399.value ) ) ) + ( x1400.value ) );
                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                    if ( j11array[0] > IKPI )
                                                                                                    {
                                                                                                        j11array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                    {   j11array[0] += IK2PI;
                                                                                                    }
                                                                                                    j11valid[0] = true;
                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                    {
                                                                                                        if ( !j11valid[ij11] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij11[0] = ij11;
                                                                                                        _ij11[1] = -1;
                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                        {
                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j11valid[iij11] = false;
                                                                                                                _ij11[1] = iij11;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j11 = j11array[ij11];
                                                                                                        cj11 = cj11array[ij11];
                                                                                                        sj11 = sj11array[ij11];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x1401 = IKsin ( j11 );
                                                                                                            IkReal x1402 = IKcos ( j11 );
                                                                                                            IkReal x1403 = ( ( 1.0 ) * cj9 );
                                                                                                            IkReal x1404 = ( cj7 * sj8 );
                                                                                                            IkReal x1405 = ( cj12 * r20 );
                                                                                                            IkReal x1406 = ( cj8 * sj7 );
                                                                                                            IkReal x1407 = ( ( 1.0 ) * sj9 );
                                                                                                            IkReal x1408 = ( ( 1.0 ) * x1401 );
                                                                                                            IkReal x1409 = ( sj12 * x1401 );
                                                                                                            IkReal x1410 = ( cj12 * x1402 );
                                                                                                            IkReal x1411 = ( ( 1.0 ) * x1402 );
                                                                                                            IkReal x1412 = ( sj12 * x1411 );
                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1411 ) ) + ( ( ( -1.0 ) * x1405 * x1408 ) ) + ( ( r21 * x1409 ) ) );
                                                                                                            evalcond[1] = ( cj9 + ( ( r11 * x1409 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1408 ) ) + ( ( ( -1.0 ) * r12 * x1411 ) ) );
                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * r02 * x1411 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1408 ) ) + ( ( ( -1.0 ) * x1407 ) ) + ( ( r01 * x1409 ) ) );
                                                                                                            evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r22 * x1408 ) ) + ( ( ( -1.0 ) * r21 * x1412 ) ) + ( ( sj7 * sj8 ) ) + ( ( x1402 * x1405 ) ) );
                                                                                                            evalcond[4] = ( ( ( ( -1.0 ) * r02 * x1408 ) ) + ( ( r00 * x1410 ) ) + ( ( ( -1.0 ) * r01 * x1412 ) ) + ( ( ( -1.0 ) * x1403 * x1406 ) ) + ( ( ( -1.0 ) * x1403 * x1404 ) ) );
                                                                                                            evalcond[5] = ( ( ( ( -1.0 ) * r12 * x1408 ) ) + ( ( ( -1.0 ) * x1406 * x1407 ) ) + ( ( ( -1.0 ) * x1404 * x1407 ) ) + ( ( ( -1.0 ) * r11 * x1412 ) ) + ( ( r10 * x1410 ) ) );
                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j9;
                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j8;
                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j7;
                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j10;
                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j11;
                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j12;
                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                            bool j11valid[1] = {false};
                                                                                            _nj11 = 1;
                                                                                            IkReal x1413 = ( ( 1.0 ) * cj12 );
                                                                                            CheckValue<IkReal> x1414 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r00 * sj12 ) ) + ( ( ( -1.0 ) * r01 * x1413 ) ) ) ), -1 );
                                                                                            if ( !x1414.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x1415 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x1413 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                            if ( !x1415.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1414.value ) ) ) + ( x1415.value ) );
                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                            if ( j11array[0] > IKPI )
                                                                                            {
                                                                                                j11array[0] -= IK2PI;
                                                                                            }
                                                                                            else if ( j11array[0] < -IKPI )
                                                                                            {   j11array[0] += IK2PI;
                                                                                            }
                                                                                            j11valid[0] = true;
                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                            {
                                                                                                if ( !j11valid[ij11] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij11[0] = ij11;
                                                                                                _ij11[1] = -1;
                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                {
                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j11valid[iij11] = false;
                                                                                                        _ij11[1] = iij11;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j11 = j11array[ij11];
                                                                                                cj11 = cj11array[ij11];
                                                                                                sj11 = sj11array[ij11];
                                                                                                {
                                                                                                    IkReal evalcond[6];
                                                                                                    IkReal x1416 = IKsin ( j11 );
                                                                                                    IkReal x1417 = IKcos ( j11 );
                                                                                                    IkReal x1418 = ( ( 1.0 ) * cj9 );
                                                                                                    IkReal x1419 = ( cj7 * sj8 );
                                                                                                    IkReal x1420 = ( cj12 * r20 );
                                                                                                    IkReal x1421 = ( cj8 * sj7 );
                                                                                                    IkReal x1422 = ( ( 1.0 ) * sj9 );
                                                                                                    IkReal x1423 = ( ( 1.0 ) * x1416 );
                                                                                                    IkReal x1424 = ( sj12 * x1416 );
                                                                                                    IkReal x1425 = ( cj12 * x1417 );
                                                                                                    IkReal x1426 = ( ( 1.0 ) * x1417 );
                                                                                                    IkReal x1427 = ( sj12 * x1426 );
                                                                                                    evalcond[0] = ( ( ( r21 * x1424 ) ) + ( ( ( -1.0 ) * x1420 * x1423 ) ) + ( ( ( -1.0 ) * r22 * x1426 ) ) );
                                                                                                    evalcond[1] = ( ( ( r11 * x1424 ) ) + cj9 + ( ( ( -1.0 ) * cj12 * r10 * x1423 ) ) + ( ( ( -1.0 ) * r12 * x1426 ) ) );
                                                                                                    evalcond[2] = ( ( ( r01 * x1424 ) ) + ( ( ( -1.0 ) * r02 * x1426 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1423 ) ) + ( ( ( -1.0 ) * x1422 ) ) );
                                                                                                    evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r21 * x1427 ) ) + ( ( ( -1.0 ) * r22 * x1423 ) ) + ( ( sj7 * sj8 ) ) + ( ( x1417 * x1420 ) ) );
                                                                                                    evalcond[4] = ( ( ( r00 * x1425 ) ) + ( ( ( -1.0 ) * x1418 * x1421 ) ) + ( ( ( -1.0 ) * x1418 * x1419 ) ) + ( ( ( -1.0 ) * r01 * x1427 ) ) + ( ( ( -1.0 ) * r02 * x1423 ) ) );
                                                                                                    evalcond[5] = ( ( ( ( -1.0 ) * x1421 * x1422 ) ) + ( ( ( -1.0 ) * r11 * x1427 ) ) + ( ( ( -1.0 ) * r12 * x1423 ) ) + ( ( r10 * x1425 ) ) + ( ( ( -1.0 ) * x1419 * x1422 ) ) );
                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                    vinfos[0].jointtype = 1;
                                                                                                    vinfos[0].foffset = j9;
                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                    vinfos[1].jointtype = 1;
                                                                                                    vinfos[1].foffset = j8;
                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                    vinfos[2].jointtype = 1;
                                                                                                    vinfos[2].foffset = j7;
                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                    vinfos[3].jointtype = 1;
                                                                                                    vinfos[3].foffset = j10;
                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                    vinfos[4].jointtype = 1;
                                                                                                    vinfos[4].foffset = j11;
                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                    vinfos[5].jointtype = 1;
                                                                                                    vinfos[5].foffset = j12;
                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }
                                                                            }
                                                                        }

                                                                    }

                                                                }

                                                            }
                                                        } while ( 0 );
                                                        if ( bgotonextstatement )
                                                        {
                                                            bool bgotonextstatement = true;
                                                            do
                                                            {
                                                                evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( 1.5707963267949 ) + j10 ) ) ) ), 6.28318530717959 ) ) );
                                                                if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                {
                                                                    bgotonextstatement = false;
                                                                    {
                                                                        IkReal j9eval[3];
                                                                        sj10 = -1.0;
                                                                        cj10 = 0;
                                                                        j10 = -1.5707963267949;
                                                                        IkReal x1428 = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) );
                                                                        j9eval[0] = x1428;
                                                                        j9eval[1] = IKsign ( x1428 );
                                                                        j9eval[2] = ( ( IKabs ( ( ( ( r10 * sj12 ) ) + ( ( cj12 * r11 ) ) ) ) ) + ( IKabs ( ( ( ( r00 * sj12 ) ) + ( ( cj12 * r01 ) ) ) ) ) );
                                                                        if ( IKabs ( j9eval[0] ) < 0.0000010000000000  || IKabs ( j9eval[1] ) < 0.0000010000000000  || IKabs ( j9eval[2] ) < 0.0000010000000000  )
                                                                        {
                                                                            {
                                                                                IkReal j11eval[3];
                                                                                sj10 = -1.0;
                                                                                cj10 = 0;
                                                                                j10 = -1.5707963267949;
                                                                                IkReal x1429 = cj12 * cj12;
                                                                                IkReal x1430 = r21 * r21;
                                                                                IkReal x1431 = ( sj7 * sj8 );
                                                                                IkReal x1432 = ( r21 * sj12 );
                                                                                IkReal x1433 = ( cj12 * r20 );
                                                                                IkReal x1434 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                IkReal x1435 = ( ( ( x1429 * x1430 ) ) + ( ( ( -1.0 ) * x1430 ) ) + ( ( ( -1.0 ) * x1429 * ( r20 * r20 ) ) ) + ( ( ( -1.0 ) * ( r22 * r22 ) ) ) + ( ( ( 2.0 ) * x1432 * x1433 ) ) );
                                                                                j11eval[0] = x1435;
                                                                                j11eval[1] = IKsign ( x1435 );
                                                                                j11eval[2] = ( ( IKabs ( ( ( ( ( -1.0 ) * r22 * x1434 ) ) + ( ( r22 * x1431 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * x1431 * x1433 ) ) + ( ( cj7 * cj8 * x1433 ) ) + ( ( ( -1.0 ) * x1432 * x1434 ) ) + ( ( x1431 * x1432 ) ) ) ) ) );
                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j9eval[1];
                                                                                        sj10 = -1.0;
                                                                                        cj10 = 0;
                                                                                        j10 = -1.5707963267949;
                                                                                        j9eval[0] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                        if ( IKabs ( j9eval[0] ) < 0.0000010000000000  )
                                                                                        {
                                                                                            continue; // 1 cases reached

                                                                                        } else
                                                                                        {
                                                                                            {
                                                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                bool j9valid[1] = {false};
                                                                                                _nj9 = 1;
                                                                                                IkReal x1436 = ( cj7 * cj8 );
                                                                                                IkReal x1437 = ( ( 1000000.0 ) * px );
                                                                                                IkReal x1438 = ( sj7 * sj8 );
                                                                                                IkReal x1439 = ( ( 612000.0 ) * cj8 );
                                                                                                IkReal x1440 = ( r00 * sj12 );
                                                                                                IkReal x1441 = ( cj12 * r01 );
                                                                                                IkReal x1442 = ( ( 688000.0 ) * x1441 );
                                                                                                IkReal x1443 = ( ( 688000.0 ) * x1440 );
                                                                                                CheckValue<IkReal> x1444 = IKPowWithIntegerCheck ( ( ( ( ( 163941.0 ) * x1438 ) ) + ( ( ( -163941.0 ) * x1436 ) ) ), -1 );
                                                                                                if ( !x1444.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x1445 = IKPowWithIntegerCheck ( ( ( ( ( -1.0 ) * x1436 ) ) + x1438 ), -1 );
                                                                                                if ( !x1445.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                if ( IKabs ( ( ( x1444.value ) * ( ( ( ( ( -1.0 ) *x1437 * x1438 ) ) + ( ( x1436 * x1437 ) ) + ( ( x1439 * x1441 ) ) + ( ( x1439 * x1440 ) ) + ( ( ( -1.0 ) *x1438 * x1443 ) ) + ( ( ( -1.0 ) *x1438 * x1442 ) ) + ( ( x1436 * x1443 ) ) + ( ( x1436 * x1442 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( x1445.value ) * ( ( x1441 + x1440 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( x1444.value ) * ( ( ( ( ( -1.0 ) *x1437 * x1438 ) ) + ( ( x1436 * x1437 ) ) + ( ( x1439 * x1441 ) ) + ( ( x1439 * x1440 ) ) + ( ( ( -1.0 ) *x1438 * x1443 ) ) + ( ( ( -1.0 ) *x1438 * x1442 ) ) + ( ( x1436 * x1443 ) ) + ( ( x1436 * x1442 ) ) ) ) ) ) + IKsqr ( ( ( x1445.value ) * ( ( x1441 + x1440 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                    continue;
                                                                                                j9array[0] = IKatan2 ( ( ( x1444.value ) * ( ( ( ( ( -1.0 ) * x1437 * x1438 ) ) + ( ( x1436 * x1437 ) ) + ( ( x1439 * x1441 ) ) + ( ( x1439 * x1440 ) ) + ( ( ( -1.0 ) * x1438 * x1443 ) ) + ( ( ( -1.0 ) * x1438 * x1442 ) ) + ( ( x1436 * x1443 ) ) + ( ( x1436 * x1442 ) ) ) ) ), ( ( x1445.value ) * ( ( x1441 + x1440 ) ) ) );
                                                                                                sj9array[0] = IKsin ( j9array[0] );
                                                                                                cj9array[0] = IKcos ( j9array[0] );
                                                                                                if ( j9array[0] > IKPI )
                                                                                                {
                                                                                                    j9array[0] -= IK2PI;
                                                                                                }
                                                                                                else if ( j9array[0] < -IKPI )
                                                                                                {   j9array[0] += IK2PI;
                                                                                                }
                                                                                                j9valid[0] = true;
                                                                                                for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                                {
                                                                                                    if ( !j9valid[ij9] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij9[0] = ij9;
                                                                                                    _ij9[1] = -1;
                                                                                                    for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                    {
                                                                                                        if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j9valid[iij9] = false;
                                                                                                            _ij9[1] = iij9;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j9 = j9array[ij9];
                                                                                                    cj9 = cj9array[ij9];
                                                                                                    sj9 = sj9array[ij9];
                                                                                                    {
                                                                                                        IkReal evalcond[4];
                                                                                                        IkReal x1446 = IKcos ( j9 );
                                                                                                        IkReal x1447 = IKsin ( j9 );
                                                                                                        IkReal x1448 = ( ( 1.0 ) * sj12 );
                                                                                                        IkReal x1449 = ( ( 0.1157 ) * sj12 );
                                                                                                        IkReal x1450 = ( sj7 * sj8 );
                                                                                                        IkReal x1451 = ( ( 1.0 ) * cj7 );
                                                                                                        IkReal x1452 = ( ( 1.0 ) * cj12 );
                                                                                                        IkReal x1453 = ( ( 0.1157 ) * cj12 );
                                                                                                        IkReal x1454 = ( ( 0.5723 ) * x1446 );
                                                                                                        IkReal x1455 = ( cj8 * x1447 );
                                                                                                        IkReal x1456 = ( cj8 * x1446 );
                                                                                                        evalcond[0] = ( ( ( x1446 * x1450 ) ) + ( ( ( -1.0 ) * r00 * x1448 ) ) + ( ( ( -1.0 ) * r01 * x1452 ) ) + ( ( ( -1.0 ) * x1451 * x1456 ) ) );
                                                                                                        evalcond[1] = ( ( ( x1447 * x1450 ) ) + ( ( ( -1.0 ) * r10 * x1448 ) ) + ( ( ( -1.0 ) * x1451 * x1455 ) ) + ( ( ( -1.0 ) * r11 * x1452 ) ) );
                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * r00 * x1449 ) ) + ( ( ( -0.163941 ) * x1447 ) ) + ( ( ( 0.612 ) * x1456 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * r01 * x1453 ) ) + ( ( cj7 * cj8 * x1454 ) ) + ( ( ( -1.0 ) * x1450 * x1454 ) ) );
                                                                                                        evalcond[3] = ( ( ( ( -0.5723 ) * x1447 * x1450 ) ) + ( ( ( -1.0 ) * r10 * x1449 ) ) + ( ( ( 0.612 ) * x1455 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.5723 ) * cj7 * x1455 ) ) + ( ( ( 0.163941 ) * x1446 ) ) + ( ( ( -1.0 ) * r11 * x1453 ) ) );
                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j11eval[3];
                                                                                                        sj10 = -1.0;
                                                                                                        cj10 = 0;
                                                                                                        j10 = -1.5707963267949;
                                                                                                        IkReal x1457 = ( ( 1.0 ) * cj12 );
                                                                                                        IkReal x1458 = ( ( ( ( -1.0 ) * r01 * x1457 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                                                        j11eval[0] = x1458;
                                                                                                        j11eval[1] = IKsign ( x1458 );
                                                                                                        j11eval[2] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r20 * x1457 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ) ) );
                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j11eval[3];
                                                                                                                sj10 = -1.0;
                                                                                                                cj10 = 0;
                                                                                                                j10 = -1.5707963267949;
                                                                                                                IkReal x1459 = ( ( 1.0 ) * cj12 );
                                                                                                                IkReal x1460 = ( ( ( ( -1.0 ) * r10 * sj12 ) ) + ( ( ( -1.0 ) * r11 * x1459 ) ) );
                                                                                                                j11eval[0] = x1460;
                                                                                                                j11eval[1] = ( ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1459 ) ) ) ) ) + ( IKabs ( ( r22 * sj9 ) ) ) );
                                                                                                                j11eval[2] = IKsign ( x1460 );
                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11eval[3];
                                                                                                                        sj10 = -1.0;
                                                                                                                        cj10 = 0;
                                                                                                                        j10 = -1.5707963267949;
                                                                                                                        IkReal x1461 = ( ( 1.0 ) * sj12 );
                                                                                                                        IkReal x1462 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1461 ) ) );
                                                                                                                        j11eval[0] = x1462;
                                                                                                                        j11eval[1] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) + ( IKabs ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1461 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1461 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ) ) );
                                                                                                                        j11eval[2] = IKsign ( x1462 );
                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                        {
                                                                                                                            continue; // 1 cases reached

                                                                                                                        } else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                _nj11 = 1;
                                                                                                                                IkReal x1463 = ( ( 1.0 ) * sj12 );
                                                                                                                                CheckValue<IkReal> x1464 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1463 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1463 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                if ( !x1464.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x1465 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1463 ) ) ) ), -1 );
                                                                                                                                if ( !x1465.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x1464.value ) + ( ( ( 1.5707963267949 ) * ( x1465.value ) ) ) );
                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                {
                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j11valid[0] = true;
                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                {
                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                    _ij11[1] = -1;
                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                    {
                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                        {
                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[6];
                                                                                                                                        IkReal x1466 = IKsin ( j11 );
                                                                                                                                        IkReal x1467 = IKcos ( j11 );
                                                                                                                                        IkReal x1468 = ( ( 1.0 ) * cj9 );
                                                                                                                                        IkReal x1469 = ( cj7 * sj8 );
                                                                                                                                        IkReal x1470 = ( ( 1.0 ) * cj12 );
                                                                                                                                        IkReal x1471 = ( r01 * sj12 );
                                                                                                                                        IkReal x1472 = ( r11 * sj12 );
                                                                                                                                        IkReal x1473 = ( cj8 * sj7 );
                                                                                                                                        IkReal x1474 = ( ( 1.0 ) * sj9 );
                                                                                                                                        IkReal x1475 = ( r21 * sj12 );
                                                                                                                                        IkReal x1476 = ( ( 1.0 ) * x1467 );
                                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1476 ) ) + ( ( x1466 * x1475 ) ) + ( ( ( -1.0 ) * r20 * x1466 * x1470 ) ) );
                                                                                                                                        evalcond[1] = ( ( ( x1466 * x1472 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x1476 ) ) + ( ( ( -1.0 ) * r10 * x1466 * x1470 ) ) );
                                                                                                                                        evalcond[2] = ( ( ( x1466 * x1471 ) ) + ( ( ( -1.0 ) * r00 * x1466 * x1470 ) ) + ( ( ( -1.0 ) * x1474 ) ) + ( ( ( -1.0 ) * r02 * x1476 ) ) );
                                                                                                                                        evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( x1467 * x1475 ) ) + ( ( r22 * x1466 ) ) + ( ( ( -1.0 ) * r20 * x1467 * x1470 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * r00 * x1467 * x1470 ) ) + ( ( x1467 * x1471 ) ) + ( ( ( -1.0 ) * x1468 * x1473 ) ) + ( ( r02 * x1466 ) ) + ( ( ( -1.0 ) * x1468 * x1469 ) ) );
                                                                                                                                        evalcond[5] = ( ( ( x1467 * x1472 ) ) + ( ( r12 * x1466 ) ) + ( ( ( -1.0 ) * x1469 * x1474 ) ) + ( ( ( -1.0 ) * x1473 * x1474 ) ) + ( ( ( -1.0 ) * r10 * x1467 * x1470 ) ) );
                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }

                                                                                                                        }

                                                                                                                    }

                                                                                                                } else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                        bool j11valid[1] = {false};
                                                                                                                        _nj11 = 1;
                                                                                                                        IkReal x1477 = ( ( 1.0 ) * cj12 );
                                                                                                                        CheckValue<IkReal> x1478 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1477 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x1478.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x1479 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x1477 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                                        if ( !x1479.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x1478.value ) + ( ( ( 1.5707963267949 ) * ( x1479.value ) ) ) );
                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                        {
                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j11valid[0] = true;
                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                        {
                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij11[0] = ij11;
                                                                                                                            _ij11[1] = -1;
                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                            {
                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                {
                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j11 = j11array[ij11];
                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                            {
                                                                                                                                IkReal evalcond[6];
                                                                                                                                IkReal x1480 = IKsin ( j11 );
                                                                                                                                IkReal x1481 = IKcos ( j11 );
                                                                                                                                IkReal x1482 = ( ( 1.0 ) * cj9 );
                                                                                                                                IkReal x1483 = ( cj7 * sj8 );
                                                                                                                                IkReal x1484 = ( ( 1.0 ) * cj12 );
                                                                                                                                IkReal x1485 = ( r01 * sj12 );
                                                                                                                                IkReal x1486 = ( r11 * sj12 );
                                                                                                                                IkReal x1487 = ( cj8 * sj7 );
                                                                                                                                IkReal x1488 = ( ( 1.0 ) * sj9 );
                                                                                                                                IkReal x1489 = ( r21 * sj12 );
                                                                                                                                IkReal x1490 = ( ( 1.0 ) * x1481 );
                                                                                                                                evalcond[0] = ( ( ( x1480 * x1489 ) ) + ( ( ( -1.0 ) * r20 * x1480 * x1484 ) ) + ( ( ( -1.0 ) * r22 * x1490 ) ) );
                                                                                                                                evalcond[1] = ( ( ( ( -1.0 ) * r10 * x1480 * x1484 ) ) + ( ( ( -1.0 ) * r12 * x1490 ) ) + cj9 + ( ( x1480 * x1486 ) ) );
                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * r00 * x1480 * x1484 ) ) + ( ( ( -1.0 ) * x1488 ) ) + ( ( x1480 * x1485 ) ) + ( ( ( -1.0 ) * r02 * x1490 ) ) );
                                                                                                                                evalcond[3] = ( ( ( ( -1.0 ) * r20 * x1481 * x1484 ) ) + ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( x1481 * x1489 ) ) + ( ( r22 * x1480 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * x1482 * x1483 ) ) + ( ( ( -1.0 ) * x1482 * x1487 ) ) + ( ( ( -1.0 ) * r00 * x1481 * x1484 ) ) + ( ( x1481 * x1485 ) ) + ( ( r02 * x1480 ) ) );
                                                                                                                                evalcond[5] = ( ( ( ( -1.0 ) * x1487 * x1488 ) ) + ( ( ( -1.0 ) * r10 * x1481 * x1484 ) ) + ( ( r12 * x1480 ) ) + ( ( x1481 * x1486 ) ) + ( ( ( -1.0 ) * x1483 * x1488 ) ) );
                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }

                                                                                                                }

                                                                                                            }

                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                bool j11valid[1] = {false};
                                                                                                                _nj11 = 1;
                                                                                                                IkReal x1491 = ( ( 1.0 ) * cj12 );
                                                                                                                CheckValue<IkReal> x1492 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x1491 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                                                                if ( !x1492.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x1493 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( cj9 * r21 * sj12 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x1491 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                if ( !x1493.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1492.value ) ) ) + ( x1493.value ) );
                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                {
                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                }
                                                                                                                j11valid[0] = true;
                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                {
                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij11[0] = ij11;
                                                                                                                    _ij11[1] = -1;
                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                    {
                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                        {
                                                                                                                            j11valid[iij11] = false;
                                                                                                                            _ij11[1] = iij11;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j11 = j11array[ij11];
                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                    {
                                                                                                                        IkReal evalcond[6];
                                                                                                                        IkReal x1494 = IKsin ( j11 );
                                                                                                                        IkReal x1495 = IKcos ( j11 );
                                                                                                                        IkReal x1496 = ( ( 1.0 ) * cj9 );
                                                                                                                        IkReal x1497 = ( cj7 * sj8 );
                                                                                                                        IkReal x1498 = ( ( 1.0 ) * cj12 );
                                                                                                                        IkReal x1499 = ( r01 * sj12 );
                                                                                                                        IkReal x1500 = ( r11 * sj12 );
                                                                                                                        IkReal x1501 = ( cj8 * sj7 );
                                                                                                                        IkReal x1502 = ( ( 1.0 ) * sj9 );
                                                                                                                        IkReal x1503 = ( r21 * sj12 );
                                                                                                                        IkReal x1504 = ( ( 1.0 ) * x1495 );
                                                                                                                        evalcond[0] = ( ( ( x1494 * x1503 ) ) + ( ( ( -1.0 ) * r22 * x1504 ) ) + ( ( ( -1.0 ) * r20 * x1494 * x1498 ) ) );
                                                                                                                        evalcond[1] = ( ( ( x1494 * x1500 ) ) + cj9 + ( ( ( -1.0 ) * r10 * x1494 * x1498 ) ) + ( ( ( -1.0 ) * r12 * x1504 ) ) );
                                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * x1502 ) ) + ( ( ( -1.0 ) * r00 * x1494 * x1498 ) ) + ( ( x1494 * x1499 ) ) + ( ( ( -1.0 ) * r02 * x1504 ) ) );
                                                                                                                        evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( x1495 * x1503 ) ) + ( ( ( -1.0 ) * r20 * x1495 * x1498 ) ) + ( ( r22 * x1494 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * x1496 * x1497 ) ) + ( ( x1495 * x1499 ) ) + ( ( ( -1.0 ) * r00 * x1495 * x1498 ) ) + ( ( ( -1.0 ) * x1496 * x1501 ) ) + ( ( r02 * x1494 ) ) );
                                                                                                                        evalcond[5] = ( ( ( r12 * x1494 ) ) + ( ( ( -1.0 ) * x1501 * x1502 ) ) + ( ( x1495 * x1500 ) ) + ( ( ( -1.0 ) * x1497 * x1502 ) ) + ( ( ( -1.0 ) * r10 * x1495 * x1498 ) ) );
                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                    }
                                                                                                                }
                                                                                                            }

                                                                                                        }

                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                } else
                                                                                {
                                                                                    {
                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                        bool j11valid[1] = {false};
                                                                                        _nj11 = 1;
                                                                                        IkReal x1505 = cj12 * cj12;
                                                                                        IkReal x1506 = r21 * r21;
                                                                                        IkReal x1507 = ( sj7 * sj8 );
                                                                                        IkReal x1508 = ( r21 * sj12 );
                                                                                        IkReal x1509 = ( cj12 * r20 );
                                                                                        IkReal x1510 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                        CheckValue<IkReal> x1511 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * r22 * x1510 ) ) + ( ( r22 * x1507 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * x1507 * x1509 ) ) + ( ( x1507 * x1508 ) ) + ( ( cj7 * cj8 * x1509 ) ) + ( ( ( -1.0 ) * x1508 * x1510 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                        if ( !x1511.valid ) {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x1512 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * x1506 ) ) + ( ( ( 2.0 ) * x1508 * x1509 ) ) + ( ( ( -1.0 ) * x1505 * ( r20 * r20 ) ) ) + ( ( ( -1.0 ) * ( r22 * r22 ) ) ) + ( ( x1505 * x1506 ) ) ) ), -1 );
                                                                                        if ( !x1512.valid ) {
                                                                                            continue;
                                                                                        }
                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x1511.value ) + ( ( ( 1.5707963267949 ) * ( x1512.value ) ) ) );
                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                        if ( j11array[0] > IKPI )
                                                                                        {
                                                                                            j11array[0] -= IK2PI;
                                                                                        }
                                                                                        else if ( j11array[0] < -IKPI )
                                                                                        {   j11array[0] += IK2PI;
                                                                                        }
                                                                                        j11valid[0] = true;
                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                        {
                                                                                            if ( !j11valid[ij11] )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij11[0] = ij11;
                                                                                            _ij11[1] = -1;
                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                            {
                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                {
                                                                                                    j11valid[iij11] = false;
                                                                                                    _ij11[1] = iij11;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j11 = j11array[ij11];
                                                                                            cj11 = cj11array[ij11];
                                                                                            sj11 = sj11array[ij11];
                                                                                            {
                                                                                                IkReal evalcond[2];
                                                                                                IkReal x1513 = IKsin ( j11 );
                                                                                                IkReal x1514 = IKcos ( j11 );
                                                                                                IkReal x1515 = ( r21 * sj12 );
                                                                                                IkReal x1516 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                evalcond[0] = ( ( ( x1513 * x1515 ) ) + ( ( ( -1.0 ) * x1513 * x1516 ) ) + ( ( ( -1.0 ) * r22 * x1514 ) ) );
                                                                                                evalcond[1] = ( ( ( x1514 * x1515 ) ) + ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * x1514 * x1516 ) ) + ( ( r22 * x1513 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                bool j9valid[1] = {false};
                                                                                                _nj9 = 1;
                                                                                                IkReal x1517 = ( sj11 * sj12 );
                                                                                                IkReal x1518 = ( cj12 * sj11 );
                                                                                                if ( IKabs ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x1517 ) ) + ( ( ( -1.0 ) *r00 * x1518 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( r10 * x1518 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1517 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x1517 ) ) + ( ( ( -1.0 ) *r00 * x1518 ) ) ) ) + IKsqr ( ( ( ( r10 * x1518 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1517 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                    continue;
                                                                                                j9array[0] = IKatan2 ( ( ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( r01 * x1517 ) ) + ( ( ( -1.0 ) * r00 * x1518 ) ) ), ( ( ( r10 * x1518 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) * r11 * x1517 ) ) ) );
                                                                                                sj9array[0] = IKsin ( j9array[0] );
                                                                                                cj9array[0] = IKcos ( j9array[0] );
                                                                                                if ( j9array[0] > IKPI )
                                                                                                {
                                                                                                    j9array[0] -= IK2PI;
                                                                                                }
                                                                                                else if ( j9array[0] < -IKPI )
                                                                                                {   j9array[0] += IK2PI;
                                                                                                }
                                                                                                j9valid[0] = true;
                                                                                                for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                                {
                                                                                                    if ( !j9valid[ij9] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij9[0] = ij9;
                                                                                                    _ij9[1] = -1;
                                                                                                    for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                    {
                                                                                                        if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j9valid[iij9] = false;
                                                                                                            _ij9[1] = iij9;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j9 = j9array[ij9];
                                                                                                    cj9 = cj9array[ij9];
                                                                                                    sj9 = sj9array[ij9];
                                                                                                    {
                                                                                                        IkReal evalcond[8];
                                                                                                        IkReal x1519 = IKcos ( j9 );
                                                                                                        IkReal x1520 = IKsin ( j9 );
                                                                                                        IkReal x1521 = ( ( 1.0 ) * r00 );
                                                                                                        IkReal x1522 = ( cj12 * sj11 );
                                                                                                        IkReal x1523 = ( r01 * sj12 );
                                                                                                        IkReal x1524 = ( cj11 * cj12 );
                                                                                                        IkReal x1525 = ( ( 1.0 ) * r10 );
                                                                                                        IkReal x1526 = ( ( 1.0 ) * cj8 );
                                                                                                        IkReal x1527 = ( ( 0.1157 ) * sj12 );
                                                                                                        IkReal x1528 = ( ( 1.0 ) * sj8 );
                                                                                                        IkReal x1529 = ( ( 0.5723 ) * sj8 );
                                                                                                        IkReal x1530 = ( r11 * sj12 );
                                                                                                        IkReal x1531 = ( ( 1.0 ) * cj12 );
                                                                                                        IkReal x1532 = ( ( 1.0 ) * cj11 );
                                                                                                        IkReal x1533 = ( ( 0.1157 ) * cj12 );
                                                                                                        IkReal x1534 = ( sj7 * x1519 );
                                                                                                        IkReal x1535 = ( cj7 * x1520 );
                                                                                                        IkReal x1536 = ( cj8 * x1519 );
                                                                                                        IkReal x1537 = ( cj7 * x1519 );
                                                                                                        IkReal x1538 = ( sj7 * x1520 );
                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r12 * x1532 ) ) + x1519 + ( ( ( -1.0 ) * x1522 * x1525 ) ) + ( ( sj11 * x1530 ) ) );
                                                                                                        evalcond[1] = ( ( ( sj11 * x1523 ) ) + ( ( ( -1.0 ) * r02 * x1532 ) ) + ( ( ( -1.0 ) * x1520 ) ) + ( ( ( -1.0 ) * x1521 * x1522 ) ) );
                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * r01 * x1531 ) ) + ( ( sj8 * x1534 ) ) + ( ( ( -1.0 ) * sj12 * x1521 ) ) + ( ( ( -1.0 ) * x1526 * x1537 ) ) );
                                                                                                        evalcond[3] = ( ( ( ( -1.0 ) * r11 * x1531 ) ) + ( ( sj8 * x1538 ) ) + ( ( ( -1.0 ) * sj12 * x1525 ) ) + ( ( ( -1.0 ) * x1526 * x1535 ) ) );
                                                                                                        evalcond[4] = ( ( ( r02 * sj11 ) ) + ( ( cj11 * x1523 ) ) + ( ( ( -1.0 ) * x1528 * x1537 ) ) + ( ( ( -1.0 ) * x1526 * x1534 ) ) + ( ( ( -1.0 ) * x1521 * x1524 ) ) );
                                                                                                        evalcond[5] = ( ( ( cj11 * x1530 ) ) + ( ( ( -1.0 ) * x1524 * x1525 ) ) + ( ( r12 * sj11 ) ) + ( ( ( -1.0 ) * x1528 * x1535 ) ) + ( ( ( -1.0 ) * x1526 * x1538 ) ) );
                                                                                                        evalcond[6] = ( ( ( ( -1.0 ) * x1529 * x1534 ) ) + ( ( ( 0.612 ) * x1536 ) ) + ( ( ( -1.0 ) * r01 * x1533 ) ) + ( ( ( -1.0 ) * r00 * x1527 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -0.163941 ) * x1520 ) ) + ( ( ( 0.5723 ) * cj7 * x1536 ) ) );
                                                                                                        evalcond[7] = ( ( ( ( -1.0 ) * x1529 * x1538 ) ) + ( ( ( -1.0 ) * r11 * x1533 ) ) + ( ( ( 0.163941 ) * x1519 ) ) + ( ( ( 0.612 ) * cj8 * x1520 ) ) + ( ( ( 0.5723 ) * cj8 * x1535 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -1.0 ) * r10 * x1527 ) ) );
                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j9;
                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j8;
                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j7;
                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j10;
                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j11;
                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j12;
                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        } else
                                                                        {
                                                                            {
                                                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                bool j9valid[1] = {false};
                                                                                _nj9 = 1;
                                                                                CheckValue<IkReal> x1539 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( sj7 * sj8 ) ) ) ), -1 );
                                                                                if ( !x1539.valid ) {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x1540 = IKatan2WithCheck ( IkReal ( ( ( ( r10 * sj12 ) ) + ( ( cj12 * r11 ) ) ) ), IkReal ( ( ( ( r00 * sj12 ) ) + ( ( cj12 * r01 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                if ( !x1540.valid ) {
                                                                                    continue;
                                                                                }
                                                                                j9array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1539.value ) ) ) + ( x1540.value ) );
                                                                                sj9array[0] = IKsin ( j9array[0] );
                                                                                cj9array[0] = IKcos ( j9array[0] );
                                                                                if ( j9array[0] > IKPI )
                                                                                {
                                                                                    j9array[0] -= IK2PI;
                                                                                }
                                                                                else if ( j9array[0] < -IKPI )
                                                                                {   j9array[0] += IK2PI;
                                                                                }
                                                                                j9valid[0] = true;
                                                                                for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                {
                                                                                    if ( !j9valid[ij9] )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij9[0] = ij9;
                                                                                    _ij9[1] = -1;
                                                                                    for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                    {
                                                                                        if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                        {
                                                                                            j9valid[iij9] = false;
                                                                                            _ij9[1] = iij9;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j9 = j9array[ij9];
                                                                                    cj9 = cj9array[ij9];
                                                                                    sj9 = sj9array[ij9];
                                                                                    {
                                                                                        IkReal evalcond[4];
                                                                                        IkReal x1541 = IKcos ( j9 );
                                                                                        IkReal x1542 = IKsin ( j9 );
                                                                                        IkReal x1543 = ( ( 1.0 ) * sj12 );
                                                                                        IkReal x1544 = ( ( 0.1157 ) * sj12 );
                                                                                        IkReal x1545 = ( sj7 * sj8 );
                                                                                        IkReal x1546 = ( ( 1.0 ) * cj7 );
                                                                                        IkReal x1547 = ( ( 1.0 ) * cj12 );
                                                                                        IkReal x1548 = ( ( 0.1157 ) * cj12 );
                                                                                        IkReal x1549 = ( ( 0.5723 ) * x1541 );
                                                                                        IkReal x1550 = ( cj8 * x1542 );
                                                                                        IkReal x1551 = ( cj8 * x1541 );
                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * x1546 * x1551 ) ) + ( ( x1541 * x1545 ) ) + ( ( ( -1.0 ) * r01 * x1547 ) ) + ( ( ( -1.0 ) * r00 * x1543 ) ) );
                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * x1546 * x1550 ) ) + ( ( ( -1.0 ) * r10 * x1543 ) ) + ( ( ( -1.0 ) * r11 * x1547 ) ) + ( ( x1542 * x1545 ) ) );
                                                                                        evalcond[2] = ( ( ( cj7 * cj8 * x1549 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * r01 * x1548 ) ) + ( ( ( -1.0 ) * r00 * x1544 ) ) + ( ( ( 0.612 ) * x1551 ) ) + ( ( ( -1.0 ) * x1545 * x1549 ) ) + ( ( ( -0.163941 ) * x1542 ) ) );
                                                                                        evalcond[3] = ( ( ( ( 0.163941 ) * x1541 ) ) + ( ( ( 0.5723 ) * cj7 * x1550 ) ) + ( ( ( -0.5723 ) * x1542 * x1545 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.612 ) * x1550 ) ) + ( ( ( -1.0 ) * r10 * x1544 ) ) + ( ( ( -1.0 ) * r11 * x1548 ) ) );
                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        IkReal j11eval[3];
                                                                                        sj10 = -1.0;
                                                                                        cj10 = 0;
                                                                                        j10 = -1.5707963267949;
                                                                                        IkReal x1552 = ( ( 1.0 ) * cj12 );
                                                                                        IkReal x1553 = ( ( ( ( -1.0 ) * r00 * sj12 ) ) + ( ( ( -1.0 ) * r01 * x1552 ) ) );
                                                                                        j11eval[0] = x1553;
                                                                                        j11eval[1] = IKsign ( x1553 );
                                                                                        j11eval[2] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( cj9 * r21 * sj12 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x1552 ) ) ) ) ) );
                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j11eval[3];
                                                                                                sj10 = -1.0;
                                                                                                cj10 = 0;
                                                                                                j10 = -1.5707963267949;
                                                                                                IkReal x1554 = ( ( 1.0 ) * cj12 );
                                                                                                IkReal x1555 = ( ( ( ( -1.0 ) * r11 * x1554 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) );
                                                                                                j11eval[0] = x1555;
                                                                                                j11eval[1] = ( ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1554 ) ) ) ) ) + ( IKabs ( ( r22 * sj9 ) ) ) );
                                                                                                j11eval[2] = IKsign ( x1555 );
                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j11eval[3];
                                                                                                        sj10 = -1.0;
                                                                                                        cj10 = 0;
                                                                                                        j10 = -1.5707963267949;
                                                                                                        IkReal x1556 = ( ( 1.0 ) * sj12 );
                                                                                                        IkReal x1557 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1556 ) ) );
                                                                                                        j11eval[0] = x1557;
                                                                                                        j11eval[1] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r01 * x1556 ) ) + ( ( cj12 * r10 * sj9 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1556 ) ) ) ) ) );
                                                                                                        j11eval[2] = IKsign ( x1557 );
                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                        {
                                                                                                            continue; // 1 cases reached

                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                bool j11valid[1] = {false};
                                                                                                                _nj11 = 1;
                                                                                                                IkReal x1558 = ( ( 1.0 ) * sj12 );
                                                                                                                CheckValue<IkReal> x1559 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r01 * x1558 ) ) + ( ( cj12 * r10 * sj9 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1558 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                if ( !x1559.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x1560 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1558 ) ) ) ), -1 );
                                                                                                                if ( !x1560.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x1559.value ) + ( ( ( 1.5707963267949 ) * ( x1560.value ) ) ) );
                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                {
                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                }
                                                                                                                j11valid[0] = true;
                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                {
                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij11[0] = ij11;
                                                                                                                    _ij11[1] = -1;
                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                    {
                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                        {
                                                                                                                            j11valid[iij11] = false;
                                                                                                                            _ij11[1] = iij11;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j11 = j11array[ij11];
                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                    {
                                                                                                                        IkReal evalcond[6];
                                                                                                                        IkReal x1561 = IKsin ( j11 );
                                                                                                                        IkReal x1562 = IKcos ( j11 );
                                                                                                                        IkReal x1563 = ( ( 1.0 ) * cj9 );
                                                                                                                        IkReal x1564 = ( cj7 * sj8 );
                                                                                                                        IkReal x1565 = ( ( 1.0 ) * cj12 );
                                                                                                                        IkReal x1566 = ( r01 * sj12 );
                                                                                                                        IkReal x1567 = ( r11 * sj12 );
                                                                                                                        IkReal x1568 = ( cj8 * sj7 );
                                                                                                                        IkReal x1569 = ( ( 1.0 ) * sj9 );
                                                                                                                        IkReal x1570 = ( r21 * sj12 );
                                                                                                                        IkReal x1571 = ( ( 1.0 ) * x1562 );
                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r20 * x1561 * x1565 ) ) + ( ( ( -1.0 ) * r22 * x1571 ) ) + ( ( x1561 * x1570 ) ) );
                                                                                                                        evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r10 * x1561 * x1565 ) ) + ( ( x1561 * x1567 ) ) + ( ( ( -1.0 ) * r12 * x1571 ) ) );
                                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * r02 * x1571 ) ) + ( ( x1561 * x1566 ) ) + ( ( ( -1.0 ) * r00 * x1561 * x1565 ) ) + ( ( ( -1.0 ) * x1569 ) ) );
                                                                                                                        evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( ( -1.0 ) * r20 * x1562 * x1565 ) ) + ( ( r22 * x1561 ) ) + ( ( x1562 * x1570 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * x1563 * x1564 ) ) + ( ( ( -1.0 ) * x1563 * x1568 ) ) + ( ( x1562 * x1566 ) ) + ( ( ( -1.0 ) * r00 * x1562 * x1565 ) ) + ( ( r02 * x1561 ) ) );
                                                                                                                        evalcond[5] = ( ( ( r12 * x1561 ) ) + ( ( ( -1.0 ) * x1568 * x1569 ) ) + ( ( ( -1.0 ) * x1564 * x1569 ) ) + ( ( x1562 * x1567 ) ) + ( ( ( -1.0 ) * r10 * x1562 * x1565 ) ) );
                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                    }
                                                                                                                }
                                                                                                            }

                                                                                                        }

                                                                                                    }

                                                                                                } else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                        bool j11valid[1] = {false};
                                                                                                        _nj11 = 1;
                                                                                                        IkReal x1572 = ( ( 1.0 ) * cj12 );
                                                                                                        CheckValue<IkReal> x1573 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1572 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                        if ( !x1573.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x1574 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x1572 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                        if ( !x1574.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x1573.value ) + ( ( ( 1.5707963267949 ) * ( x1574.value ) ) ) );
                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                        if ( j11array[0] > IKPI )
                                                                                                        {
                                                                                                            j11array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                        {   j11array[0] += IK2PI;
                                                                                                        }
                                                                                                        j11valid[0] = true;
                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                        {
                                                                                                            if ( !j11valid[ij11] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij11[0] = ij11;
                                                                                                            _ij11[1] = -1;
                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                            {
                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j11valid[iij11] = false;
                                                                                                                    _ij11[1] = iij11;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j11 = j11array[ij11];
                                                                                                            cj11 = cj11array[ij11];
                                                                                                            sj11 = sj11array[ij11];
                                                                                                            {
                                                                                                                IkReal evalcond[6];
                                                                                                                IkReal x1575 = IKsin ( j11 );
                                                                                                                IkReal x1576 = IKcos ( j11 );
                                                                                                                IkReal x1577 = ( ( 1.0 ) * cj9 );
                                                                                                                IkReal x1578 = ( cj7 * sj8 );
                                                                                                                IkReal x1579 = ( ( 1.0 ) * cj12 );
                                                                                                                IkReal x1580 = ( r01 * sj12 );
                                                                                                                IkReal x1581 = ( r11 * sj12 );
                                                                                                                IkReal x1582 = ( cj8 * sj7 );
                                                                                                                IkReal x1583 = ( ( 1.0 ) * sj9 );
                                                                                                                IkReal x1584 = ( r21 * sj12 );
                                                                                                                IkReal x1585 = ( ( 1.0 ) * x1576 );
                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r20 * x1575 * x1579 ) ) + ( ( x1575 * x1584 ) ) + ( ( ( -1.0 ) * r22 * x1585 ) ) );
                                                                                                                evalcond[1] = ( cj9 + ( ( x1575 * x1581 ) ) + ( ( ( -1.0 ) * r10 * x1575 * x1579 ) ) + ( ( ( -1.0 ) * r12 * x1585 ) ) );
                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * x1583 ) ) + ( ( ( -1.0 ) * r00 * x1575 * x1579 ) ) + ( ( ( -1.0 ) * r02 * x1585 ) ) + ( ( x1575 * x1580 ) ) );
                                                                                                                evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( x1576 * x1584 ) ) + ( ( ( -1.0 ) * r20 * x1576 * x1579 ) ) + ( ( r22 * x1575 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                                evalcond[4] = ( ( ( x1576 * x1580 ) ) + ( ( ( -1.0 ) * x1577 * x1582 ) ) + ( ( ( -1.0 ) * x1577 * x1578 ) ) + ( ( r02 * x1575 ) ) + ( ( ( -1.0 ) * r00 * x1576 * x1579 ) ) );
                                                                                                                evalcond[5] = ( ( ( ( -1.0 ) * x1578 * x1583 ) ) + ( ( x1576 * x1581 ) ) + ( ( r12 * x1575 ) ) + ( ( ( -1.0 ) * r10 * x1576 * x1579 ) ) + ( ( ( -1.0 ) * x1582 * x1583 ) ) );
                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j9;
                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j8;
                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j7;
                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j10;
                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j11;
                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j12;
                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                }

                                                                                            }

                                                                                        } else
                                                                                        {
                                                                                            {
                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                bool j11valid[1] = {false};
                                                                                                _nj11 = 1;
                                                                                                IkReal x1586 = ( ( 1.0 ) * cj12 );
                                                                                                CheckValue<IkReal> x1587 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( cj9 * r21 * sj12 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x1586 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                if ( !x1587.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x1588 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x1586 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                                                if ( !x1588.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x1587.value ) + ( ( ( 1.5707963267949 ) * ( x1588.value ) ) ) );
                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                if ( j11array[0] > IKPI )
                                                                                                {
                                                                                                    j11array[0] -= IK2PI;
                                                                                                }
                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                {   j11array[0] += IK2PI;
                                                                                                }
                                                                                                j11valid[0] = true;
                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                {
                                                                                                    if ( !j11valid[ij11] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij11[0] = ij11;
                                                                                                    _ij11[1] = -1;
                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                    {
                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j11valid[iij11] = false;
                                                                                                            _ij11[1] = iij11;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j11 = j11array[ij11];
                                                                                                    cj11 = cj11array[ij11];
                                                                                                    sj11 = sj11array[ij11];
                                                                                                    {
                                                                                                        IkReal evalcond[6];
                                                                                                        IkReal x1589 = IKsin ( j11 );
                                                                                                        IkReal x1590 = IKcos ( j11 );
                                                                                                        IkReal x1591 = ( ( 1.0 ) * cj9 );
                                                                                                        IkReal x1592 = ( cj7 * sj8 );
                                                                                                        IkReal x1593 = ( ( 1.0 ) * cj12 );
                                                                                                        IkReal x1594 = ( r01 * sj12 );
                                                                                                        IkReal x1595 = ( r11 * sj12 );
                                                                                                        IkReal x1596 = ( cj8 * sj7 );
                                                                                                        IkReal x1597 = ( ( 1.0 ) * sj9 );
                                                                                                        IkReal x1598 = ( r21 * sj12 );
                                                                                                        IkReal x1599 = ( ( 1.0 ) * x1590 );
                                                                                                        evalcond[0] = ( ( ( x1589 * x1598 ) ) + ( ( ( -1.0 ) * r22 * x1599 ) ) + ( ( ( -1.0 ) * r20 * x1589 * x1593 ) ) );
                                                                                                        evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r10 * x1589 * x1593 ) ) + ( ( x1589 * x1595 ) ) + ( ( ( -1.0 ) * r12 * x1599 ) ) );
                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * x1597 ) ) + ( ( x1589 * x1594 ) ) + ( ( ( -1.0 ) * r02 * x1599 ) ) + ( ( ( -1.0 ) * r00 * x1589 * x1593 ) ) );
                                                                                                        evalcond[3] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( x1590 * x1598 ) ) + ( ( ( -1.0 ) * r20 * x1590 * x1593 ) ) + ( ( r22 * x1589 ) ) + ( ( sj7 * sj8 ) ) );
                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * r00 * x1590 * x1593 ) ) + ( ( x1590 * x1594 ) ) + ( ( ( -1.0 ) * x1591 * x1592 ) ) + ( ( ( -1.0 ) * x1591 * x1596 ) ) + ( ( r02 * x1589 ) ) );
                                                                                                        evalcond[5] = ( ( ( x1590 * x1595 ) ) + ( ( ( -1.0 ) * x1592 * x1597 ) ) + ( ( r12 * x1589 ) ) + ( ( ( -1.0 ) * r10 * x1590 * x1593 ) ) + ( ( ( -1.0 ) * x1596 * x1597 ) ) );
                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                        vinfos[0].jointtype = 1;
                                                                                                        vinfos[0].foffset = j9;
                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                        vinfos[1].jointtype = 1;
                                                                                                        vinfos[1].foffset = j8;
                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                        vinfos[2].jointtype = 1;
                                                                                                        vinfos[2].foffset = j7;
                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                        vinfos[3].jointtype = 1;
                                                                                                        vinfos[3].foffset = j10;
                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                        vinfos[4].jointtype = 1;
                                                                                                        vinfos[4].foffset = j11;
                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                        vinfos[5].jointtype = 1;
                                                                                                        vinfos[5].foffset = j12;
                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }
                                                                                }
                                                                            }

                                                                        }

                                                                    }

                                                                }
                                                            } while ( 0 );
                                                            if ( bgotonextstatement )
                                                            {
                                                                bool bgotonextstatement = true;
                                                                do
                                                                {
                                                                    evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( j10 ) ) ), 6.28318530717959 ) ) );
                                                                    if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                    {
                                                                        bgotonextstatement = false;
                                                                        {
                                                                            IkReal j9eval[3];
                                                                            sj10 = 0;
                                                                            cj10 = 1.0;
                                                                            j10 = 0;
                                                                            IkReal x1600 = ( ( 1.0 ) * cj12 );
                                                                            IkReal x1601 = ( ( 1.0 ) * sj12 );
                                                                            IkReal x1602 = ( ( ( ( -1.0 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj7 * sj8 ) ) );
                                                                            j9eval[0] = x1602;
                                                                            j9eval[1] = IKsign ( x1602 );
                                                                            j9eval[2] = ( ( IKabs ( ( ( ( ( -1.0 ) * r10 * x1601 ) ) + ( ( ( -1.0 ) * r11 * x1600 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * r00 * x1601 ) ) + ( ( ( -1.0 ) * r01 * x1600 ) ) ) ) ) );
                                                                            if ( IKabs ( j9eval[0] ) < 0.0000010000000000  || IKabs ( j9eval[1] ) < 0.0000010000000000  || IKabs ( j9eval[2] ) < 0.0000010000000000  )
                                                                            {
                                                                                {
                                                                                    IkReal j11eval[3];
                                                                                    sj10 = 0;
                                                                                    cj10 = 1.0;
                                                                                    j10 = 0;
                                                                                    IkReal x1603 = cj12 * cj12;
                                                                                    IkReal x1604 = r21 * r21;
                                                                                    IkReal x1605 = ( r21 * sj12 );
                                                                                    IkReal x1606 = ( cj8 * sj7 );
                                                                                    IkReal x1607 = ( cj7 * sj8 );
                                                                                    IkReal x1608 = ( ( 1.0 ) * cj12 * r20 );
                                                                                    IkReal x1609 = ( ( ( ( -1.0 ) * x1604 ) ) + ( ( ( -1.0 ) * ( r22 * r22 ) ) ) + ( ( x1603 * x1604 ) ) + ( ( ( -1.0 ) * x1603 * ( r20 * r20 ) ) ) + ( ( ( 2.0 ) * cj12 * r20 * x1605 ) ) );
                                                                                    j11eval[0] = x1609;
                                                                                    j11eval[1] = IKsign ( x1609 );
                                                                                    j11eval[2] = ( ( IKabs ( ( ( ( r22 * x1607 ) ) + ( ( r22 * x1606 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * x1607 * x1608 ) ) + ( ( ( -1.0 ) * x1606 * x1608 ) ) + ( ( x1605 * x1607 ) ) + ( ( x1605 * x1606 ) ) ) ) ) );
                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                    {
                                                                                        {
                                                                                            IkReal j9eval[2];
                                                                                            sj10 = 0;
                                                                                            cj10 = 1.0;
                                                                                            j10 = 0;
                                                                                            IkReal x1610 = cj8 * cj8;
                                                                                            IkReal x1611 = ( cj8 * sj8 );
                                                                                            IkReal x1612 = ( cj7 * sj7 );
                                                                                            j9eval[0] = ( ( ( ( -1.06936921195177 ) * sj7 * x1610 ) ) + ( ( ( -2.0 ) * x1611 * ( cj7 * cj7 ) ) ) + x1612 + x1611 + ( ( ( -1.06936921195177 ) * cj7 * x1611 ) ) + ( ( ( -2.0 ) * x1610 * x1612 ) ) );
                                                                                            j9eval[1] = ( ( ( ( -1.0 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj7 * sj8 ) ) );
                                                                                            if ( IKabs ( j9eval[0] ) < 0.0000010000000000  || IKabs ( j9eval[1] ) < 0.0000010000000000  )
                                                                                            {
                                                                                                continue; // 1 cases reached

                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                    bool j9valid[1] = {false};
                                                                                                    _nj9 = 1;
                                                                                                    IkReal x1613 = cj8 * cj8;
                                                                                                    IkReal x1614 = ( cj7 * sj8 );
                                                                                                    IkReal x1615 = ( cj8 * sj7 );
                                                                                                    IkReal x1616 = ( cj8 * sj8 );
                                                                                                    IkReal x1617 = ( cj12 * r01 );
                                                                                                    IkReal x1618 = ( ( 1000000.0 ) * py );
                                                                                                    IkReal x1619 = ( r00 * sj12 );
                                                                                                    IkReal x1620 = ( ( 115700.0 ) * cj12 * r11 );
                                                                                                    IkReal x1621 = ( ( 115700.0 ) * r10 * sj12 );
                                                                                                    IkReal x1622 = ( sj7 * x1613 );
                                                                                                    CheckValue<IkReal> x1623 = IKPowWithIntegerCheck ( ( ( ( ( -612000.0 ) * cj8 * x1614 ) ) + ( ( ( 572300.0 ) * x1616 ) ) + ( ( ( 572300.0 ) * cj7 * sj7 ) ) + ( ( ( -612000.0 ) * x1622 ) ) + ( ( ( -1144600.0 ) * cj7 * cj8 * x1614 ) ) + ( ( ( -1144600.0 ) * cj7 * x1622 ) ) ), -1 );
                                                                                                    if ( !x1623.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x1624 = IKPowWithIntegerCheck ( ( ( ( ( -1.0 ) * x1614 ) ) + ( ( ( -1.0 ) * x1615 ) ) ), -1 );
                                                                                                    if ( !x1624.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    if ( IKabs ( ( ( x1623.value ) * ( ( ( ( ( 163941.0 ) *x1619 ) ) + ( ( ( 163941.0 ) *x1617 ) ) + ( ( ( -1.0 ) *x1614 * x1620 ) ) + ( ( ( -1.0 ) *x1614 * x1621 ) ) + ( ( ( -1.0 ) *x1614 * x1618 ) ) + ( ( ( -1.0 ) *x1615 * x1621 ) ) + ( ( ( -1.0 ) *x1615 * x1620 ) ) + ( ( ( -1.0 ) *x1615 * x1618 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( x1624.value ) * ( ( ( ( ( -1.0 ) *x1617 ) ) + ( ( ( -1.0 ) *x1619 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( x1623.value ) * ( ( ( ( ( 163941.0 ) *x1619 ) ) + ( ( ( 163941.0 ) *x1617 ) ) + ( ( ( -1.0 ) *x1614 * x1620 ) ) + ( ( ( -1.0 ) *x1614 * x1621 ) ) + ( ( ( -1.0 ) *x1614 * x1618 ) ) + ( ( ( -1.0 ) *x1615 * x1621 ) ) + ( ( ( -1.0 ) *x1615 * x1620 ) ) + ( ( ( -1.0 ) *x1615 * x1618 ) ) ) ) ) ) + IKsqr ( ( ( x1624.value ) * ( ( ( ( ( -1.0 ) *x1617 ) ) + ( ( ( -1.0 ) *x1619 ) ) ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                        continue;
                                                                                                    j9array[0] = IKatan2 ( ( ( x1623.value ) * ( ( ( ( ( 163941.0 ) * x1619 ) ) + ( ( ( 163941.0 ) * x1617 ) ) + ( ( ( -1.0 ) * x1614 * x1620 ) ) + ( ( ( -1.0 ) * x1614 * x1621 ) ) + ( ( ( -1.0 ) * x1614 * x1618 ) ) + ( ( ( -1.0 ) * x1615 * x1621 ) ) + ( ( ( -1.0 ) * x1615 * x1620 ) ) + ( ( ( -1.0 ) * x1615 * x1618 ) ) ) ) ), ( ( x1624.value ) * ( ( ( ( ( -1.0 ) * x1617 ) ) + ( ( ( -1.0 ) * x1619 ) ) ) ) ) );
                                                                                                    sj9array[0] = IKsin ( j9array[0] );
                                                                                                    cj9array[0] = IKcos ( j9array[0] );
                                                                                                    if ( j9array[0] > IKPI )
                                                                                                    {
                                                                                                        j9array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if ( j9array[0] < -IKPI )
                                                                                                    {   j9array[0] += IK2PI;
                                                                                                    }
                                                                                                    j9valid[0] = true;
                                                                                                    for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                                    {
                                                                                                        if ( !j9valid[ij9] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij9[0] = ij9;
                                                                                                        _ij9[1] = -1;
                                                                                                        for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                        {
                                                                                                            if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j9valid[iij9] = false;
                                                                                                                _ij9[1] = iij9;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j9 = j9array[ij9];
                                                                                                        cj9 = cj9array[ij9];
                                                                                                        sj9 = sj9array[ij9];
                                                                                                        {
                                                                                                            IkReal evalcond[4];
                                                                                                            IkReal x1625 = IKcos ( j9 );
                                                                                                            IkReal x1626 = IKsin ( j9 );
                                                                                                            IkReal x1627 = ( ( 1.0 ) * cj8 );
                                                                                                            IkReal x1628 = ( ( 0.1157 ) * sj12 );
                                                                                                            IkReal x1629 = ( ( 0.5723 ) * sj8 );
                                                                                                            IkReal x1630 = ( ( 0.612 ) * cj8 );
                                                                                                            IkReal x1631 = ( cj12 * r11 );
                                                                                                            IkReal x1632 = ( cj12 * r01 );
                                                                                                            IkReal x1633 = ( sj7 * x1625 );
                                                                                                            IkReal x1634 = ( ( 1.0 ) * cj7 * sj8 );
                                                                                                            IkReal x1635 = ( ( 0.5723 ) * cj7 * cj8 );
                                                                                                            IkReal x1636 = ( sj7 * x1626 );
                                                                                                            evalcond[0] = ( x1632 + ( ( ( -1.0 ) * x1625 * x1634 ) ) + ( ( r00 * sj12 ) ) + ( ( ( -1.0 ) * x1627 * x1633 ) ) );
                                                                                                            evalcond[1] = ( x1631 + ( ( r10 * sj12 ) ) + ( ( ( -1.0 ) * x1626 * x1634 ) ) + ( ( ( -1.0 ) * x1627 * x1636 ) ) );
                                                                                                            evalcond[2] = ( ( ( ( -0.163941 ) * x1626 ) ) + ( ( ( -1.0 ) * r00 * x1628 ) ) + ( ( x1625 * x1630 ) ) + ( ( x1625 * x1635 ) ) + ( ( ( -0.1157 ) * x1632 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * x1629 * x1633 ) ) );
                                                                                                            evalcond[3] = ( ( ( ( 0.163941 ) * x1625 ) ) + ( ( ( -0.1157 ) * x1631 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -1.0 ) * r10 * x1628 ) ) + ( ( ( -1.0 ) * x1629 * x1636 ) ) + ( ( x1626 * x1635 ) ) + ( ( x1626 * x1630 ) ) );
                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            IkReal j11eval[3];
                                                                                                            sj10 = 0;
                                                                                                            cj10 = 1.0;
                                                                                                            j10 = 0;
                                                                                                            IkReal x1637 = ( ( 1.0 ) * cj12 );
                                                                                                            IkReal x1638 = ( ( ( ( -1.0 ) * r01 * x1637 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                                                            j11eval[0] = x1638;
                                                                                                            j11eval[1] = IKsign ( x1638 );
                                                                                                            j11eval[2] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r20 * x1637 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ) ) );
                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11eval[3];
                                                                                                                    sj10 = 0;
                                                                                                                    cj10 = 1.0;
                                                                                                                    j10 = 0;
                                                                                                                    IkReal x1639 = ( ( 1.0 ) * cj12 );
                                                                                                                    IkReal x1640 = ( ( ( ( -1.0 ) * r11 * x1639 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) );
                                                                                                                    j11eval[0] = x1640;
                                                                                                                    j11eval[1] = ( ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1639 ) ) ) ) ) + ( IKabs ( ( r22 * sj9 ) ) ) );
                                                                                                                    j11eval[2] = IKsign ( x1640 );
                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j11eval[3];
                                                                                                                            sj10 = 0;
                                                                                                                            cj10 = 1.0;
                                                                                                                            j10 = 0;
                                                                                                                            IkReal x1641 = ( ( 1.0 ) * sj12 );
                                                                                                                            IkReal x1642 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1641 ) ) );
                                                                                                                            j11eval[0] = x1642;
                                                                                                                            j11eval[1] = ( ( IKabs ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1641 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1641 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) );
                                                                                                                            j11eval[2] = IKsign ( x1642 );
                                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                            {
                                                                                                                                continue; // 1 cases reached

                                                                                                                            } else
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                    bool j11valid[1] = {false};
                                                                                                                                    _nj11 = 1;
                                                                                                                                    IkReal x1643 = ( ( 1.0 ) * sj12 );
                                                                                                                                    CheckValue<IkReal> x1644 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1643 ) ) ) ), -1 );
                                                                                                                                    if ( !x1644.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    CheckValue<IkReal> x1645 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1643 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1643 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                    if ( !x1645.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1644.value ) ) ) + ( x1645.value ) );
                                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                                    {
                                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j11valid[0] = true;
                                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                    {
                                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij11[0] = ij11;
                                                                                                                                        _ij11[1] = -1;
                                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                        {
                                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                            {
                                                                                                                                                j11valid[iij11] = false;
                                                                                                                                                _ij11[1] = iij11;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j11 = j11array[ij11];
                                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[6];
                                                                                                                                            IkReal x1646 = IKsin ( j11 );
                                                                                                                                            IkReal x1647 = IKcos ( j11 );
                                                                                                                                            IkReal x1648 = ( r01 * sj12 );
                                                                                                                                            IkReal x1649 = ( r11 * sj12 );
                                                                                                                                            IkReal x1650 = ( r21 * sj12 );
                                                                                                                                            IkReal x1651 = ( sj7 * sj8 );
                                                                                                                                            IkReal x1652 = ( ( 1.0 ) * x1647 );
                                                                                                                                            IkReal x1653 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                                            IkReal x1654 = ( ( 1.0 ) * cj12 * x1646 );
                                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1652 ) ) + ( ( x1646 * x1650 ) ) + ( ( ( -1.0 ) * r20 * x1654 ) ) );
                                                                                                                                            evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r10 * x1654 ) ) + ( ( ( -1.0 ) * r12 * x1652 ) ) + ( ( x1646 * x1649 ) ) );
                                                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r00 * x1654 ) ) + ( ( x1646 * x1648 ) ) + ( ( ( -1.0 ) * r02 * x1652 ) ) );
                                                                                                                                            evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( x1647 * x1650 ) ) + ( ( ( -1.0 ) * cj12 * r20 * x1652 ) ) + ( ( cj7 * sj8 ) ) + ( ( r22 * x1646 ) ) );
                                                                                                                                            evalcond[4] = ( ( ( r02 * x1646 ) ) + ( ( cj9 * x1651 ) ) + ( ( ( -1.0 ) * cj9 * x1653 ) ) + ( ( x1647 * x1648 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1652 ) ) );
                                                                                                                                            evalcond[5] = ( ( ( r12 * x1646 ) ) + ( ( sj9 * x1651 ) ) + ( ( x1647 * x1649 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1652 ) ) + ( ( ( -1.0 ) * sj9 * x1653 ) ) );
                                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }

                                                                                                                            }

                                                                                                                        }

                                                                                                                    } else
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                            bool j11valid[1] = {false};
                                                                                                                            _nj11 = 1;
                                                                                                                            IkReal x1655 = ( ( 1.0 ) * cj12 );
                                                                                                                            CheckValue<IkReal> x1656 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x1655 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                                            if ( !x1656.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            CheckValue<IkReal> x1657 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( ( -1.0 ) * r20 * sj9 * x1655 ) ) + ( ( r21 * sj12 * sj9 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                            if ( !x1657.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1656.value ) ) ) + ( x1657.value ) );
                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                            {
                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j11valid[0] = true;
                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                            {
                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij11[0] = ij11;
                                                                                                                                _ij11[1] = -1;
                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                {
                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                    {
                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j11 = j11array[ij11];
                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[6];
                                                                                                                                    IkReal x1658 = IKsin ( j11 );
                                                                                                                                    IkReal x1659 = IKcos ( j11 );
                                                                                                                                    IkReal x1660 = ( r01 * sj12 );
                                                                                                                                    IkReal x1661 = ( r11 * sj12 );
                                                                                                                                    IkReal x1662 = ( r21 * sj12 );
                                                                                                                                    IkReal x1663 = ( sj7 * sj8 );
                                                                                                                                    IkReal x1664 = ( ( 1.0 ) * x1659 );
                                                                                                                                    IkReal x1665 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                                    IkReal x1666 = ( ( 1.0 ) * cj12 * x1658 );
                                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1664 ) ) + ( ( ( -1.0 ) * r20 * x1666 ) ) + ( ( x1658 * x1662 ) ) );
                                                                                                                                    evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r12 * x1664 ) ) + ( ( ( -1.0 ) * r10 * x1666 ) ) + ( ( x1658 * x1661 ) ) );
                                                                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * r00 * x1666 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( x1658 * x1660 ) ) + ( ( ( -1.0 ) * r02 * x1664 ) ) );
                                                                                                                                    evalcond[3] = ( ( ( r22 * x1658 ) ) + ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj12 * r20 * x1664 ) ) + ( ( cj7 * sj8 ) ) + ( ( x1659 * x1662 ) ) );
                                                                                                                                    evalcond[4] = ( ( ( r02 * x1658 ) ) + ( ( cj9 * x1663 ) ) + ( ( ( -1.0 ) * cj9 * x1665 ) ) + ( ( x1659 * x1660 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1664 ) ) );
                                                                                                                                    evalcond[5] = ( ( ( r12 * x1658 ) ) + ( ( sj9 * x1663 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1664 ) ) + ( ( x1659 * x1661 ) ) + ( ( ( -1.0 ) * sj9 * x1665 ) ) );
                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }

                                                                                                                    }

                                                                                                                }

                                                                                                            } else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                    bool j11valid[1] = {false};
                                                                                                                    _nj11 = 1;
                                                                                                                    IkReal x1667 = ( ( 1.0 ) * cj12 );
                                                                                                                    CheckValue<IkReal> x1668 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x1667 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x1668.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x1669 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x1667 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                                                                    if ( !x1669.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( x1668.value ) + ( ( ( 1.5707963267949 ) * ( x1669.value ) ) ) );
                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                    {
                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j11valid[0] = true;
                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                    {
                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij11[0] = ij11;
                                                                                                                        _ij11[1] = -1;
                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                        {
                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                            {
                                                                                                                                j11valid[iij11] = false;
                                                                                                                                _ij11[1] = iij11;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j11 = j11array[ij11];
                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                        {
                                                                                                                            IkReal evalcond[6];
                                                                                                                            IkReal x1670 = IKsin ( j11 );
                                                                                                                            IkReal x1671 = IKcos ( j11 );
                                                                                                                            IkReal x1672 = ( r01 * sj12 );
                                                                                                                            IkReal x1673 = ( r11 * sj12 );
                                                                                                                            IkReal x1674 = ( r21 * sj12 );
                                                                                                                            IkReal x1675 = ( sj7 * sj8 );
                                                                                                                            IkReal x1676 = ( ( 1.0 ) * x1671 );
                                                                                                                            IkReal x1677 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                            IkReal x1678 = ( ( 1.0 ) * cj12 * x1670 );
                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r20 * x1678 ) ) + ( ( x1670 * x1674 ) ) + ( ( ( -1.0 ) * r22 * x1676 ) ) );
                                                                                                                            evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r10 * x1678 ) ) + ( ( ( -1.0 ) * r12 * x1676 ) ) + ( ( x1670 * x1673 ) ) );
                                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x1676 ) ) + ( ( ( -1.0 ) * r00 * x1678 ) ) + ( ( x1670 * x1672 ) ) );
                                                                                                                            evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj12 * r20 * x1676 ) ) + ( ( cj7 * sj8 ) ) + ( ( x1671 * x1674 ) ) + ( ( r22 * x1670 ) ) );
                                                                                                                            evalcond[4] = ( ( ( r02 * x1670 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1676 ) ) + ( ( cj9 * x1675 ) ) + ( ( ( -1.0 ) * cj9 * x1677 ) ) + ( ( x1671 * x1672 ) ) );
                                                                                                                            evalcond[5] = ( ( ( sj9 * x1675 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1676 ) ) + ( ( ( -1.0 ) * sj9 * x1677 ) ) + ( ( x1671 * x1673 ) ) + ( ( r12 * x1670 ) ) );
                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                            }

                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }

                                                                                    } else
                                                                                    {
                                                                                        {
                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                            bool j11valid[1] = {false};
                                                                                            _nj11 = 1;
                                                                                            IkReal x1679 = cj12 * cj12;
                                                                                            IkReal x1680 = r21 * r21;
                                                                                            IkReal x1681 = ( cj8 * sj7 );
                                                                                            IkReal x1682 = ( r21 * sj12 );
                                                                                            IkReal x1683 = ( cj7 * sj8 );
                                                                                            IkReal x1684 = ( ( 1.0 ) * cj12 * r20 );
                                                                                            CheckValue<IkReal> x1685 = IKatan2WithCheck ( IkReal ( ( ( ( r22 * x1681 ) ) + ( ( r22 * x1683 ) ) ) ), IkReal ( ( ( ( x1681 * x1682 ) ) + ( ( ( -1.0 ) * x1681 * x1684 ) ) + ( ( ( -1.0 ) * x1683 * x1684 ) ) + ( ( x1682 * x1683 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                            if ( !x1685.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            CheckValue<IkReal> x1686 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( 2.0 ) * cj12 * r20 * x1682 ) ) + ( ( ( -1.0 ) * x1680 ) ) + ( ( ( -1.0 ) * ( r22 * r22 ) ) ) + ( ( x1679 * x1680 ) ) + ( ( ( -1.0 ) * x1679 * ( r20 * r20 ) ) ) ) ), -1 );
                                                                                            if ( !x1686.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x1685.value ) + ( ( ( 1.5707963267949 ) * ( x1686.value ) ) ) );
                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                            if ( j11array[0] > IKPI )
                                                                                            {
                                                                                                j11array[0] -= IK2PI;
                                                                                            }
                                                                                            else if ( j11array[0] < -IKPI )
                                                                                            {   j11array[0] += IK2PI;
                                                                                            }
                                                                                            j11valid[0] = true;
                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                            {
                                                                                                if ( !j11valid[ij11] )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                                _ij11[0] = ij11;
                                                                                                _ij11[1] = -1;
                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                {
                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                    {
                                                                                                        j11valid[iij11] = false;
                                                                                                        _ij11[1] = iij11;
                                                                                                        break;
                                                                                                    }
                                                                                                }
                                                                                                j11 = j11array[ij11];
                                                                                                cj11 = cj11array[ij11];
                                                                                                sj11 = sj11array[ij11];
                                                                                                {
                                                                                                    IkReal evalcond[2];
                                                                                                    IkReal x1687 = IKsin ( j11 );
                                                                                                    IkReal x1688 = IKcos ( j11 );
                                                                                                    IkReal x1689 = ( r21 * sj12 );
                                                                                                    IkReal x1690 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * x1687 * x1690 ) ) + ( ( ( -1.0 ) * r22 * x1688 ) ) + ( ( x1687 * x1689 ) ) );
                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * x1688 * x1690 ) ) + ( ( cj8 * sj7 ) ) + ( ( r22 * x1687 ) ) + ( ( x1688 * x1689 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                }

                                                                                                {
                                                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                    bool j9valid[1] = {false};
                                                                                                    _nj9 = 1;
                                                                                                    IkReal x1691 = ( sj11 * sj12 );
                                                                                                    IkReal x1692 = ( cj12 * sj11 );
                                                                                                    if ( IKabs ( ( ( ( r01 * x1691 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( ( -1.0 ) *r00 * x1692 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( r10 * x1692 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1691 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( r01 * x1691 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( ( -1.0 ) *r00 * x1692 ) ) ) ) + IKsqr ( ( ( ( r10 * x1692 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x1691 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                        continue;
                                                                                                    j9array[0] = IKatan2 ( ( ( ( r01 * x1691 ) ) + ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( ( -1.0 ) * r00 * x1692 ) ) ), ( ( ( r10 * x1692 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) * r11 * x1691 ) ) ) );
                                                                                                    sj9array[0] = IKsin ( j9array[0] );
                                                                                                    cj9array[0] = IKcos ( j9array[0] );
                                                                                                    if ( j9array[0] > IKPI )
                                                                                                    {
                                                                                                        j9array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if ( j9array[0] < -IKPI )
                                                                                                    {   j9array[0] += IK2PI;
                                                                                                    }
                                                                                                    j9valid[0] = true;
                                                                                                    for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                                    {
                                                                                                        if ( !j9valid[ij9] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij9[0] = ij9;
                                                                                                        _ij9[1] = -1;
                                                                                                        for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                        {
                                                                                                            if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j9valid[iij9] = false;
                                                                                                                _ij9[1] = iij9;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j9 = j9array[ij9];
                                                                                                        cj9 = cj9array[ij9];
                                                                                                        sj9 = sj9array[ij9];
                                                                                                        {
                                                                                                            IkReal evalcond[8];
                                                                                                            IkReal x1693 = IKcos ( j9 );
                                                                                                            IkReal x1694 = IKsin ( j9 );
                                                                                                            IkReal x1695 = ( ( 1.0 ) * cj12 );
                                                                                                            IkReal x1696 = ( r01 * sj12 );
                                                                                                            IkReal x1697 = ( ( 1.0 ) * cj8 );
                                                                                                            IkReal x1698 = ( cj12 * r11 );
                                                                                                            IkReal x1699 = ( ( 0.1157 ) * sj12 );
                                                                                                            IkReal x1700 = ( ( 1.0 ) * sj8 );
                                                                                                            IkReal x1701 = ( ( 0.5723 ) * sj8 );
                                                                                                            IkReal x1702 = ( r11 * sj12 );
                                                                                                            IkReal x1703 = ( ( 1.0 ) * cj11 );
                                                                                                            IkReal x1704 = ( cj12 * r01 );
                                                                                                            IkReal x1705 = ( sj7 * x1693 );
                                                                                                            IkReal x1706 = ( cj7 * x1694 );
                                                                                                            IkReal x1707 = ( cj8 * x1693 );
                                                                                                            IkReal x1708 = ( cj7 * x1693 );
                                                                                                            IkReal x1709 = ( sj7 * x1694 );
                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r10 * sj11 * x1695 ) ) + x1693 + ( ( sj11 * x1702 ) ) + ( ( ( -1.0 ) * r12 * x1703 ) ) );
                                                                                                            evalcond[1] = ( ( ( sj11 * x1696 ) ) + ( ( ( -1.0 ) * x1694 ) ) + ( ( ( -1.0 ) * r02 * x1703 ) ) + ( ( ( -1.0 ) * r00 * sj11 * x1695 ) ) );
                                                                                                            evalcond[2] = ( x1704 + ( ( r00 * sj12 ) ) + ( ( ( -1.0 ) * x1700 * x1708 ) ) + ( ( ( -1.0 ) * x1697 * x1705 ) ) );
                                                                                                            evalcond[3] = ( x1698 + ( ( ( -1.0 ) * x1700 * x1706 ) ) + ( ( r10 * sj12 ) ) + ( ( ( -1.0 ) * x1697 * x1709 ) ) );
                                                                                                            evalcond[4] = ( ( ( r02 * sj11 ) ) + ( ( cj11 * x1696 ) ) + ( ( ( -1.0 ) * cj11 * r00 * x1695 ) ) + ( ( ( -1.0 ) * x1697 * x1708 ) ) + ( ( sj8 * x1705 ) ) );
                                                                                                            evalcond[5] = ( ( ( r12 * sj11 ) ) + ( ( cj11 * x1702 ) ) + ( ( ( -1.0 ) * cj11 * r10 * x1695 ) ) + ( ( ( -1.0 ) * x1697 * x1706 ) ) + ( ( sj8 * x1709 ) ) );
                                                                                                            evalcond[6] = ( ( ( ( -0.163941 ) * x1694 ) ) + ( ( ( 0.612 ) * x1707 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * x1701 * x1705 ) ) + ( ( ( -0.1157 ) * x1704 ) ) + ( ( ( -1.0 ) * r00 * x1699 ) ) + ( ( ( 0.5723 ) * cj7 * x1707 ) ) );
                                                                                                            evalcond[7] = ( ( ( ( -0.1157 ) * x1698 ) ) + ( ( ( 0.5723 ) * cj8 * x1706 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.163941 ) * x1693 ) ) + ( ( ( -1.0 ) * x1701 * x1709 ) ) + ( ( ( 0.612 ) * cj8 * x1694 ) ) + ( ( ( -1.0 ) * r10 * x1699 ) ) );
                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j9;
                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j8;
                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j7;
                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j10;
                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j11;
                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j12;
                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }

                                                                                    }

                                                                                }

                                                                            } else
                                                                            {
                                                                                {
                                                                                    IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                    bool j9valid[1] = {false};
                                                                                    _nj9 = 1;
                                                                                    IkReal x1710 = ( ( 1.0 ) * cj12 );
                                                                                    IkReal x1711 = ( ( 1.0 ) * sj12 );
                                                                                    CheckValue<IkReal> x1712 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj7 * sj8 ) ) ) ), -1 );
                                                                                    if ( !x1712.valid ) {
                                                                                        continue;
                                                                                    }
                                                                                    CheckValue<IkReal> x1713 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * r10 * x1711 ) ) + ( ( ( -1.0 ) * r11 * x1710 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * r00 * x1711 ) ) + ( ( ( -1.0 ) * r01 * x1710 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                    if ( !x1713.valid ) {
                                                                                        continue;
                                                                                    }
                                                                                    j9array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1712.value ) ) ) + ( x1713.value ) );
                                                                                    sj9array[0] = IKsin ( j9array[0] );
                                                                                    cj9array[0] = IKcos ( j9array[0] );
                                                                                    if ( j9array[0] > IKPI )
                                                                                    {
                                                                                        j9array[0] -= IK2PI;
                                                                                    }
                                                                                    else if ( j9array[0] < -IKPI )
                                                                                    {   j9array[0] += IK2PI;
                                                                                    }
                                                                                    j9valid[0] = true;
                                                                                    for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                    {
                                                                                        if ( !j9valid[ij9] )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                        _ij9[0] = ij9;
                                                                                        _ij9[1] = -1;
                                                                                        for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                        {
                                                                                            if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                            {
                                                                                                j9valid[iij9] = false;
                                                                                                _ij9[1] = iij9;
                                                                                                break;
                                                                                            }
                                                                                        }
                                                                                        j9 = j9array[ij9];
                                                                                        cj9 = cj9array[ij9];
                                                                                        sj9 = sj9array[ij9];
                                                                                        {
                                                                                            IkReal evalcond[4];
                                                                                            IkReal x1714 = IKcos ( j9 );
                                                                                            IkReal x1715 = IKsin ( j9 );
                                                                                            IkReal x1716 = ( ( 1.0 ) * cj8 );
                                                                                            IkReal x1717 = ( ( 0.1157 ) * sj12 );
                                                                                            IkReal x1718 = ( ( 0.5723 ) * sj8 );
                                                                                            IkReal x1719 = ( ( 0.612 ) * cj8 );
                                                                                            IkReal x1720 = ( cj12 * r11 );
                                                                                            IkReal x1721 = ( cj12 * r01 );
                                                                                            IkReal x1722 = ( sj7 * x1714 );
                                                                                            IkReal x1723 = ( ( 1.0 ) * cj7 * sj8 );
                                                                                            IkReal x1724 = ( ( 0.5723 ) * cj7 * cj8 );
                                                                                            IkReal x1725 = ( sj7 * x1715 );
                                                                                            evalcond[0] = ( x1721 + ( ( r00 * sj12 ) ) + ( ( ( -1.0 ) * x1714 * x1723 ) ) + ( ( ( -1.0 ) * x1716 * x1722 ) ) );
                                                                                            evalcond[1] = ( ( ( ( -1.0 ) * x1715 * x1723 ) ) + x1720 + ( ( r10 * sj12 ) ) + ( ( ( -1.0 ) * x1716 * x1725 ) ) );
                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * r00 * x1717 ) ) + ( ( ( -0.163941 ) * x1715 ) ) + ( ( ( -0.1157 ) * x1721 ) ) + ( ( x1714 * x1719 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( x1714 * x1724 ) ) + ( ( ( -1.0 ) * x1718 * x1722 ) ) );
                                                                                            evalcond[3] = ( ( ( ( -0.1157 ) * x1720 ) ) + ( ( x1715 * x1724 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -1.0 ) * r10 * x1717 ) ) + ( ( x1715 * x1719 ) ) + ( ( ( -1.0 ) * x1718 * x1725 ) ) + ( ( ( 0.163941 ) * x1714 ) ) );
                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                        }

                                                                                        {
                                                                                            IkReal j11eval[3];
                                                                                            sj10 = 0;
                                                                                            cj10 = 1.0;
                                                                                            j10 = 0;
                                                                                            IkReal x1726 = ( ( 1.0 ) * cj12 );
                                                                                            IkReal x1727 = ( ( ( ( -1.0 ) * r01 * x1726 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                                            j11eval[0] = x1727;
                                                                                            j11eval[1] = IKsign ( x1727 );
                                                                                            j11eval[2] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r20 * x1726 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ) ) + ( IKabs ( ( cj9 * r22 ) ) ) );
                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                            {
                                                                                                {
                                                                                                    IkReal j11eval[3];
                                                                                                    sj10 = 0;
                                                                                                    cj10 = 1.0;
                                                                                                    j10 = 0;
                                                                                                    IkReal x1728 = ( ( 1.0 ) * cj12 );
                                                                                                    IkReal x1729 = ( ( ( ( -1.0 ) * r11 * x1728 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) );
                                                                                                    j11eval[0] = x1729;
                                                                                                    j11eval[1] = ( ( IKabs ( ( r22 * sj9 ) ) ) + ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1728 ) ) ) ) ) );
                                                                                                    j11eval[2] = IKsign ( x1729 );
                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j11eval[3];
                                                                                                            sj10 = 0;
                                                                                                            cj10 = 1.0;
                                                                                                            j10 = 0;
                                                                                                            IkReal x1730 = ( ( 1.0 ) * sj12 );
                                                                                                            IkReal x1731 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1730 ) ) );
                                                                                                            j11eval[0] = x1731;
                                                                                                            j11eval[1] = ( ( IKabs ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1730 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1730 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) );
                                                                                                            j11eval[2] = IKsign ( x1731 );
                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                            {
                                                                                                                continue; // 1 cases reached

                                                                                                            } else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                    bool j11valid[1] = {false};
                                                                                                                    _nj11 = 1;
                                                                                                                    IkReal x1732 = ( ( 1.0 ) * sj12 );
                                                                                                                    CheckValue<IkReal> x1733 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1732 ) ) ) ), -1 );
                                                                                                                    if ( !x1733.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x1734 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1732 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1732 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x1734.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1733.value ) ) ) + ( x1734.value ) );
                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                    {
                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j11valid[0] = true;
                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                    {
                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij11[0] = ij11;
                                                                                                                        _ij11[1] = -1;
                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                        {
                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                            {
                                                                                                                                j11valid[iij11] = false;
                                                                                                                                _ij11[1] = iij11;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j11 = j11array[ij11];
                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                        {
                                                                                                                            IkReal evalcond[6];
                                                                                                                            IkReal x1735 = IKsin ( j11 );
                                                                                                                            IkReal x1736 = IKcos ( j11 );
                                                                                                                            IkReal x1737 = ( r01 * sj12 );
                                                                                                                            IkReal x1738 = ( r11 * sj12 );
                                                                                                                            IkReal x1739 = ( r21 * sj12 );
                                                                                                                            IkReal x1740 = ( sj7 * sj8 );
                                                                                                                            IkReal x1741 = ( ( 1.0 ) * x1736 );
                                                                                                                            IkReal x1742 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                            IkReal x1743 = ( ( 1.0 ) * cj12 * x1735 );
                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1741 ) ) + ( ( x1735 * x1739 ) ) + ( ( ( -1.0 ) * r20 * x1743 ) ) );
                                                                                                                            evalcond[1] = ( ( ( ( -1.0 ) * r12 * x1741 ) ) + cj9 + ( ( ( -1.0 ) * r10 * x1743 ) ) + ( ( x1735 * x1738 ) ) );
                                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( x1735 * x1737 ) ) + ( ( ( -1.0 ) * r00 * x1743 ) ) + ( ( ( -1.0 ) * r02 * x1741 ) ) );
                                                                                                                            evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( x1736 * x1739 ) ) + ( ( r22 * x1735 ) ) + ( ( ( -1.0 ) * cj12 * r20 * x1741 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                                            evalcond[4] = ( ( ( x1736 * x1737 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1741 ) ) + ( ( r02 * x1735 ) ) + ( ( cj9 * x1740 ) ) + ( ( ( -1.0 ) * cj9 * x1742 ) ) );
                                                                                                                            evalcond[5] = ( ( ( sj9 * x1740 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1741 ) ) + ( ( x1736 * x1738 ) ) + ( ( ( -1.0 ) * sj9 * x1742 ) ) + ( ( r12 * x1735 ) ) );
                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                            }

                                                                                                        }

                                                                                                    } else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                            bool j11valid[1] = {false};
                                                                                                            _nj11 = 1;
                                                                                                            IkReal x1744 = ( ( 1.0 ) * cj12 );
                                                                                                            CheckValue<IkReal> x1745 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( ( -1.0 ) * r20 * sj9 * x1744 ) ) + ( ( r21 * sj12 * sj9 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                            if ( !x1745.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x1746 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x1744 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                            if ( !x1746.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x1745.value ) + ( ( ( 1.5707963267949 ) * ( x1746.value ) ) ) );
                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                            if ( j11array[0] > IKPI )
                                                                                                            {
                                                                                                                j11array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                            {   j11array[0] += IK2PI;
                                                                                                            }
                                                                                                            j11valid[0] = true;
                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                            {
                                                                                                                if ( !j11valid[ij11] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij11[0] = ij11;
                                                                                                                _ij11[1] = -1;
                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                {
                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j11valid[iij11] = false;
                                                                                                                        _ij11[1] = iij11;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j11 = j11array[ij11];
                                                                                                                cj11 = cj11array[ij11];
                                                                                                                sj11 = sj11array[ij11];
                                                                                                                {
                                                                                                                    IkReal evalcond[6];
                                                                                                                    IkReal x1747 = IKsin ( j11 );
                                                                                                                    IkReal x1748 = IKcos ( j11 );
                                                                                                                    IkReal x1749 = ( r01 * sj12 );
                                                                                                                    IkReal x1750 = ( r11 * sj12 );
                                                                                                                    IkReal x1751 = ( r21 * sj12 );
                                                                                                                    IkReal x1752 = ( sj7 * sj8 );
                                                                                                                    IkReal x1753 = ( ( 1.0 ) * x1748 );
                                                                                                                    IkReal x1754 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                    IkReal x1755 = ( ( 1.0 ) * cj12 * x1747 );
                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1753 ) ) + ( ( x1747 * x1751 ) ) + ( ( ( -1.0 ) * r20 * x1755 ) ) );
                                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * r12 * x1753 ) ) + cj9 + ( ( x1747 * x1750 ) ) + ( ( ( -1.0 ) * r10 * x1755 ) ) );
                                                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( x1747 * x1749 ) ) + ( ( ( -1.0 ) * r00 * x1755 ) ) + ( ( ( -1.0 ) * r02 * x1753 ) ) );
                                                                                                                    evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r22 * x1747 ) ) + ( ( x1748 * x1751 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * cj12 * r20 * x1753 ) ) );
                                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * cj12 * r00 * x1753 ) ) + ( ( cj9 * x1752 ) ) + ( ( r02 * x1747 ) ) + ( ( ( -1.0 ) * cj9 * x1754 ) ) + ( ( x1748 * x1749 ) ) );
                                                                                                                    evalcond[5] = ( ( ( r12 * x1747 ) ) + ( ( sj9 * x1752 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1753 ) ) + ( ( ( -1.0 ) * sj9 * x1754 ) ) + ( ( x1748 * x1750 ) ) );
                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                }
                                                                                                            }
                                                                                                        }

                                                                                                    }

                                                                                                }

                                                                                            } else
                                                                                            {
                                                                                                {
                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                    bool j11valid[1] = {false};
                                                                                                    _nj11 = 1;
                                                                                                    IkReal x1756 = ( ( 1.0 ) * cj12 );
                                                                                                    CheckValue<IkReal> x1757 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x1756 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                                                    if ( !x1757.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    CheckValue<IkReal> x1758 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x1756 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                    if ( !x1758.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1757.value ) ) ) + ( x1758.value ) );
                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                    if ( j11array[0] > IKPI )
                                                                                                    {
                                                                                                        j11array[0] -= IK2PI;
                                                                                                    }
                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                    {   j11array[0] += IK2PI;
                                                                                                    }
                                                                                                    j11valid[0] = true;
                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                    {
                                                                                                        if ( !j11valid[ij11] )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                        _ij11[0] = ij11;
                                                                                                        _ij11[1] = -1;
                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                        {
                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                            {
                                                                                                                j11valid[iij11] = false;
                                                                                                                _ij11[1] = iij11;
                                                                                                                break;
                                                                                                            }
                                                                                                        }
                                                                                                        j11 = j11array[ij11];
                                                                                                        cj11 = cj11array[ij11];
                                                                                                        sj11 = sj11array[ij11];
                                                                                                        {
                                                                                                            IkReal evalcond[6];
                                                                                                            IkReal x1759 = IKsin ( j11 );
                                                                                                            IkReal x1760 = IKcos ( j11 );
                                                                                                            IkReal x1761 = ( r01 * sj12 );
                                                                                                            IkReal x1762 = ( r11 * sj12 );
                                                                                                            IkReal x1763 = ( r21 * sj12 );
                                                                                                            IkReal x1764 = ( sj7 * sj8 );
                                                                                                            IkReal x1765 = ( ( 1.0 ) * x1760 );
                                                                                                            IkReal x1766 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                            IkReal x1767 = ( ( 1.0 ) * cj12 * x1759 );
                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r20 * x1767 ) ) + ( ( x1759 * x1763 ) ) + ( ( ( -1.0 ) * r22 * x1765 ) ) );
                                                                                                            evalcond[1] = ( cj9 + ( ( x1759 * x1762 ) ) + ( ( ( -1.0 ) * r12 * x1765 ) ) + ( ( ( -1.0 ) * r10 * x1767 ) ) );
                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r00 * x1767 ) ) + ( ( x1759 * x1761 ) ) + ( ( ( -1.0 ) * r02 * x1765 ) ) );
                                                                                                            evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj12 * r20 * x1765 ) ) + ( ( r22 * x1759 ) ) + ( ( cj7 * sj8 ) ) + ( ( x1760 * x1763 ) ) );
                                                                                                            evalcond[4] = ( ( ( ( -1.0 ) * cj9 * x1766 ) ) + ( ( r02 * x1759 ) ) + ( ( cj9 * x1764 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1765 ) ) + ( ( x1760 * x1761 ) ) );
                                                                                                            evalcond[5] = ( ( ( sj9 * x1764 ) ) + ( ( ( -1.0 ) * sj9 * x1766 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1765 ) ) + ( ( r12 * x1759 ) ) + ( ( x1760 * x1762 ) ) );
                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                        }

                                                                                                        {
                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                            vinfos[0].jointtype = 1;
                                                                                                            vinfos[0].foffset = j9;
                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                            vinfos[1].jointtype = 1;
                                                                                                            vinfos[1].foffset = j8;
                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                            vinfos[2].jointtype = 1;
                                                                                                            vinfos[2].foffset = j7;
                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                            vinfos[3].jointtype = 1;
                                                                                                            vinfos[3].foffset = j10;
                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                            vinfos[4].jointtype = 1;
                                                                                                            vinfos[4].foffset = j11;
                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                            vinfos[5].jointtype = 1;
                                                                                                            vinfos[5].foffset = j12;
                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                        }
                                                                                                    }
                                                                                                }

                                                                                            }

                                                                                        }
                                                                                    }
                                                                                }

                                                                            }

                                                                        }

                                                                    }
                                                                } while ( 0 );
                                                                if ( bgotonextstatement )
                                                                {
                                                                    bool bgotonextstatement = true;
                                                                    do
                                                                    {
                                                                        evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( -3.14159265358979 ) + j10 ) ) ) ), 6.28318530717959 ) ) );
                                                                        if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                        {
                                                                            bgotonextstatement = false;
                                                                            {
                                                                                IkReal j9eval[3];
                                                                                sj10 = 0;
                                                                                cj10 = -1.0;
                                                                                j10 = 3.14159265358979;
                                                                                IkReal x1768 = ( ( ( ( -1.0 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj7 * sj8 ) ) );
                                                                                j9eval[0] = x1768;
                                                                                j9eval[1] = IKsign ( x1768 );
                                                                                j9eval[2] = ( ( IKabs ( ( ( ( r10 * sj12 ) ) + ( ( cj12 * r11 ) ) ) ) ) + ( IKabs ( ( ( ( r00 * sj12 ) ) + ( ( cj12 * r01 ) ) ) ) ) );
                                                                                if ( IKabs ( j9eval[0] ) < 0.0000010000000000  || IKabs ( j9eval[1] ) < 0.0000010000000000  || IKabs ( j9eval[2] ) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal j11eval[3];
                                                                                        sj10 = 0;
                                                                                        cj10 = -1.0;
                                                                                        j10 = 3.14159265358979;
                                                                                        IkReal x1769 = cj12 * cj12;
                                                                                        IkReal x1770 = r21 * r21;
                                                                                        IkReal x1771 = ( r21 * sj12 );
                                                                                        IkReal x1772 = ( cj7 * sj8 );
                                                                                        IkReal x1773 = ( cj8 * sj7 );
                                                                                        IkReal x1774 = ( ( 1.0 ) * cj12 * r20 );
                                                                                        IkReal x1775 = ( x1770 + ( ( ( -2.0 ) * cj12 * r20 * x1771 ) ) + ( r22 * r22 ) + ( ( ( -1.0 ) * x1769 * x1770 ) ) + ( ( x1769 * ( r20 * r20 ) ) ) );
                                                                                        j11eval[0] = x1775;
                                                                                        j11eval[1] = IKsign ( x1775 );
                                                                                        j11eval[2] = ( ( IKabs ( ( ( ( ( -1.0 ) * x1772 * x1774 ) ) + ( ( x1771 * x1773 ) ) + ( ( x1771 * x1772 ) ) + ( ( ( -1.0 ) * x1773 * x1774 ) ) ) ) ) + ( IKabs ( ( ( ( r22 * x1773 ) ) + ( ( r22 * x1772 ) ) ) ) ) );
                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                        {
                                                                                            {
                                                                                                IkReal j9eval[2];
                                                                                                sj10 = 0;
                                                                                                cj10 = -1.0;
                                                                                                j10 = 3.14159265358979;
                                                                                                IkReal x1776 = cj8 * cj8;
                                                                                                IkReal x1777 = ( cj8 * sj8 );
                                                                                                IkReal x1778 = ( cj7 * sj7 );
                                                                                                j9eval[0] = ( x1777 + x1778 + ( ( ( -1.06936921195177 ) * sj7 * x1776 ) ) + ( ( ( -2.0 ) * x1776 * x1778 ) ) + ( ( ( -1.06936921195177 ) * cj7 * x1777 ) ) + ( ( ( -2.0 ) * x1777 * ( cj7 * cj7 ) ) ) );
                                                                                                j9eval[1] = ( ( ( ( -1.0 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj7 * sj8 ) ) );
                                                                                                if ( IKabs ( j9eval[0] ) < 0.0000010000000000  || IKabs ( j9eval[1] ) < 0.0000010000000000  )
                                                                                                {
                                                                                                    continue; // 1 cases reached

                                                                                                } else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                        bool j9valid[1] = {false};
                                                                                                        _nj9 = 1;
                                                                                                        IkReal x1779 = cj8 * cj8;
                                                                                                        IkReal x1780 = ( cj7 * sj8 );
                                                                                                        IkReal x1781 = ( cj8 * sj7 );
                                                                                                        IkReal x1782 = ( cj12 * r01 );
                                                                                                        IkReal x1783 = ( cj8 * sj8 );
                                                                                                        IkReal x1784 = ( ( 1000000.0 ) * py );
                                                                                                        IkReal x1785 = ( r00 * sj12 );
                                                                                                        IkReal x1786 = ( ( 115700.0 ) * cj12 * r11 );
                                                                                                        IkReal x1787 = ( sj7 * x1779 );
                                                                                                        IkReal x1788 = ( ( 115700.0 ) * r10 * sj12 );
                                                                                                        CheckValue<IkReal> x1789 = IKPowWithIntegerCheck ( ( ( ( ( -1144600.0 ) * cj7 * cj8 * x1780 ) ) + ( ( ( -1144600.0 ) * cj7 * x1787 ) ) + ( ( ( 572300.0 ) * x1783 ) ) + ( ( ( 572300.0 ) * cj7 * sj7 ) ) + ( ( ( -612000.0 ) * x1787 ) ) + ( ( ( -612000.0 ) * cj8 * x1780 ) ) ), -1 );
                                                                                                        if ( !x1789.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x1790 = IKPowWithIntegerCheck ( ( ( ( ( -1.0 ) * x1780 ) ) + ( ( ( -1.0 ) * x1781 ) ) ), -1 );
                                                                                                        if ( !x1790.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        if ( IKabs ( ( ( x1789.value ) * ( ( ( ( ( -1.0 ) *x1780 * x1788 ) ) + ( ( ( -1.0 ) *x1780 * x1784 ) ) + ( ( ( -1.0 ) *x1780 * x1786 ) ) + ( ( ( -1.0 ) *x1781 * x1788 ) ) + ( ( ( -1.0 ) *x1781 * x1786 ) ) + ( ( ( -1.0 ) *x1781 * x1784 ) ) + ( ( ( -163941.0 ) *x1785 ) ) + ( ( ( -163941.0 ) *x1782 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( x1790.value ) * ( ( x1782 + x1785 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( x1789.value ) * ( ( ( ( ( -1.0 ) *x1780 * x1788 ) ) + ( ( ( -1.0 ) *x1780 * x1784 ) ) + ( ( ( -1.0 ) *x1780 * x1786 ) ) + ( ( ( -1.0 ) *x1781 * x1788 ) ) + ( ( ( -1.0 ) *x1781 * x1786 ) ) + ( ( ( -1.0 ) *x1781 * x1784 ) ) + ( ( ( -163941.0 ) *x1785 ) ) + ( ( ( -163941.0 ) *x1782 ) ) ) ) ) ) + IKsqr ( ( ( x1790.value ) * ( ( x1782 + x1785 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                            continue;
                                                                                                        j9array[0] = IKatan2 ( ( ( x1789.value ) * ( ( ( ( ( -1.0 ) * x1780 * x1788 ) ) + ( ( ( -1.0 ) * x1780 * x1784 ) ) + ( ( ( -1.0 ) * x1780 * x1786 ) ) + ( ( ( -1.0 ) * x1781 * x1788 ) ) + ( ( ( -1.0 ) * x1781 * x1786 ) ) + ( ( ( -1.0 ) * x1781 * x1784 ) ) + ( ( ( -163941.0 ) * x1785 ) ) + ( ( ( -163941.0 ) * x1782 ) ) ) ) ), ( ( x1790.value ) * ( ( x1782 + x1785 ) ) ) );
                                                                                                        sj9array[0] = IKsin ( j9array[0] );
                                                                                                        cj9array[0] = IKcos ( j9array[0] );
                                                                                                        if ( j9array[0] > IKPI )
                                                                                                        {
                                                                                                            j9array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if ( j9array[0] < -IKPI )
                                                                                                        {   j9array[0] += IK2PI;
                                                                                                        }
                                                                                                        j9valid[0] = true;
                                                                                                        for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                                        {
                                                                                                            if ( !j9valid[ij9] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij9[0] = ij9;
                                                                                                            _ij9[1] = -1;
                                                                                                            for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                            {
                                                                                                                if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j9valid[iij9] = false;
                                                                                                                    _ij9[1] = iij9;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j9 = j9array[ij9];
                                                                                                            cj9 = cj9array[ij9];
                                                                                                            sj9 = sj9array[ij9];
                                                                                                            {
                                                                                                                IkReal evalcond[4];
                                                                                                                IkReal x1791 = IKcos ( j9 );
                                                                                                                IkReal x1792 = IKsin ( j9 );
                                                                                                                IkReal x1793 = ( ( 1.0 ) * sj12 );
                                                                                                                IkReal x1794 = ( ( 1.0 ) * cj8 );
                                                                                                                IkReal x1795 = ( ( 0.1157 ) * sj12 );
                                                                                                                IkReal x1796 = ( ( 0.5723 ) * sj8 );
                                                                                                                IkReal x1797 = ( ( 0.612 ) * cj8 );
                                                                                                                IkReal x1798 = ( ( 1.0 ) * cj12 );
                                                                                                                IkReal x1799 = ( ( 0.1157 ) * cj12 );
                                                                                                                IkReal x1800 = ( sj7 * x1791 );
                                                                                                                IkReal x1801 = ( ( 1.0 ) * cj7 * sj8 );
                                                                                                                IkReal x1802 = ( ( 0.5723 ) * cj7 * cj8 );
                                                                                                                IkReal x1803 = ( sj7 * x1792 );
                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r01 * x1798 ) ) + ( ( ( -1.0 ) * r00 * x1793 ) ) + ( ( ( -1.0 ) * x1794 * x1800 ) ) + ( ( ( -1.0 ) * x1791 * x1801 ) ) );
                                                                                                                evalcond[1] = ( ( ( ( -1.0 ) * r10 * x1793 ) ) + ( ( ( -1.0 ) * r11 * x1798 ) ) + ( ( ( -1.0 ) * x1794 * x1803 ) ) + ( ( ( -1.0 ) * x1792 * x1801 ) ) );
                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * r01 * x1799 ) ) + ( ( ( -1.0 ) * r00 * x1795 ) ) + ( ( ( -1.0 ) * x1796 * x1800 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -0.163941 ) * x1792 ) ) + ( ( x1791 * x1797 ) ) + ( ( x1791 * x1802 ) ) );
                                                                                                                evalcond[3] = ( ( ( ( -1.0 ) * r10 * x1795 ) ) + ( ( ( -1.0 ) * r11 * x1799 ) ) + ( ( ( -1.0 ) * x1796 * x1803 ) ) + ( ( x1792 * x1802 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.163941 ) * x1791 ) ) + ( ( x1792 * x1797 ) ) );
                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                IkReal j11eval[3];
                                                                                                                sj10 = 0;
                                                                                                                cj10 = -1.0;
                                                                                                                j10 = 3.14159265358979;
                                                                                                                IkReal x1804 = ( ( 1.0 ) * cj12 );
                                                                                                                IkReal x1805 = ( ( ( ( -1.0 ) * r01 * x1804 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                                                                j11eval[0] = x1805;
                                                                                                                j11eval[1] = IKsign ( x1805 );
                                                                                                                j11eval[2] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r20 * x1804 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ) ) + ( IKabs ( ( cj9 * r22 ) ) ) );
                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11eval[3];
                                                                                                                        sj10 = 0;
                                                                                                                        cj10 = -1.0;
                                                                                                                        j10 = 3.14159265358979;
                                                                                                                        IkReal x1806 = ( ( 1.0 ) * cj12 );
                                                                                                                        IkReal x1807 = ( ( ( ( -1.0 ) * r10 * sj12 ) ) + ( ( ( -1.0 ) * r11 * x1806 ) ) );
                                                                                                                        j11eval[0] = x1807;
                                                                                                                        j11eval[1] = ( ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1806 ) ) ) ) ) + ( IKabs ( ( r22 * sj9 ) ) ) );
                                                                                                                        j11eval[2] = IKsign ( x1807 );
                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11eval[3];
                                                                                                                                sj10 = 0;
                                                                                                                                cj10 = -1.0;
                                                                                                                                j10 = 3.14159265358979;
                                                                                                                                IkReal x1808 = ( ( 1.0 ) * sj12 );
                                                                                                                                IkReal x1809 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1808 ) ) );
                                                                                                                                j11eval[0] = x1809;
                                                                                                                                j11eval[1] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) + ( IKabs ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1808 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1808 ) ) ) ) ) );
                                                                                                                                j11eval[2] = IKsign ( x1809 );
                                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                                {
                                                                                                                                    continue; // 1 cases reached

                                                                                                                                } else
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                        bool j11valid[1] = {false};
                                                                                                                                        _nj11 = 1;
                                                                                                                                        IkReal x1810 = ( ( 1.0 ) * sj12 );
                                                                                                                                        CheckValue<IkReal> x1811 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1810 ) ) ) ), -1 );
                                                                                                                                        if ( !x1811.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        CheckValue<IkReal> x1812 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1810 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1810 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                        if ( !x1812.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1811.value ) ) ) + ( x1812.value ) );
                                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                                        {
                                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                                        }
                                                                                                                                        j11valid[0] = true;
                                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                        {
                                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            _ij11[0] = ij11;
                                                                                                                                            _ij11[1] = -1;
                                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                            {
                                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                {
                                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            j11 = j11array[ij11];
                                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[6];
                                                                                                                                                IkReal x1813 = IKsin ( j11 );
                                                                                                                                                IkReal x1814 = IKcos ( j11 );
                                                                                                                                                IkReal x1815 = ( cj12 * r20 );
                                                                                                                                                IkReal x1816 = ( sj7 * sj8 );
                                                                                                                                                IkReal x1817 = ( ( 1.0 ) * x1813 );
                                                                                                                                                IkReal x1818 = ( sj12 * x1813 );
                                                                                                                                                IkReal x1819 = ( cj12 * x1814 );
                                                                                                                                                IkReal x1820 = ( ( 1.0 ) * x1814 );
                                                                                                                                                IkReal x1821 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                                                IkReal x1822 = ( sj12 * x1820 );
                                                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1820 ) ) + ( ( ( -1.0 ) * x1815 * x1817 ) ) + ( ( r21 * x1818 ) ) );
                                                                                                                                                evalcond[1] = ( ( ( ( -1.0 ) * cj12 * r10 * x1817 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x1820 ) ) + ( ( r11 * x1818 ) ) );
                                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( r01 * x1818 ) ) + ( ( ( -1.0 ) * r02 * x1820 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1817 ) ) );
                                                                                                                                                evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( x1814 * x1815 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * r21 * x1822 ) ) + ( ( ( -1.0 ) * r22 * x1817 ) ) );
                                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * cj9 * x1821 ) ) + ( ( ( -1.0 ) * r02 * x1817 ) ) + ( ( ( -1.0 ) * r01 * x1822 ) ) + ( ( cj9 * x1816 ) ) + ( ( r00 * x1819 ) ) );
                                                                                                                                                evalcond[5] = ( ( ( sj9 * x1816 ) ) + ( ( ( -1.0 ) * sj9 * x1821 ) ) + ( ( ( -1.0 ) * r12 * x1817 ) ) + ( ( ( -1.0 ) * r11 * x1822 ) ) + ( ( r10 * x1819 ) ) );
                                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            {
                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                }

                                                                                                                            }

                                                                                                                        } else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                _nj11 = 1;
                                                                                                                                IkReal x1823 = ( ( 1.0 ) * cj12 );
                                                                                                                                CheckValue<IkReal> x1824 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x1823 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                                                if ( !x1824.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x1825 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( ( -1.0 ) * r20 * sj9 * x1823 ) ) + ( ( r21 * sj12 * sj9 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                if ( !x1825.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1824.value ) ) ) + ( x1825.value ) );
                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                {
                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j11valid[0] = true;
                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                {
                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                    _ij11[1] = -1;
                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                    {
                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                        {
                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[6];
                                                                                                                                        IkReal x1826 = IKsin ( j11 );
                                                                                                                                        IkReal x1827 = IKcos ( j11 );
                                                                                                                                        IkReal x1828 = ( cj12 * r20 );
                                                                                                                                        IkReal x1829 = ( sj7 * sj8 );
                                                                                                                                        IkReal x1830 = ( ( 1.0 ) * x1826 );
                                                                                                                                        IkReal x1831 = ( sj12 * x1826 );
                                                                                                                                        IkReal x1832 = ( cj12 * x1827 );
                                                                                                                                        IkReal x1833 = ( ( 1.0 ) * x1827 );
                                                                                                                                        IkReal x1834 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                                        IkReal x1835 = ( sj12 * x1833 );
                                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * x1828 * x1830 ) ) + ( ( r21 * x1831 ) ) + ( ( ( -1.0 ) * r22 * x1833 ) ) );
                                                                                                                                        evalcond[1] = ( cj9 + ( ( r11 * x1831 ) ) + ( ( ( -1.0 ) * r12 * x1833 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1830 ) ) );
                                                                                                                                        evalcond[2] = ( ( ( r01 * x1831 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1830 ) ) + ( ( ( -1.0 ) * r02 * x1833 ) ) );
                                                                                                                                        evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * r21 * x1835 ) ) + ( ( x1827 * x1828 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * r22 * x1830 ) ) );
                                                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * cj9 * x1834 ) ) + ( ( ( -1.0 ) * r01 * x1835 ) ) + ( ( cj9 * x1829 ) ) + ( ( ( -1.0 ) * r02 * x1830 ) ) + ( ( r00 * x1832 ) ) );
                                                                                                                                        evalcond[5] = ( ( ( r10 * x1832 ) ) + ( ( ( -1.0 ) * sj9 * x1834 ) ) + ( ( sj9 * x1829 ) ) + ( ( ( -1.0 ) * r12 * x1830 ) ) + ( ( ( -1.0 ) * r11 * x1835 ) ) );
                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }

                                                                                                                        }

                                                                                                                    }

                                                                                                                } else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                        bool j11valid[1] = {false};
                                                                                                                        _nj11 = 1;
                                                                                                                        IkReal x1836 = ( ( 1.0 ) * cj12 );
                                                                                                                        CheckValue<IkReal> x1837 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x1836 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x1837.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x1838 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x1836 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                                                                        if ( !x1838.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x1837.value ) + ( ( ( 1.5707963267949 ) * ( x1838.value ) ) ) );
                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                        {
                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j11valid[0] = true;
                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                        {
                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij11[0] = ij11;
                                                                                                                            _ij11[1] = -1;
                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                            {
                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                {
                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j11 = j11array[ij11];
                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                            {
                                                                                                                                IkReal evalcond[6];
                                                                                                                                IkReal x1839 = IKsin ( j11 );
                                                                                                                                IkReal x1840 = IKcos ( j11 );
                                                                                                                                IkReal x1841 = ( cj12 * r20 );
                                                                                                                                IkReal x1842 = ( sj7 * sj8 );
                                                                                                                                IkReal x1843 = ( ( 1.0 ) * x1839 );
                                                                                                                                IkReal x1844 = ( sj12 * x1839 );
                                                                                                                                IkReal x1845 = ( cj12 * x1840 );
                                                                                                                                IkReal x1846 = ( ( 1.0 ) * x1840 );
                                                                                                                                IkReal x1847 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                                IkReal x1848 = ( sj12 * x1846 );
                                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * x1841 * x1843 ) ) + ( ( ( -1.0 ) * r22 * x1846 ) ) + ( ( r21 * x1844 ) ) );
                                                                                                                                evalcond[1] = ( cj9 + ( ( ( -1.0 ) * cj12 * r10 * x1843 ) ) + ( ( ( -1.0 ) * r12 * x1846 ) ) + ( ( r11 * x1844 ) ) );
                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1843 ) ) + ( ( ( -1.0 ) * r02 * x1846 ) ) + ( ( r01 * x1844 ) ) );
                                                                                                                                evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * r22 * x1843 ) ) + ( ( x1840 * x1841 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * r21 * x1848 ) ) );
                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * r02 * x1843 ) ) + ( ( ( -1.0 ) * r01 * x1848 ) ) + ( ( r00 * x1845 ) ) + ( ( ( -1.0 ) * cj9 * x1847 ) ) + ( ( cj9 * x1842 ) ) );
                                                                                                                                evalcond[5] = ( ( ( sj9 * x1842 ) ) + ( ( ( -1.0 ) * sj9 * x1847 ) ) + ( ( r10 * x1845 ) ) + ( ( ( -1.0 ) * r12 * x1843 ) ) + ( ( ( -1.0 ) * r11 * x1848 ) ) );
                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }

                                                                                                                }

                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                }

                                                                                            }

                                                                                        } else
                                                                                        {
                                                                                            {
                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                bool j11valid[1] = {false};
                                                                                                _nj11 = 1;
                                                                                                IkReal x1849 = cj12 * cj12;
                                                                                                IkReal x1850 = r21 * r21;
                                                                                                IkReal x1851 = ( r21 * sj12 );
                                                                                                IkReal x1852 = ( cj7 * sj8 );
                                                                                                IkReal x1853 = ( cj8 * sj7 );
                                                                                                IkReal x1854 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                CheckValue<IkReal> x1855 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * x1849 * x1850 ) ) + ( r22 * r22 ) + ( ( ( -2.0 ) * cj12 * r20 * x1851 ) ) + ( ( x1849 * ( r20 * r20 ) ) ) + x1850 ) ), -1 );
                                                                                                if ( !x1855.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                CheckValue<IkReal> x1856 = IKatan2WithCheck ( IkReal ( ( ( ( r22 * x1852 ) ) + ( ( r22 * x1853 ) ) ) ), IkReal ( ( ( ( x1851 * x1853 ) ) + ( ( x1851 * x1852 ) ) + ( ( ( -1.0 ) * x1852 * x1854 ) ) + ( ( ( -1.0 ) * x1853 * x1854 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                if ( !x1856.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1855.value ) ) ) + ( x1856.value ) );
                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                if ( j11array[0] > IKPI )
                                                                                                {
                                                                                                    j11array[0] -= IK2PI;
                                                                                                }
                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                {   j11array[0] += IK2PI;
                                                                                                }
                                                                                                j11valid[0] = true;
                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                {
                                                                                                    if ( !j11valid[ij11] )
                                                                                                    {
                                                                                                        continue;
                                                                                                    }
                                                                                                    _ij11[0] = ij11;
                                                                                                    _ij11[1] = -1;
                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                    {
                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                        {
                                                                                                            j11valid[iij11] = false;
                                                                                                            _ij11[1] = iij11;
                                                                                                            break;
                                                                                                        }
                                                                                                    }
                                                                                                    j11 = j11array[ij11];
                                                                                                    cj11 = cj11array[ij11];
                                                                                                    sj11 = sj11array[ij11];
                                                                                                    {
                                                                                                        IkReal evalcond[2];
                                                                                                        IkReal x1857 = IKsin ( j11 );
                                                                                                        IkReal x1858 = IKcos ( j11 );
                                                                                                        IkReal x1859 = ( cj12 * r20 );
                                                                                                        IkReal x1860 = ( r21 * sj12 );
                                                                                                        IkReal x1861 = ( ( 1.0 ) * x1857 );
                                                                                                        IkReal x1862 = ( ( 1.0 ) * x1858 );
                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * x1859 * x1861 ) ) + ( ( x1857 * x1860 ) ) + ( ( ( -1.0 ) * r22 * x1862 ) ) );
                                                                                                        evalcond[1] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * x1860 * x1862 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * r22 * x1861 ) ) + ( ( x1858 * x1859 ) ) );
                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                        {
                                                                                                            continue;
                                                                                                        }
                                                                                                    }

                                                                                                    {
                                                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                                        bool j9valid[1] = {false};
                                                                                                        _nj9 = 1;
                                                                                                        IkReal x1863 = ( sj11 * sj12 );
                                                                                                        IkReal x1864 = ( cj12 * sj11 );
                                                                                                        if ( IKabs ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( ( -1.0 ) *r00 * x1864 ) ) + ( ( r01 * x1863 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( ( -1.0 ) *r11 * x1863 ) ) + ( ( cj11 * r12 ) ) + ( ( r10 * x1864 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( ( -1.0 ) *r00 * x1864 ) ) + ( ( r01 * x1863 ) ) ) ) + IKsqr ( ( ( ( ( -1.0 ) *r11 * x1863 ) ) + ( ( cj11 * r12 ) ) + ( ( r10 * x1864 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                            continue;
                                                                                                        j9array[0] = IKatan2 ( ( ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( ( -1.0 ) * r00 * x1864 ) ) + ( ( r01 * x1863 ) ) ), ( ( ( ( -1.0 ) * r11 * x1863 ) ) + ( ( cj11 * r12 ) ) + ( ( r10 * x1864 ) ) ) );
                                                                                                        sj9array[0] = IKsin ( j9array[0] );
                                                                                                        cj9array[0] = IKcos ( j9array[0] );
                                                                                                        if ( j9array[0] > IKPI )
                                                                                                        {
                                                                                                            j9array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if ( j9array[0] < -IKPI )
                                                                                                        {   j9array[0] += IK2PI;
                                                                                                        }
                                                                                                        j9valid[0] = true;
                                                                                                        for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                                        {
                                                                                                            if ( !j9valid[ij9] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij9[0] = ij9;
                                                                                                            _ij9[1] = -1;
                                                                                                            for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                                            {
                                                                                                                if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j9valid[iij9] = false;
                                                                                                                    _ij9[1] = iij9;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j9 = j9array[ij9];
                                                                                                            cj9 = cj9array[ij9];
                                                                                                            sj9 = sj9array[ij9];
                                                                                                            {
                                                                                                                IkReal evalcond[8];
                                                                                                                IkReal x1865 = IKcos ( j9 );
                                                                                                                IkReal x1866 = IKsin ( j9 );
                                                                                                                IkReal x1867 = ( sj11 * sj12 );
                                                                                                                IkReal x1868 = ( ( 1.0 ) * r00 );
                                                                                                                IkReal x1869 = ( cj12 * sj11 );
                                                                                                                IkReal x1870 = ( cj11 * cj12 );
                                                                                                                IkReal x1871 = ( ( 1.0 ) * cj8 );
                                                                                                                IkReal x1872 = ( ( 0.1157 ) * sj12 );
                                                                                                                IkReal x1873 = ( ( 1.0 ) * sj8 );
                                                                                                                IkReal x1874 = ( ( 0.5723 ) * sj8 );
                                                                                                                IkReal x1875 = ( ( 1.0 ) * cj11 );
                                                                                                                IkReal x1876 = ( ( 0.612 ) * cj8 );
                                                                                                                IkReal x1877 = ( ( 0.5723 ) * cj8 );
                                                                                                                IkReal x1878 = ( ( 1.0 ) * cj12 );
                                                                                                                IkReal x1879 = ( ( 1.0 ) * r10 );
                                                                                                                IkReal x1880 = ( ( 1.0 ) * sj11 );
                                                                                                                IkReal x1881 = ( ( 0.1157 ) * cj12 );
                                                                                                                IkReal x1882 = ( sj7 * x1865 );
                                                                                                                IkReal x1883 = ( cj7 * x1866 );
                                                                                                                IkReal x1884 = ( cj7 * x1865 );
                                                                                                                IkReal x1885 = ( sj7 * x1866 );
                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * x1869 * x1879 ) ) + ( ( r11 * x1867 ) ) + x1865 + ( ( ( -1.0 ) * r12 * x1875 ) ) );
                                                                                                                evalcond[1] = ( ( ( ( -1.0 ) * r02 * x1875 ) ) + ( ( ( -1.0 ) * x1868 * x1869 ) ) + ( ( r01 * x1867 ) ) + ( ( ( -1.0 ) * x1866 ) ) );
                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * x1873 * x1884 ) ) + ( ( ( -1.0 ) * r01 * x1878 ) ) + ( ( ( -1.0 ) * sj12 * x1868 ) ) + ( ( ( -1.0 ) * x1871 * x1882 ) ) );
                                                                                                                evalcond[3] = ( ( ( ( -1.0 ) * x1873 * x1883 ) ) + ( ( ( -1.0 ) * x1871 * x1885 ) ) + ( ( ( -1.0 ) * r11 * x1878 ) ) + ( ( ( -1.0 ) * sj12 * x1879 ) ) );
                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * r02 * x1880 ) ) + ( ( ( -1.0 ) * x1871 * x1884 ) ) + ( ( ( -1.0 ) * r01 * sj12 * x1875 ) ) + ( ( r00 * x1870 ) ) + ( ( sj8 * x1882 ) ) );
                                                                                                                evalcond[5] = ( ( ( ( -1.0 ) * r11 * sj12 * x1875 ) ) + ( ( ( -1.0 ) * r12 * x1880 ) ) + ( ( ( -1.0 ) * x1871 * x1883 ) ) + ( ( sj8 * x1885 ) ) + ( ( r10 * x1870 ) ) );
                                                                                                                evalcond[6] = ( ( ( x1877 * x1884 ) ) + ( ( x1865 * x1876 ) ) + ( ( ( -1.0 ) * r00 * x1872 ) ) + ( ( ( -0.163941 ) * x1866 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * r01 * x1881 ) ) + ( ( ( -1.0 ) * x1874 * x1882 ) ) );
                                                                                                                evalcond[7] = ( ( ( x1866 * x1876 ) ) + ( ( x1877 * x1883 ) ) + ( ( ( 0.163941 ) * x1865 ) ) + ( ( ( -1.0 ) * r10 * x1872 ) ) + ( ( ( -1.0 ) * r11 * x1881 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -1.0 ) * x1874 * x1885 ) ) );
                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j9;
                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j8;
                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j7;
                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j10;
                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j11;
                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j12;
                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }

                                                                                        }

                                                                                    }

                                                                                } else
                                                                                {
                                                                                    {
                                                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                                                        bool j9valid[1] = {false};
                                                                                        _nj9 = 1;
                                                                                        CheckValue<IkReal> x1886 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj7 * sj8 ) ) ) ), -1 );
                                                                                        if ( !x1886.valid ) {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x1887 = IKatan2WithCheck ( IkReal ( ( ( ( r10 * sj12 ) ) + ( ( cj12 * r11 ) ) ) ), IkReal ( ( ( ( r00 * sj12 ) ) + ( ( cj12 * r01 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                        if ( !x1887.valid ) {
                                                                                            continue;
                                                                                        }
                                                                                        j9array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1886.value ) ) ) + ( x1887.value ) );
                                                                                        sj9array[0] = IKsin ( j9array[0] );
                                                                                        cj9array[0] = IKcos ( j9array[0] );
                                                                                        if ( j9array[0] > IKPI )
                                                                                        {
                                                                                            j9array[0] -= IK2PI;
                                                                                        }
                                                                                        else if ( j9array[0] < -IKPI )
                                                                                        {   j9array[0] += IK2PI;
                                                                                        }
                                                                                        j9valid[0] = true;
                                                                                        for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                                                        {
                                                                                            if ( !j9valid[ij9] )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij9[0] = ij9;
                                                                                            _ij9[1] = -1;
                                                                                            for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                                                            {
                                                                                                if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                                                {
                                                                                                    j9valid[iij9] = false;
                                                                                                    _ij9[1] = iij9;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j9 = j9array[ij9];
                                                                                            cj9 = cj9array[ij9];
                                                                                            sj9 = sj9array[ij9];
                                                                                            {
                                                                                                IkReal evalcond[4];
                                                                                                IkReal x1888 = IKcos ( j9 );
                                                                                                IkReal x1889 = IKsin ( j9 );
                                                                                                IkReal x1890 = ( ( 1.0 ) * sj12 );
                                                                                                IkReal x1891 = ( ( 1.0 ) * cj8 );
                                                                                                IkReal x1892 = ( ( 0.1157 ) * sj12 );
                                                                                                IkReal x1893 = ( ( 0.5723 ) * sj8 );
                                                                                                IkReal x1894 = ( ( 0.612 ) * cj8 );
                                                                                                IkReal x1895 = ( ( 1.0 ) * cj12 );
                                                                                                IkReal x1896 = ( ( 0.1157 ) * cj12 );
                                                                                                IkReal x1897 = ( sj7 * x1888 );
                                                                                                IkReal x1898 = ( ( 1.0 ) * cj7 * sj8 );
                                                                                                IkReal x1899 = ( ( 0.5723 ) * cj7 * cj8 );
                                                                                                IkReal x1900 = ( sj7 * x1889 );
                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * x1891 * x1897 ) ) + ( ( ( -1.0 ) * x1888 * x1898 ) ) + ( ( ( -1.0 ) * r01 * x1895 ) ) + ( ( ( -1.0 ) * r00 * x1890 ) ) );
                                                                                                evalcond[1] = ( ( ( ( -1.0 ) * r10 * x1890 ) ) + ( ( ( -1.0 ) * r11 * x1895 ) ) + ( ( ( -1.0 ) * x1889 * x1898 ) ) + ( ( ( -1.0 ) * x1891 * x1900 ) ) );
                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * x1893 * x1897 ) ) + ( ( x1888 * x1899 ) ) + ( ( x1888 * x1894 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * r01 * x1896 ) ) + ( ( ( -1.0 ) * r00 * x1892 ) ) + ( ( ( -0.163941 ) * x1889 ) ) );
                                                                                                evalcond[3] = ( ( ( ( 0.163941 ) * x1888 ) ) + ( ( ( -1.0 ) * x1893 * x1900 ) ) + ( ( ( -1.0 ) * r10 * x1892 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -1.0 ) * r11 * x1896 ) ) + ( ( x1889 * x1894 ) ) + ( ( x1889 * x1899 ) ) );
                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                IkReal j11eval[3];
                                                                                                sj10 = 0;
                                                                                                cj10 = -1.0;
                                                                                                j10 = 3.14159265358979;
                                                                                                IkReal x1901 = ( ( 1.0 ) * cj12 );
                                                                                                IkReal x1902 = ( ( ( ( -1.0 ) * r00 * sj12 ) ) + ( ( ( -1.0 ) * r01 * x1901 ) ) );
                                                                                                j11eval[0] = x1902;
                                                                                                j11eval[1] = IKsign ( x1902 );
                                                                                                j11eval[2] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r20 * x1901 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ) ) );
                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j11eval[3];
                                                                                                        sj10 = 0;
                                                                                                        cj10 = -1.0;
                                                                                                        j10 = 3.14159265358979;
                                                                                                        IkReal x1903 = ( ( 1.0 ) * cj12 );
                                                                                                        IkReal x1904 = ( ( ( ( -1.0 ) * r11 * x1903 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) );
                                                                                                        j11eval[0] = x1904;
                                                                                                        j11eval[1] = ( ( IKabs ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1903 ) ) ) ) ) + ( IKabs ( ( r22 * sj9 ) ) ) );
                                                                                                        j11eval[2] = IKsign ( x1904 );
                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j11eval[3];
                                                                                                                sj10 = 0;
                                                                                                                cj10 = -1.0;
                                                                                                                j10 = 3.14159265358979;
                                                                                                                IkReal x1905 = ( ( 1.0 ) * sj12 );
                                                                                                                IkReal x1906 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1905 ) ) );
                                                                                                                j11eval[0] = x1906;
                                                                                                                j11eval[1] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) + ( IKabs ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1905 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1905 ) ) ) ) ) );
                                                                                                                j11eval[2] = IKsign ( x1906 );
                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                {
                                                                                                                    continue; // 1 cases reached

                                                                                                                } else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                        bool j11valid[1] = {false};
                                                                                                                        _nj11 = 1;
                                                                                                                        IkReal x1907 = ( ( 1.0 ) * sj12 );
                                                                                                                        CheckValue<IkReal> x1908 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1907 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1907 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x1908.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x1909 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1907 ) ) ) ), -1 );
                                                                                                                        if ( !x1909.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x1908.value ) + ( ( ( 1.5707963267949 ) * ( x1909.value ) ) ) );
                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                        {
                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j11valid[0] = true;
                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                        {
                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij11[0] = ij11;
                                                                                                                            _ij11[1] = -1;
                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                            {
                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                {
                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j11 = j11array[ij11];
                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                            {
                                                                                                                                IkReal evalcond[6];
                                                                                                                                IkReal x1910 = IKsin ( j11 );
                                                                                                                                IkReal x1911 = IKcos ( j11 );
                                                                                                                                IkReal x1912 = ( cj12 * r20 );
                                                                                                                                IkReal x1913 = ( sj7 * sj8 );
                                                                                                                                IkReal x1914 = ( ( 1.0 ) * x1910 );
                                                                                                                                IkReal x1915 = ( sj12 * x1910 );
                                                                                                                                IkReal x1916 = ( cj12 * x1911 );
                                                                                                                                IkReal x1917 = ( ( 1.0 ) * x1911 );
                                                                                                                                IkReal x1918 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                                IkReal x1919 = ( sj12 * x1917 );
                                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1917 ) ) + ( ( r21 * x1915 ) ) + ( ( ( -1.0 ) * x1912 * x1914 ) ) );
                                                                                                                                evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r12 * x1917 ) ) + ( ( r11 * x1915 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1914 ) ) );
                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x1917 ) ) + ( ( r01 * x1915 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1914 ) ) );
                                                                                                                                evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * r22 * x1914 ) ) + ( ( x1911 * x1912 ) ) + ( ( ( -1.0 ) * r21 * x1919 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * r01 * x1919 ) ) + ( ( ( -1.0 ) * r02 * x1914 ) ) + ( ( r00 * x1916 ) ) + ( ( cj9 * x1913 ) ) + ( ( ( -1.0 ) * cj9 * x1918 ) ) );
                                                                                                                                evalcond[5] = ( ( ( r10 * x1916 ) ) + ( ( sj9 * x1913 ) ) + ( ( ( -1.0 ) * r12 * x1914 ) ) + ( ( ( -1.0 ) * r11 * x1919 ) ) + ( ( ( -1.0 ) * sj9 * x1918 ) ) );
                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }

                                                                                                                }

                                                                                                            }

                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                bool j11valid[1] = {false};
                                                                                                                _nj11 = 1;
                                                                                                                IkReal x1920 = ( ( 1.0 ) * cj12 );
                                                                                                                CheckValue<IkReal> x1921 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x1920 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                                if ( !x1921.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x1922 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x1920 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                if ( !x1922.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1921.value ) ) ) + ( x1922.value ) );
                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                {
                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                }
                                                                                                                j11valid[0] = true;
                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                {
                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij11[0] = ij11;
                                                                                                                    _ij11[1] = -1;
                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                    {
                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                        {
                                                                                                                            j11valid[iij11] = false;
                                                                                                                            _ij11[1] = iij11;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j11 = j11array[ij11];
                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                    {
                                                                                                                        IkReal evalcond[6];
                                                                                                                        IkReal x1923 = IKsin ( j11 );
                                                                                                                        IkReal x1924 = IKcos ( j11 );
                                                                                                                        IkReal x1925 = ( cj12 * r20 );
                                                                                                                        IkReal x1926 = ( sj7 * sj8 );
                                                                                                                        IkReal x1927 = ( ( 1.0 ) * x1923 );
                                                                                                                        IkReal x1928 = ( sj12 * x1923 );
                                                                                                                        IkReal x1929 = ( cj12 * x1924 );
                                                                                                                        IkReal x1930 = ( ( 1.0 ) * x1924 );
                                                                                                                        IkReal x1931 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                        IkReal x1932 = ( sj12 * x1930 );
                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1930 ) ) + ( ( ( -1.0 ) * x1925 * x1927 ) ) + ( ( r21 * x1928 ) ) );
                                                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * cj12 * r10 * x1927 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x1930 ) ) + ( ( r11 * x1928 ) ) );
                                                                                                                        evalcond[2] = ( ( ( r01 * x1928 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1927 ) ) + ( ( ( -1.0 ) * r02 * x1930 ) ) );
                                                                                                                        evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * r22 * x1927 ) ) + ( ( ( -1.0 ) * r21 * x1932 ) ) + ( ( cj7 * sj8 ) ) + ( ( x1924 * x1925 ) ) );
                                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * r01 * x1932 ) ) + ( ( r00 * x1929 ) ) + ( ( cj9 * x1926 ) ) + ( ( ( -1.0 ) * cj9 * x1931 ) ) + ( ( ( -1.0 ) * r02 * x1927 ) ) );
                                                                                                                        evalcond[5] = ( ( ( ( -1.0 ) * r12 * x1927 ) ) + ( ( sj9 * x1926 ) ) + ( ( ( -1.0 ) * r11 * x1932 ) ) + ( ( ( -1.0 ) * sj9 * x1931 ) ) + ( ( r10 * x1929 ) ) );
                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                    }
                                                                                                                }
                                                                                                            }

                                                                                                        }

                                                                                                    }

                                                                                                } else
                                                                                                {
                                                                                                    {
                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                        bool j11valid[1] = {false};
                                                                                                        _nj11 = 1;
                                                                                                        IkReal x1933 = ( ( 1.0 ) * cj12 );
                                                                                                        CheckValue<IkReal> x1934 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x1933 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                                                        if ( !x1934.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        CheckValue<IkReal> x1935 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( cj9 * r21 * sj12 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x1933 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                        if ( !x1935.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x1934.value ) ) ) + ( x1935.value ) );
                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                        if ( j11array[0] > IKPI )
                                                                                                        {
                                                                                                            j11array[0] -= IK2PI;
                                                                                                        }
                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                        {   j11array[0] += IK2PI;
                                                                                                        }
                                                                                                        j11valid[0] = true;
                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                        {
                                                                                                            if ( !j11valid[ij11] )
                                                                                                            {
                                                                                                                continue;
                                                                                                            }
                                                                                                            _ij11[0] = ij11;
                                                                                                            _ij11[1] = -1;
                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                            {
                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                {
                                                                                                                    j11valid[iij11] = false;
                                                                                                                    _ij11[1] = iij11;
                                                                                                                    break;
                                                                                                                }
                                                                                                            }
                                                                                                            j11 = j11array[ij11];
                                                                                                            cj11 = cj11array[ij11];
                                                                                                            sj11 = sj11array[ij11];
                                                                                                            {
                                                                                                                IkReal evalcond[6];
                                                                                                                IkReal x1936 = IKsin ( j11 );
                                                                                                                IkReal x1937 = IKcos ( j11 );
                                                                                                                IkReal x1938 = ( cj12 * r20 );
                                                                                                                IkReal x1939 = ( sj7 * sj8 );
                                                                                                                IkReal x1940 = ( ( 1.0 ) * x1936 );
                                                                                                                IkReal x1941 = ( sj12 * x1936 );
                                                                                                                IkReal x1942 = ( cj12 * x1937 );
                                                                                                                IkReal x1943 = ( ( 1.0 ) * x1937 );
                                                                                                                IkReal x1944 = ( ( 1.0 ) * cj7 * cj8 );
                                                                                                                IkReal x1945 = ( sj12 * x1943 );
                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r22 * x1943 ) ) + ( ( r21 * x1941 ) ) + ( ( ( -1.0 ) * x1938 * x1940 ) ) );
                                                                                                                evalcond[1] = ( cj9 + ( ( r11 * x1941 ) ) + ( ( ( -1.0 ) * r12 * x1943 ) ) + ( ( ( -1.0 ) * cj12 * r10 * x1940 ) ) );
                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * cj12 * r00 * x1940 ) ) + ( ( ( -1.0 ) * r02 * x1943 ) ) + ( ( r01 * x1941 ) ) );
                                                                                                                evalcond[3] = ( ( ( ( -1.0 ) * r21 * x1945 ) ) + ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * r22 * x1940 ) ) + ( ( cj7 * sj8 ) ) + ( ( x1937 * x1938 ) ) );
                                                                                                                evalcond[4] = ( ( ( cj9 * x1939 ) ) + ( ( ( -1.0 ) * r02 * x1940 ) ) + ( ( r00 * x1942 ) ) + ( ( ( -1.0 ) * r01 * x1945 ) ) + ( ( ( -1.0 ) * cj9 * x1944 ) ) );
                                                                                                                evalcond[5] = ( ( ( sj9 * x1939 ) ) + ( ( r10 * x1942 ) ) + ( ( ( -1.0 ) * r12 * x1940 ) ) + ( ( ( -1.0 ) * sj9 * x1944 ) ) + ( ( ( -1.0 ) * r11 * x1945 ) ) );
                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                            }

                                                                                                            {
                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                vinfos[0].foffset = j9;
                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                vinfos[1].foffset = j8;
                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                vinfos[2].foffset = j7;
                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                vinfos[3].foffset = j10;
                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                vinfos[4].foffset = j11;
                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                vinfos[5].foffset = j12;
                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                            }
                                                                                                        }
                                                                                                    }

                                                                                                }

                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        }
                                                                    } while ( 0 );
                                                                    if ( bgotonextstatement )
                                                                    {
                                                                        bool bgotonextstatement = true;
                                                                        do
                                                                        {
                                                                            if ( 1 )
                                                                            {
                                                                                bgotonextstatement = false;
                                                                                continue; // branch miss [j9, j11]

                                                                            }
                                                                        } while ( 0 );
                                                                        if ( bgotonextstatement )
                                                                        {
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }

                                                } else
                                                {
                                                    {
                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                        bool j9valid[1] = {false};
                                                        _nj9 = 1;
                                                        IkReal x1946 = cj8 * cj8;
                                                        IkReal x1947 = cj7 * cj7;
                                                        IkReal x1948 = ( ( 18967973700.0 ) * sj12 );
                                                        IkReal x1949 = ( cj12 * r01 );
                                                        IkReal x1950 = ( r10 * sj12 );
                                                        IkReal x1951 = ( ( 70808400000.0 ) * cj8 );
                                                        IkReal x1952 = ( ( 612000000000.0 ) * cj8 );
                                                        IkReal x1953 = ( cj12 * r11 );
                                                        IkReal x1954 = ( r00 * sj12 );
                                                        IkReal x1955 = ( cj7 * cj8 );
                                                        IkReal x1956 = ( ( 572300000000.0 ) * px );
                                                        IkReal x1957 = ( ( 572300000000.0 ) * py );
                                                        IkReal x1958 = ( sj7 * sj8 );
                                                        IkReal x1959 = ( cj8 * x1958 );
                                                        IkReal x1960 = ( ( 66215110000.0 ) * x1958 );
                                                        CheckValue<IkReal> x1961 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * x1957 * x1958 ) ) + ( ( x1950 * x1951 ) ) + ( ( py * x1952 ) ) + ( ( ( 66215110000.0 ) * x1953 * x1955 ) ) + ( ( x1955 * x1957 ) ) + ( ( x1951 * x1953 ) ) + ( ( ( -1.0 ) * x1950 * x1960 ) ) + ( ( ( -1.0 ) * r00 * x1948 ) ) + ( ( ( 66215110000.0 ) * x1950 * x1955 ) ) + ( ( ( -1.0 ) * x1953 * x1960 ) ) + ( ( ( -163941000000.0 ) * px ) ) + ( ( ( -18967973700.0 ) * x1949 ) ) ) ), IkReal ( ( ( ( ( 163941000000.0 ) * py ) ) + ( ( ( -1.0 ) * x1949 * x1960 ) ) + ( ( ( 18967973700.0 ) * x1953 ) ) + ( ( r10 * x1948 ) ) + ( ( x1955 * x1956 ) ) + ( ( x1951 * x1954 ) ) + ( ( px * x1952 ) ) + ( ( ( 66215110000.0 ) * x1954 * x1955 ) ) + ( ( ( 66215110000.0 ) * x1949 * x1955 ) ) + ( ( x1949 * x1951 ) ) + ( ( ( -1.0 ) * x1956 * x1958 ) ) + ( ( ( -1.0 ) * x1954 * x1960 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                        if ( !x1961.valid ) {
                                                            continue;
                                                        }
                                                        CheckValue<IkReal> x1962 = IKPowWithIntegerCheck ( IKsign ( ( ( 354403941481.0 ) + ( ( ( 47016710000.0 ) * x1946 ) ) + ( ( ( -327527290000.0 ) * x1947 ) ) + ( ( ( -655054580000.0 ) * x1955 * x1958 ) ) + ( ( ( 655054580000.0 ) * x1946 * x1947 ) ) + ( ( ( 700495200000.0 ) * cj7 * x1946 ) ) + ( ( ( -700495200000.0 ) * x1959 ) ) ) ), -1 );
                                                        if ( !x1962.valid ) {
                                                            continue;
                                                        }
                                                        j9array[0] = ( ( -1.5707963267949 ) + ( x1961.value ) + ( ( ( 1.5707963267949 ) * ( x1962.value ) ) ) );
                                                        sj9array[0] = IKsin ( j9array[0] );
                                                        cj9array[0] = IKcos ( j9array[0] );
                                                        if ( j9array[0] > IKPI )
                                                        {
                                                            j9array[0] -= IK2PI;
                                                        }
                                                        else if ( j9array[0] < -IKPI )
                                                        {   j9array[0] += IK2PI;
                                                        }
                                                        j9valid[0] = true;
                                                        for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                        {
                                                            if ( !j9valid[ij9] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij9[0] = ij9;
                                                            _ij9[1] = -1;
                                                            for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                            {
                                                                if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j9valid[iij9] = false;
                                                                    _ij9[1] = iij9;
                                                                    break;
                                                                }
                                                            }
                                                            j9 = j9array[ij9];
                                                            cj9 = cj9array[ij9];
                                                            sj9 = sj9array[ij9];
                                                            {
                                                                IkReal evalcond[2];
                                                                IkReal x1963 = IKcos ( j9 );
                                                                IkReal x1964 = IKsin ( j9 );
                                                                IkReal x1965 = ( ( 0.1157 ) * sj12 );
                                                                IkReal x1966 = ( ( 0.1157 ) * cj12 );
                                                                IkReal x1967 = ( ( 0.5723 ) * cj7 );
                                                                IkReal x1968 = ( ( 0.5723 ) * sj7 * sj8 );
                                                                IkReal x1969 = ( cj8 * x1963 );
                                                                IkReal x1970 = ( cj8 * x1964 );
                                                                evalcond[0] = ( ( ( ( 0.612 ) * x1969 ) ) + ( ( ( -1.0 ) * r00 * x1965 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -1.0 ) * r01 * x1966 ) ) + ( ( ( -0.163941 ) * x1964 ) ) + ( ( ( -1.0 ) * x1963 * x1968 ) ) + ( ( x1967 * x1969 ) ) );
                                                                evalcond[1] = ( ( ( x1967 * x1970 ) ) + ( ( ( 0.163941 ) * x1963 ) ) + ( ( ( -1.0 ) * x1964 * x1968 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( -1.0 ) * r10 * x1965 ) ) + ( ( ( -1.0 ) * r11 * x1966 ) ) + ( ( ( 0.612 ) * x1970 ) ) );
                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                IkReal j11eval[3];
                                                                IkReal x1971 = ( ( 1.0 ) * cj12 );
                                                                IkReal x1972 = ( ( ( ( -1.0 ) * r01 * x1971 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                j11eval[0] = x1972;
                                                                j11eval[1] = IKsign ( x1972 );
                                                                j11eval[2] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r20 * x1971 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ) ) );
                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                {
                                                                    {
                                                                        IkReal j11eval[3];
                                                                        IkReal x1973 = ( ( 1.0 ) * cj12 );
                                                                        IkReal x1974 = ( ( ( ( -1.0 ) * r11 * x1973 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) );
                                                                        j11eval[0] = x1974;
                                                                        j11eval[1] = ( ( IKabs ( ( r22 * sj9 ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * r20 * sj9 * x1973 ) ) + ( ( r21 * sj12 * sj9 ) ) ) ) ) );
                                                                        j11eval[2] = IKsign ( x1974 );
                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                        {
                                                                            {
                                                                                IkReal j11eval[3];
                                                                                IkReal x1975 = ( ( 1.0 ) * sj12 );
                                                                                IkReal x1976 = ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x1975 ) ) );
                                                                                j11eval[0] = x1976;
                                                                                j11eval[1] = ( ( IKabs ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ) ) + ( IKabs ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x1975 ) ) + ( ( cj12 * cj9 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x1975 ) ) ) ) ) );
                                                                                j11eval[2] = IKsign ( x1976 );
                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                {
                                                                                    {
                                                                                        IkReal evalcond[1];
                                                                                        bool bgotonextstatement = true;
                                                                                        do
                                                                                        {
                                                                                            IkReal x1977 = ( ( -1.0 ) * r20 );
                                                                                            IkReal x1979 = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r22 * r22 ) ) ) );
                                                                                            if ( IKabs ( x1979 ) == 0 ) {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal x1978 = pow ( x1979, -0.5 );
                                                                                            CheckValue<IkReal> x1980 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r21 ) ), IkReal ( x1977 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                            if ( !x1980.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            IkReal gconst0 = ( ( -1.0 ) * ( x1980.value ) );
                                                                                            IkReal gconst1 = ( r21 * x1978 );
                                                                                            IkReal gconst2 = ( x1977 * x1978 );
                                                                                            CheckValue<IkReal> x1981 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r21 ) ), IkReal ( ( ( -1.0 ) * r20 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                            if ( !x1981.valid ) {
                                                                                                continue;
                                                                                            }
                                                                                            evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( j12 + ( x1981.value ) ) ) ) ), 6.28318530717959 ) ) );
                                                                                            if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                            {
                                                                                                bgotonextstatement = false;
                                                                                                {
                                                                                                    IkReal j11eval[1];
                                                                                                    IkReal x1982 = ( ( -1.0 ) * r20 );
                                                                                                    IkReal x1983 = x1978;
                                                                                                    CheckValue<IkReal> x1985 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r21 ) ), IkReal ( x1982 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                    if ( !x1985.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    IkReal x1984 = ( ( -1.0 ) * ( x1985.value ) );
                                                                                                    sj12 = gconst1;
                                                                                                    cj12 = gconst2;
                                                                                                    j12 = x1984;
                                                                                                    IkReal gconst0 = x1984;
                                                                                                    IkReal gconst1 = ( r21 * x1983 );
                                                                                                    IkReal gconst2 = ( x1982 * x1983 );
                                                                                                    j11eval[0] = cj9;
                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  )
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j11eval[1];
                                                                                                            IkReal x1986 = ( ( -1.0 ) * r20 );
                                                                                                            IkReal x1987 = x1978;
                                                                                                            CheckValue<IkReal> x1989 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r21 ) ), IkReal ( x1986 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                            if ( !x1989.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            IkReal x1988 = ( ( -1.0 ) * ( x1989.value ) );
                                                                                                            sj12 = gconst1;
                                                                                                            cj12 = gconst2;
                                                                                                            j12 = x1988;
                                                                                                            IkReal gconst0 = x1988;
                                                                                                            IkReal gconst1 = ( r21 * x1987 );
                                                                                                            IkReal gconst2 = ( x1986 * x1987 );
                                                                                                            j11eval[0] = sj9;
                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  )
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11eval[2];
                                                                                                                    IkReal x1990 = ( ( -1.0 ) * r20 );
                                                                                                                    IkReal x1991 = x1978;
                                                                                                                    CheckValue<IkReal> x1993 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r21 ) ), IkReal ( x1990 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x1993.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    IkReal x1992 = ( ( -1.0 ) * ( x1993.value ) );
                                                                                                                    sj12 = gconst1;
                                                                                                                    cj12 = gconst2;
                                                                                                                    j12 = x1992;
                                                                                                                    IkReal gconst0 = x1992;
                                                                                                                    IkReal gconst1 = ( r21 * x1991 );
                                                                                                                    IkReal gconst2 = ( x1990 * x1991 );
                                                                                                                    IkReal x1994 = r22 * r22;
                                                                                                                    CheckValue<IkReal> x1998 = IKPowWithIntegerCheck ( ( ( 1.0 ) + ( ( ( -1.0 ) * x1994 ) ) ), -1 );
                                                                                                                    if ( !x1998.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    IkReal x1995 = x1998.value;
                                                                                                                    IkReal x1996 = ( sj10 * x1995 );
                                                                                                                    IkReal x1997 = ( ( ( ( 2.0 ) * x1996 * ( r20 * r20 ) * ( r21 * r21 ) ) ) + ( ( x1996 * ( r20 * r20 * r20 * r20 ) ) ) + ( ( x1996 * ( r21 * r21 * r21 * r21 ) ) ) + ( ( sj10 * x1994 ) ) );
                                                                                                                    j11eval[0] = x1997;
                                                                                                                    j11eval[1] = IKsign ( x1997 );
                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                    {
                                                                                                                        continue; // 1 cases reached

                                                                                                                    } else
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                            bool j11valid[1] = {false};
                                                                                                                            _nj11 = 1;
                                                                                                                            IkReal x1999 = r21 * r21;
                                                                                                                            IkReal x2000 = gconst1 * gconst1;
                                                                                                                            IkReal x2001 = gconst2 * gconst2;
                                                                                                                            IkReal x2002 = r20 * r20;
                                                                                                                            IkReal x2003 = ( ( 1.0 ) * gconst2 );
                                                                                                                            IkReal x2004 = ( cj10 * gconst1 );
                                                                                                                            IkReal x2005 = ( sj7 * sj8 );
                                                                                                                            IkReal x2006 = ( cj7 * cj8 );
                                                                                                                            IkReal x2007 = ( gconst2 * r20 );
                                                                                                                            IkReal x2008 = ( gconst1 * r21 );
                                                                                                                            IkReal x2009 = ( cj10 * r20 * r21 );
                                                                                                                            CheckValue<IkReal> x2010 = IKatan2WithCheck ( IkReal ( ( ( ( r22 * x2005 ) ) + ( ( ( -1.0 ) * r22 * x2006 ) ) + ( ( cj10 * gconst2 * r21 * r22 ) ) + ( ( r20 * r22 * x2004 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * x2002 * x2003 * x2004 ) ) + ( ( x2000 * x2009 ) ) + ( ( ( -1.0 ) * r20 * x2003 * x2005 ) ) + ( ( ( -1.0 ) * x2006 * x2008 ) ) + ( ( ( -1.0 ) * x2001 * x2009 ) ) + ( ( x2006 * x2007 ) ) + ( ( x2005 * x2008 ) ) + ( ( gconst2 * x1999 * x2004 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                            if ( !x2010.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            CheckValue<IkReal> x2011 = IKPowWithIntegerCheck ( IKsign ( ( ( ( sj10 * ( r22 * r22 ) ) ) + ( ( sj10 * x1999 * x2000 ) ) + ( ( sj10 * x2001 * x2002 ) ) + ( ( ( -2.0 ) * sj10 * x2007 * x2008 ) ) ) ), -1 );
                                                                                                                            if ( !x2011.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x2010.value ) + ( ( ( 1.5707963267949 ) * ( x2011.value ) ) ) );
                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                            {
                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j11valid[0] = true;
                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                            {
                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij11[0] = ij11;
                                                                                                                                _ij11[1] = -1;
                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                {
                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                    {
                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j11 = j11array[ij11];
                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[9];
                                                                                                                                    IkReal x2012 = IKsin ( j11 );
                                                                                                                                    IkReal x2013 = IKcos ( j11 );
                                                                                                                                    IkReal x2014 = ( ( 1.0 ) * cj7 );
                                                                                                                                    IkReal x2015 = ( cj9 * sj8 );
                                                                                                                                    IkReal x2016 = ( cj8 * sj9 );
                                                                                                                                    IkReal x2017 = ( gconst1 * r01 );
                                                                                                                                    IkReal x2018 = ( gconst2 * sj10 );
                                                                                                                                    IkReal x2019 = ( cj10 * r11 );
                                                                                                                                    IkReal x2020 = ( sj7 * sj8 );
                                                                                                                                    IkReal x2021 = ( ( 1.0 ) * sj7 );
                                                                                                                                    IkReal x2022 = ( cj10 * gconst1 );
                                                                                                                                    IkReal x2023 = ( cj10 * gconst2 );
                                                                                                                                    IkReal x2024 = ( gconst1 * sj10 );
                                                                                                                                    IkReal x2025 = ( ( 1.0 ) * gconst2 );
                                                                                                                                    IkReal x2026 = ( cj8 * cj9 );
                                                                                                                                    IkReal x2027 = ( ( 1.0 ) * sj10 );
                                                                                                                                    IkReal x2028 = ( r20 * x2013 );
                                                                                                                                    IkReal x2029 = ( gconst1 * x2013 );
                                                                                                                                    IkReal x2030 = ( r10 * x2025 );
                                                                                                                                    IkReal x2031 = ( cj10 * x2013 );
                                                                                                                                    IkReal x2032 = ( ( 1.0 ) * x2013 );
                                                                                                                                    IkReal x2033 = ( gconst1 * x2012 );
                                                                                                                                    IkReal x2034 = ( r22 * x2012 );
                                                                                                                                    IkReal x2035 = ( r12 * x2012 );
                                                                                                                                    IkReal x2036 = ( r02 * x2012 );
                                                                                                                                    evalcond[0] = ( ( ( r21 * x2033 ) ) + ( ( ( -1.0 ) * r22 * x2032 ) ) + ( ( ( -1.0 ) * r20 * x2012 * x2025 ) ) );
                                                                                                                                    evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r12 * x2032 ) ) + ( ( ( -1.0 ) * x2012 * x2030 ) ) + ( ( r11 * x2033 ) ) );
                                                                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x2032 ) ) + ( ( ( -1.0 ) * r00 * x2012 * x2025 ) ) + ( ( x2012 * x2017 ) ) );
                                                                                                                                    evalcond[3] = ( ( ( r21 * x2013 * x2022 ) ) + ( ( cj8 * sj7 ) ) + ( ( cj10 * x2034 ) ) + ( ( ( -1.0 ) * x2023 * x2028 ) ) + ( ( r21 * x2018 ) ) + ( ( cj7 * sj8 ) ) + ( ( r20 * x2024 ) ) );
                                                                                                                                    evalcond[4] = ( ( ( x2018 * x2028 ) ) + x2020 + ( ( ( -1.0 ) * cj8 * x2014 ) ) + ( ( r20 * x2022 ) ) + ( ( r21 * x2023 ) ) + ( ( ( -1.0 ) * r21 * x2024 * x2032 ) ) + ( ( ( -1.0 ) * x2027 * x2034 ) ) );
                                                                                                                                    evalcond[5] = ( ( ( r00 * x2024 ) ) + ( ( x2017 * x2031 ) ) + ( ( cj10 * x2036 ) ) + ( ( ( -1.0 ) * r00 * x2023 * x2032 ) ) + ( ( r01 * x2018 ) ) + ( ( sj7 * x2015 ) ) + ( ( ( -1.0 ) * x2014 * x2026 ) ) );
                                                                                                                                    evalcond[6] = ( ( ( r10 * x2024 ) ) + ( ( x2019 * x2029 ) ) + ( ( cj10 * x2035 ) ) + ( ( ( -1.0 ) * x2014 * x2016 ) ) + ( ( ( -1.0 ) * r10 * x2023 * x2032 ) ) + ( ( r11 * x2018 ) ) + ( ( sj9 * x2020 ) ) );
                                                                                                                                    evalcond[7] = ( ( ( r01 * x2023 ) ) + ( ( ( -1.0 ) * x2021 * x2026 ) ) + ( ( r00 * x2022 ) ) + ( ( ( -1.0 ) * x2014 * x2015 ) ) + ( ( r00 * x2013 * x2018 ) ) + ( ( ( -1.0 ) * x2013 * x2017 * x2027 ) ) + ( ( ( -1.0 ) * x2027 * x2036 ) ) );
                                                                                                                                    evalcond[8] = ( ( ( r10 * x2022 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2014 ) ) + ( ( ( -1.0 ) * x2016 * x2021 ) ) + ( ( r10 * x2013 * x2018 ) ) + ( ( gconst2 * x2019 ) ) + ( ( ( -1.0 ) * r11 * x2024 * x2032 ) ) + ( ( ( -1.0 ) * x2027 * x2035 ) ) );
                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }

                                                                                                                    }

                                                                                                                }

                                                                                                            } else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                    bool j11valid[1] = {false};
                                                                                                                    _nj11 = 1;
                                                                                                                    IkReal x2037 = ( ( 1.0 ) * gconst2 );
                                                                                                                    CheckValue<IkReal> x2038 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( ( -1.0 ) * r20 * sj9 * x2037 ) ) + ( ( gconst1 * r21 * sj9 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x2038.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x2039 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x2037 ) ) + ( ( ( -1.0 ) * gconst1 * r10 ) ) ) ), -1 );
                                                                                                                    if ( !x2039.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( x2038.value ) + ( ( ( 1.5707963267949 ) * ( x2039.value ) ) ) );
                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                    {
                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j11valid[0] = true;
                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                    {
                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij11[0] = ij11;
                                                                                                                        _ij11[1] = -1;
                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                        {
                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                            {
                                                                                                                                j11valid[iij11] = false;
                                                                                                                                _ij11[1] = iij11;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j11 = j11array[ij11];
                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                        {
                                                                                                                            IkReal evalcond[9];
                                                                                                                            IkReal x2040 = IKsin ( j11 );
                                                                                                                            IkReal x2041 = IKcos ( j11 );
                                                                                                                            IkReal x2042 = ( ( 1.0 ) * cj7 );
                                                                                                                            IkReal x2043 = ( cj9 * sj8 );
                                                                                                                            IkReal x2044 = ( cj8 * sj9 );
                                                                                                                            IkReal x2045 = ( gconst1 * r01 );
                                                                                                                            IkReal x2046 = ( gconst2 * sj10 );
                                                                                                                            IkReal x2047 = ( cj10 * r11 );
                                                                                                                            IkReal x2048 = ( sj7 * sj8 );
                                                                                                                            IkReal x2049 = ( ( 1.0 ) * sj7 );
                                                                                                                            IkReal x2050 = ( cj10 * gconst1 );
                                                                                                                            IkReal x2051 = ( cj10 * gconst2 );
                                                                                                                            IkReal x2052 = ( gconst1 * sj10 );
                                                                                                                            IkReal x2053 = ( ( 1.0 ) * gconst2 );
                                                                                                                            IkReal x2054 = ( cj8 * cj9 );
                                                                                                                            IkReal x2055 = ( ( 1.0 ) * sj10 );
                                                                                                                            IkReal x2056 = ( r20 * x2041 );
                                                                                                                            IkReal x2057 = ( gconst1 * x2041 );
                                                                                                                            IkReal x2058 = ( r10 * x2053 );
                                                                                                                            IkReal x2059 = ( cj10 * x2041 );
                                                                                                                            IkReal x2060 = ( ( 1.0 ) * x2041 );
                                                                                                                            IkReal x2061 = ( gconst1 * x2040 );
                                                                                                                            IkReal x2062 = ( r22 * x2040 );
                                                                                                                            IkReal x2063 = ( r12 * x2040 );
                                                                                                                            IkReal x2064 = ( r02 * x2040 );
                                                                                                                            evalcond[0] = ( ( ( r21 * x2061 ) ) + ( ( ( -1.0 ) * r22 * x2060 ) ) + ( ( ( -1.0 ) * r20 * x2040 * x2053 ) ) );
                                                                                                                            evalcond[1] = ( ( ( ( -1.0 ) * r12 * x2060 ) ) + cj9 + ( ( r11 * x2061 ) ) + ( ( ( -1.0 ) * x2040 * x2058 ) ) );
                                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( x2040 * x2045 ) ) + ( ( ( -1.0 ) * r02 * x2060 ) ) + ( ( ( -1.0 ) * r00 * x2040 * x2053 ) ) );
                                                                                                                            evalcond[3] = ( ( ( r21 * x2046 ) ) + ( ( cj8 * sj7 ) ) + ( ( r21 * x2041 * x2050 ) ) + ( ( ( -1.0 ) * x2051 * x2056 ) ) + ( ( cj7 * sj8 ) ) + ( ( r20 * x2052 ) ) + ( ( cj10 * x2062 ) ) );
                                                                                                                            evalcond[4] = ( ( ( ( -1.0 ) * r21 * x2052 * x2060 ) ) + x2048 + ( ( ( -1.0 ) * x2055 * x2062 ) ) + ( ( x2046 * x2056 ) ) + ( ( ( -1.0 ) * cj8 * x2042 ) ) + ( ( r20 * x2050 ) ) + ( ( r21 * x2051 ) ) );
                                                                                                                            evalcond[5] = ( ( ( ( -1.0 ) * r00 * x2051 * x2060 ) ) + ( ( x2045 * x2059 ) ) + ( ( ( -1.0 ) * x2042 * x2054 ) ) + ( ( r01 * x2046 ) ) + ( ( sj7 * x2043 ) ) + ( ( r00 * x2052 ) ) + ( ( cj10 * x2064 ) ) );
                                                                                                                            evalcond[6] = ( ( ( r10 * x2052 ) ) + ( ( ( -1.0 ) * r10 * x2051 * x2060 ) ) + ( ( sj9 * x2048 ) ) + ( ( r11 * x2046 ) ) + ( ( x2047 * x2057 ) ) + ( ( ( -1.0 ) * x2042 * x2044 ) ) + ( ( cj10 * x2063 ) ) );
                                                                                                                            evalcond[7] = ( ( ( r01 * x2051 ) ) + ( ( ( -1.0 ) * x2041 * x2045 * x2055 ) ) + ( ( r00 * x2041 * x2046 ) ) + ( ( ( -1.0 ) * x2055 * x2064 ) ) + ( ( ( -1.0 ) * x2049 * x2054 ) ) + ( ( ( -1.0 ) * x2042 * x2043 ) ) + ( ( r00 * x2050 ) ) );
                                                                                                                            evalcond[8] = ( ( ( r10 * x2050 ) ) + ( ( ( -1.0 ) * r11 * x2052 * x2060 ) ) + ( ( ( -1.0 ) * x2044 * x2049 ) ) + ( ( ( -1.0 ) * x2055 * x2063 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2042 ) ) + ( ( r10 * x2041 * x2046 ) ) + ( ( gconst2 * x2047 ) ) );
                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                            }

                                                                                                        }

                                                                                                    } else
                                                                                                    {
                                                                                                        {
                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                            bool j11valid[1] = {false};
                                                                                                            _nj11 = 1;
                                                                                                            IkReal x2065 = ( ( 1.0 ) * gconst2 );
                                                                                                            CheckValue<IkReal> x2066 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( cj9 * gconst1 * r21 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x2065 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                            if ( !x2066.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            CheckValue<IkReal> x2067 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst1 * r00 ) ) + ( ( ( -1.0 ) * r01 * x2065 ) ) ) ), -1 );
                                                                                                            if ( !x2067.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x2066.value ) + ( ( ( 1.5707963267949 ) * ( x2067.value ) ) ) );
                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                            if ( j11array[0] > IKPI )
                                                                                                            {
                                                                                                                j11array[0] -= IK2PI;
                                                                                                            }
                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                            {   j11array[0] += IK2PI;
                                                                                                            }
                                                                                                            j11valid[0] = true;
                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                            {
                                                                                                                if ( !j11valid[ij11] )
                                                                                                                {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                _ij11[0] = ij11;
                                                                                                                _ij11[1] = -1;
                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                {
                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                    {
                                                                                                                        j11valid[iij11] = false;
                                                                                                                        _ij11[1] = iij11;
                                                                                                                        break;
                                                                                                                    }
                                                                                                                }
                                                                                                                j11 = j11array[ij11];
                                                                                                                cj11 = cj11array[ij11];
                                                                                                                sj11 = sj11array[ij11];
                                                                                                                {
                                                                                                                    IkReal evalcond[9];
                                                                                                                    IkReal x2068 = IKsin ( j11 );
                                                                                                                    IkReal x2069 = IKcos ( j11 );
                                                                                                                    IkReal x2070 = ( ( 1.0 ) * cj7 );
                                                                                                                    IkReal x2071 = ( cj9 * sj8 );
                                                                                                                    IkReal x2072 = ( cj8 * sj9 );
                                                                                                                    IkReal x2073 = ( gconst1 * r01 );
                                                                                                                    IkReal x2074 = ( gconst2 * sj10 );
                                                                                                                    IkReal x2075 = ( cj10 * r11 );
                                                                                                                    IkReal x2076 = ( sj7 * sj8 );
                                                                                                                    IkReal x2077 = ( ( 1.0 ) * sj7 );
                                                                                                                    IkReal x2078 = ( cj10 * gconst1 );
                                                                                                                    IkReal x2079 = ( cj10 * gconst2 );
                                                                                                                    IkReal x2080 = ( gconst1 * sj10 );
                                                                                                                    IkReal x2081 = ( ( 1.0 ) * gconst2 );
                                                                                                                    IkReal x2082 = ( cj8 * cj9 );
                                                                                                                    IkReal x2083 = ( ( 1.0 ) * sj10 );
                                                                                                                    IkReal x2084 = ( r20 * x2069 );
                                                                                                                    IkReal x2085 = ( gconst1 * x2069 );
                                                                                                                    IkReal x2086 = ( r10 * x2081 );
                                                                                                                    IkReal x2087 = ( cj10 * x2069 );
                                                                                                                    IkReal x2088 = ( ( 1.0 ) * x2069 );
                                                                                                                    IkReal x2089 = ( gconst1 * x2068 );
                                                                                                                    IkReal x2090 = ( r22 * x2068 );
                                                                                                                    IkReal x2091 = ( r12 * x2068 );
                                                                                                                    IkReal x2092 = ( r02 * x2068 );
                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * r20 * x2068 * x2081 ) ) + ( ( ( -1.0 ) * r22 * x2088 ) ) + ( ( r21 * x2089 ) ) );
                                                                                                                    evalcond[1] = ( cj9 + ( ( ( -1.0 ) * x2068 * x2086 ) ) + ( ( ( -1.0 ) * r12 * x2088 ) ) + ( ( r11 * x2089 ) ) );
                                                                                                                    evalcond[2] = ( ( ( ( -1.0 ) * r02 * x2088 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r00 * x2068 * x2081 ) ) + ( ( x2068 * x2073 ) ) );
                                                                                                                    evalcond[3] = ( ( ( ( -1.0 ) * x2079 * x2084 ) ) + ( ( r21 * x2069 * x2078 ) ) + ( ( cj8 * sj7 ) ) + ( ( r20 * x2080 ) ) + ( ( cj10 * x2090 ) ) + ( ( cj7 * sj8 ) ) + ( ( r21 * x2074 ) ) );
                                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * x2083 * x2090 ) ) + x2076 + ( ( x2074 * x2084 ) ) + ( ( r20 * x2078 ) ) + ( ( ( -1.0 ) * r21 * x2080 * x2088 ) ) + ( ( ( -1.0 ) * cj8 * x2070 ) ) + ( ( r21 * x2079 ) ) );
                                                                                                                    evalcond[5] = ( ( ( sj7 * x2071 ) ) + ( ( ( -1.0 ) * r00 * x2079 * x2088 ) ) + ( ( x2073 * x2087 ) ) + ( ( cj10 * x2092 ) ) + ( ( ( -1.0 ) * x2070 * x2082 ) ) + ( ( r01 * x2074 ) ) + ( ( r00 * x2080 ) ) );
                                                                                                                    evalcond[6] = ( ( ( ( -1.0 ) * r10 * x2079 * x2088 ) ) + ( ( sj9 * x2076 ) ) + ( ( ( -1.0 ) * x2070 * x2072 ) ) + ( ( r11 * x2074 ) ) + ( ( cj10 * x2091 ) ) + ( ( r10 * x2080 ) ) + ( ( x2075 * x2085 ) ) );
                                                                                                                    evalcond[7] = ( ( ( ( -1.0 ) * x2083 * x2092 ) ) + ( ( ( -1.0 ) * x2070 * x2071 ) ) + ( ( ( -1.0 ) * x2077 * x2082 ) ) + ( ( r01 * x2079 ) ) + ( ( r00 * x2069 * x2074 ) ) + ( ( r00 * x2078 ) ) + ( ( ( -1.0 ) * x2069 * x2073 * x2083 ) ) );
                                                                                                                    evalcond[8] = ( ( ( gconst2 * x2075 ) ) + ( ( ( -1.0 ) * x2083 * x2091 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2070 ) ) + ( ( ( -1.0 ) * r11 * x2080 * x2088 ) ) + ( ( r10 * x2069 * x2074 ) ) + ( ( r10 * x2078 ) ) + ( ( ( -1.0 ) * x2072 * x2077 ) ) );
                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                }

                                                                                                                {
                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                }
                                                                                                            }
                                                                                                        }

                                                                                                    }

                                                                                                }

                                                                                            }
                                                                                        } while ( 0 );
                                                                                        if ( bgotonextstatement )
                                                                                        {
                                                                                            bool bgotonextstatement = true;
                                                                                            do
                                                                                            {
                                                                                                IkReal x2093 = ( ( -1.0 ) * r21 );
                                                                                                IkReal x2095 = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r22 * r22 ) ) ) );
                                                                                                if ( IKabs ( x2095 ) == 0 ) {
                                                                                                    continue;
                                                                                                }
                                                                                                IkReal x2094 = pow ( x2095, -0.5 );
                                                                                                CheckValue<IkReal> x2096 = IKatan2WithCheck ( IkReal ( x2093 ), IkReal ( ( ( -1.0 ) * r20 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                if ( !x2096.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                IkReal gconst3 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * ( x2096.value ) ) ) );
                                                                                                IkReal gconst4 = ( x2093 * x2094 );
                                                                                                IkReal gconst5 = ( ( 1.0 ) * r20 * x2094 );
                                                                                                CheckValue<IkReal> x2097 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r21 ) ), IkReal ( ( ( -1.0 ) * r20 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                if ( !x2097.valid ) {
                                                                                                    continue;
                                                                                                }
                                                                                                evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( -3.14159265358979 ) + j12 + ( x2097.value ) ) ) ) ), 6.28318530717959 ) ) );
                                                                                                if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                {
                                                                                                    bgotonextstatement = false;
                                                                                                    {
                                                                                                        IkReal j11eval[1];
                                                                                                        IkReal x2098 = ( ( -1.0 ) * r21 );
                                                                                                        CheckValue<IkReal> x2101 = IKatan2WithCheck ( IkReal ( x2098 ), IkReal ( ( ( -1.0 ) * r20 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                        if ( !x2101.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        IkReal x2099 = ( ( 1.0 ) * ( x2101.value ) );
                                                                                                        IkReal x2100 = x2094;
                                                                                                        sj12 = gconst4;
                                                                                                        cj12 = gconst5;
                                                                                                        j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2099 ) ) );
                                                                                                        IkReal gconst3 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2099 ) ) );
                                                                                                        IkReal gconst4 = ( x2098 * x2100 );
                                                                                                        IkReal gconst5 = ( ( 1.0 ) * r20 * x2100 );
                                                                                                        IkReal x2102 = r22 * r22;
                                                                                                        IkReal x2103 = ( ( 1.0 ) * x2102 );
                                                                                                        CheckValue<IkReal> x2107 = IKPowWithIntegerCheck ( ( ( -1.0 ) + x2102 ), -1 );
                                                                                                        if ( !x2107.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        IkReal x2104 = x2107.value;
                                                                                                        if ( ( ( ( 1.0 ) + ( ( ( -1.0 ) *x2103 ) ) ) ) < -0.00001 )
                                                                                                            continue;
                                                                                                        IkReal x2105 = IKsqrt ( ( ( 1.0 ) + ( ( ( -1.0 ) * x2103 ) ) ) );
                                                                                                        IkReal x2106 = ( cj9 * x2104 * x2105 );
                                                                                                        j11eval[0] = ( ( IKabs ( ( cj9 * r22 ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * x2103 * x2106 ) ) + x2106 ) ) ) );
                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  )
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j11eval[1];
                                                                                                                IkReal x2108 = ( ( -1.0 ) * r21 );
                                                                                                                CheckValue<IkReal> x2111 = IKatan2WithCheck ( IkReal ( x2108 ), IkReal ( ( ( -1.0 ) * r20 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                if ( !x2111.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                IkReal x2109 = ( ( 1.0 ) * ( x2111.value ) );
                                                                                                                IkReal x2110 = x2094;
                                                                                                                sj12 = gconst4;
                                                                                                                cj12 = gconst5;
                                                                                                                j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2109 ) ) );
                                                                                                                IkReal gconst3 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2109 ) ) );
                                                                                                                IkReal gconst4 = ( x2108 * x2110 );
                                                                                                                IkReal gconst5 = ( ( 1.0 ) * r20 * x2110 );
                                                                                                                IkReal x2112 = r22 * r22;
                                                                                                                IkReal x2113 = ( ( 1.0 ) * x2112 );
                                                                                                                CheckValue<IkReal> x2117 = IKPowWithIntegerCheck ( ( ( -1.0 ) + x2112 ), -1 );
                                                                                                                if ( !x2117.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                IkReal x2114 = x2117.value;
                                                                                                                if ( ( ( ( 1.0 ) + ( ( ( -1.0 ) *x2113 ) ) ) ) < -0.00001 )
                                                                                                                    continue;
                                                                                                                IkReal x2115 = IKsqrt ( ( ( 1.0 ) + ( ( ( -1.0 ) * x2113 ) ) ) );
                                                                                                                IkReal x2116 = ( sj9 * x2114 * x2115 );
                                                                                                                j11eval[0] = ( ( IKabs ( ( r22 * sj9 ) ) ) + ( IKabs ( ( x2116 + ( ( ( -1.0 ) * x2113 * x2116 ) ) ) ) ) );
                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  )
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11eval[3];
                                                                                                                        IkReal x2118 = ( ( -1.0 ) * r21 );
                                                                                                                        CheckValue<IkReal> x2121 = IKatan2WithCheck ( IkReal ( x2118 ), IkReal ( ( ( -1.0 ) * r20 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x2121.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        IkReal x2119 = ( ( 1.0 ) * ( x2121.value ) );
                                                                                                                        IkReal x2120 = x2094;
                                                                                                                        sj12 = gconst4;
                                                                                                                        cj12 = gconst5;
                                                                                                                        j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2119 ) ) );
                                                                                                                        IkReal gconst3 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2119 ) ) );
                                                                                                                        IkReal gconst4 = ( x2118 * x2120 );
                                                                                                                        IkReal gconst5 = ( ( 1.0 ) * r20 * x2120 );
                                                                                                                        IkReal x2122 = r22 * r22;
                                                                                                                        IkReal x2123 = ( cj9 * r02 );
                                                                                                                        IkReal x2124 = ( r12 * sj9 );
                                                                                                                        CheckValue<IkReal> x2128 = IKPowWithIntegerCheck ( ( ( -1.0 ) + x2122 ), -1 );
                                                                                                                        if ( !x2128.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        IkReal x2125 = x2128.value;
                                                                                                                        if ( ( ( ( 1.0 ) + ( ( ( -1.0 ) *x2122 ) ) ) ) < -0.00001 )
                                                                                                                            continue;
                                                                                                                        IkReal x2126 = IKsqrt ( ( ( 1.0 ) + ( ( ( -1.0 ) * x2122 ) ) ) );
                                                                                                                        IkReal x2127 = ( r22 * x2125 * x2126 );
                                                                                                                        j11eval[0] = 0;
                                                                                                                        j11eval[1] = 0;
                                                                                                                        j11eval[2] = ( ( IKabs ( ( ( ( x2123 * x2127 ) ) + ( ( x2124 * x2127 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * x2124 ) ) + ( ( ( -1.0 ) * x2123 ) ) ) ) ) );
                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                        {
                                                                                                                            continue; // 1 cases reached

                                                                                                                        } else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                _nj11 = 1;
                                                                                                                                IkReal x2129 = ( ( 1.0 ) * sj9 );
                                                                                                                                IkReal x2130 = ( ( 1.0 ) * cj9 );
                                                                                                                                CheckValue<IkReal> x2131 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst5 * r21 ) ) + ( ( ( -1.0 ) * gconst4 * r20 ) ) ) ), -1 );
                                                                                                                                if ( !x2131.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x2132 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * r12 * x2129 ) ) + ( ( ( -1.0 ) * r02 * x2130 ) ) ) ), IkReal ( ( ( ( cj9 * gconst5 * r00 ) ) + ( ( ( -1.0 ) * gconst4 * r11 * x2129 ) ) + ( ( ( -1.0 ) * gconst4 * r01 * x2130 ) ) + ( ( gconst5 * r10 * sj9 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                if ( !x2132.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2131.value ) ) ) + ( x2132.value ) );
                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                {
                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j11valid[0] = true;
                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                {
                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                    _ij11[1] = -1;
                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                    {
                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                        {
                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[9];
                                                                                                                                        IkReal x2133 = IKsin ( j11 );
                                                                                                                                        IkReal x2134 = IKcos ( j11 );
                                                                                                                                        IkReal x2135 = ( gconst5 * r00 );
                                                                                                                                        IkReal x2136 = ( ( 1.0 ) * cj7 );
                                                                                                                                        IkReal x2137 = ( cj9 * sj8 );
                                                                                                                                        IkReal x2138 = ( gconst5 * r20 );
                                                                                                                                        IkReal x2139 = ( gconst5 * sj10 );
                                                                                                                                        IkReal x2140 = ( gconst4 * r10 );
                                                                                                                                        IkReal x2141 = ( sj7 * sj8 );
                                                                                                                                        IkReal x2142 = ( gconst5 * r10 );
                                                                                                                                        IkReal x2143 = ( ( 1.0 ) * gconst4 );
                                                                                                                                        IkReal x2144 = ( cj8 * sj9 );
                                                                                                                                        IkReal x2145 = ( ( 1.0 ) * sj7 );
                                                                                                                                        IkReal x2146 = ( gconst4 * sj10 );
                                                                                                                                        IkReal x2147 = ( cj8 * cj9 );
                                                                                                                                        IkReal x2148 = ( cj10 * gconst4 );
                                                                                                                                        IkReal x2149 = ( cj10 * gconst5 );
                                                                                                                                        IkReal x2150 = ( ( 1.0 ) * x2133 );
                                                                                                                                        IkReal x2151 = ( sj10 * x2134 );
                                                                                                                                        IkReal x2152 = ( ( 1.0 ) * x2134 );
                                                                                                                                        IkReal x2153 = ( gconst4 * x2133 );
                                                                                                                                        IkReal x2154 = ( cj10 * x2133 );
                                                                                                                                        IkReal x2155 = ( x2134 * x2148 );
                                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2152 ) ) + ( ( r21 * x2153 ) ) + ( ( ( -1.0 ) * x2138 * x2150 ) ) );
                                                                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * x2142 * x2150 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x2152 ) ) + ( ( r11 * x2153 ) ) );
                                                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * x2135 * x2150 ) ) + ( ( ( -1.0 ) * r02 * x2152 ) ) + ( ( r01 * x2153 ) ) );
                                                                                                                                        evalcond[3] = ( ( ( r21 * x2139 ) ) + ( ( cj8 * sj7 ) ) + ( ( r20 * x2146 ) ) + ( ( r22 * x2154 ) ) + ( ( cj7 * sj8 ) ) + ( ( r21 * x2155 ) ) + ( ( ( -1.0 ) * cj10 * x2138 * x2152 ) ) );
                                                                                                                                        evalcond[4] = ( ( ( r20 * x2148 ) ) + x2141 + ( ( ( -1.0 ) * r21 * x2143 * x2151 ) ) + ( ( ( -1.0 ) * cj8 * x2136 ) ) + ( ( r21 * x2149 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2150 ) ) + ( ( x2138 * x2151 ) ) );
                                                                                                                                        evalcond[5] = ( ( ( sj7 * x2137 ) ) + ( ( ( -1.0 ) * x2136 * x2147 ) ) + ( ( r01 * x2139 ) ) + ( ( r02 * x2154 ) ) + ( ( ( -1.0 ) * cj10 * x2135 * x2152 ) ) + ( ( r00 * x2146 ) ) + ( ( r01 * x2155 ) ) );
                                                                                                                                        evalcond[6] = ( ( ( ( -1.0 ) * x2136 * x2144 ) ) + ( ( sj9 * x2141 ) ) + ( ( r11 * x2139 ) ) + ( ( sj10 * x2140 ) ) + ( ( r12 * x2154 ) ) + ( ( r11 * x2155 ) ) + ( ( ( -1.0 ) * cj10 * x2142 * x2152 ) ) );
                                                                                                                                        evalcond[7] = ( ( ( ( -1.0 ) * r01 * x2143 * x2151 ) ) + ( ( r01 * x2149 ) ) + ( ( ( -1.0 ) * x2136 * x2137 ) ) + ( ( r00 * x2148 ) ) + ( ( x2135 * x2151 ) ) + ( ( ( -1.0 ) * x2145 * x2147 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2150 ) ) );
                                                                                                                                        evalcond[8] = ( ( ( r11 * x2149 ) ) + ( ( ( -1.0 ) * x2144 * x2145 ) ) + ( ( ( -1.0 ) * r11 * x2143 * x2151 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2136 ) ) + ( ( r10 * x2134 * x2139 ) ) + ( ( cj10 * x2140 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2150 ) ) );
                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }

                                                                                                                        }

                                                                                                                    }

                                                                                                                } else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                        bool j11valid[1] = {false};
                                                                                                                        _nj11 = 1;
                                                                                                                        IkReal x2156 = ( ( 1.0 ) * gconst5 );
                                                                                                                        CheckValue<IkReal> x2157 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x2156 ) ) + ( ( ( -1.0 ) * gconst4 * r10 ) ) ) ), -1 );
                                                                                                                        if ( !x2157.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x2158 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( ( -1.0 ) * r20 * sj9 * x2156 ) ) + ( ( gconst4 * r21 * sj9 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x2158.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2157.value ) ) ) + ( x2158.value ) );
                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                        {
                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j11valid[0] = true;
                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                        {
                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij11[0] = ij11;
                                                                                                                            _ij11[1] = -1;
                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                            {
                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                {
                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j11 = j11array[ij11];
                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                            {
                                                                                                                                IkReal evalcond[9];
                                                                                                                                IkReal x2159 = IKsin ( j11 );
                                                                                                                                IkReal x2160 = IKcos ( j11 );
                                                                                                                                IkReal x2161 = ( gconst5 * r00 );
                                                                                                                                IkReal x2162 = ( ( 1.0 ) * cj7 );
                                                                                                                                IkReal x2163 = ( cj9 * sj8 );
                                                                                                                                IkReal x2164 = ( gconst5 * r20 );
                                                                                                                                IkReal x2165 = ( gconst5 * sj10 );
                                                                                                                                IkReal x2166 = ( gconst4 * r10 );
                                                                                                                                IkReal x2167 = ( sj7 * sj8 );
                                                                                                                                IkReal x2168 = ( gconst5 * r10 );
                                                                                                                                IkReal x2169 = ( ( 1.0 ) * gconst4 );
                                                                                                                                IkReal x2170 = ( cj8 * sj9 );
                                                                                                                                IkReal x2171 = ( ( 1.0 ) * sj7 );
                                                                                                                                IkReal x2172 = ( gconst4 * sj10 );
                                                                                                                                IkReal x2173 = ( cj8 * cj9 );
                                                                                                                                IkReal x2174 = ( cj10 * gconst4 );
                                                                                                                                IkReal x2175 = ( cj10 * gconst5 );
                                                                                                                                IkReal x2176 = ( ( 1.0 ) * x2159 );
                                                                                                                                IkReal x2177 = ( sj10 * x2160 );
                                                                                                                                IkReal x2178 = ( ( 1.0 ) * x2160 );
                                                                                                                                IkReal x2179 = ( gconst4 * x2159 );
                                                                                                                                IkReal x2180 = ( cj10 * x2159 );
                                                                                                                                IkReal x2181 = ( x2160 * x2174 );
                                                                                                                                evalcond[0] = ( ( ( r21 * x2179 ) ) + ( ( ( -1.0 ) * x2164 * x2176 ) ) + ( ( ( -1.0 ) * r22 * x2178 ) ) );
                                                                                                                                evalcond[1] = ( ( ( ( -1.0 ) * x2168 * x2176 ) ) + ( ( r11 * x2179 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x2178 ) ) );
                                                                                                                                evalcond[2] = ( ( ( r01 * x2179 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * x2161 * x2176 ) ) + ( ( ( -1.0 ) * r02 * x2178 ) ) );
                                                                                                                                evalcond[3] = ( ( ( r22 * x2180 ) ) + ( ( cj8 * sj7 ) ) + ( ( r21 * x2165 ) ) + ( ( ( -1.0 ) * cj10 * x2164 * x2178 ) ) + ( ( r21 * x2181 ) ) + ( ( r20 * x2172 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * r22 * sj10 * x2176 ) ) + ( ( r21 * x2175 ) ) + ( ( x2164 * x2177 ) ) + x2167 + ( ( r20 * x2174 ) ) + ( ( ( -1.0 ) * cj8 * x2162 ) ) + ( ( ( -1.0 ) * r21 * x2169 * x2177 ) ) );
                                                                                                                                evalcond[5] = ( ( ( r00 * x2172 ) ) + ( ( sj7 * x2163 ) ) + ( ( ( -1.0 ) * cj10 * x2161 * x2178 ) ) + ( ( r01 * x2165 ) ) + ( ( r02 * x2180 ) ) + ( ( r01 * x2181 ) ) + ( ( ( -1.0 ) * x2162 * x2173 ) ) );
                                                                                                                                evalcond[6] = ( ( ( r12 * x2180 ) ) + ( ( sj9 * x2167 ) ) + ( ( r11 * x2181 ) ) + ( ( ( -1.0 ) * cj10 * x2168 * x2178 ) ) + ( ( r11 * x2165 ) ) + ( ( ( -1.0 ) * x2162 * x2170 ) ) + ( ( sj10 * x2166 ) ) );
                                                                                                                                evalcond[7] = ( ( ( ( -1.0 ) * x2171 * x2173 ) ) + ( ( r01 * x2175 ) ) + ( ( r00 * x2174 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2176 ) ) + ( ( x2161 * x2177 ) ) + ( ( ( -1.0 ) * r01 * x2169 * x2177 ) ) + ( ( ( -1.0 ) * x2162 * x2163 ) ) );
                                                                                                                                evalcond[8] = ( ( ( ( -1.0 ) * x2170 * x2171 ) ) + ( ( r11 * x2175 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2176 ) ) + ( ( r10 * x2160 * x2165 ) ) + ( ( ( -1.0 ) * r11 * x2169 * x2177 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2162 ) ) + ( ( cj10 * x2166 ) ) );
                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }

                                                                                                                }

                                                                                                            }

                                                                                                        } else
                                                                                                        {
                                                                                                            {
                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                bool j11valid[1] = {false};
                                                                                                                _nj11 = 1;
                                                                                                                IkReal x2182 = ( ( 1.0 ) * gconst5 );
                                                                                                                CheckValue<IkReal> x2183 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst4 * r00 ) ) + ( ( ( -1.0 ) * r01 * x2182 ) ) ) ), -1 );
                                                                                                                if ( !x2183.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                CheckValue<IkReal> x2184 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x2182 ) ) + ( ( cj9 * gconst4 * r21 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                if ( !x2184.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2183.value ) ) ) + ( x2184.value ) );
                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                {
                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                }
                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                }
                                                                                                                j11valid[0] = true;
                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                {
                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                    {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    _ij11[0] = ij11;
                                                                                                                    _ij11[1] = -1;
                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                    {
                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                        {
                                                                                                                            j11valid[iij11] = false;
                                                                                                                            _ij11[1] = iij11;
                                                                                                                            break;
                                                                                                                        }
                                                                                                                    }
                                                                                                                    j11 = j11array[ij11];
                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                    {
                                                                                                                        IkReal evalcond[9];
                                                                                                                        IkReal x2185 = IKsin ( j11 );
                                                                                                                        IkReal x2186 = IKcos ( j11 );
                                                                                                                        IkReal x2187 = ( gconst5 * r00 );
                                                                                                                        IkReal x2188 = ( ( 1.0 ) * cj7 );
                                                                                                                        IkReal x2189 = ( cj9 * sj8 );
                                                                                                                        IkReal x2190 = ( gconst5 * r20 );
                                                                                                                        IkReal x2191 = ( gconst5 * sj10 );
                                                                                                                        IkReal x2192 = ( gconst4 * r10 );
                                                                                                                        IkReal x2193 = ( sj7 * sj8 );
                                                                                                                        IkReal x2194 = ( gconst5 * r10 );
                                                                                                                        IkReal x2195 = ( ( 1.0 ) * gconst4 );
                                                                                                                        IkReal x2196 = ( cj8 * sj9 );
                                                                                                                        IkReal x2197 = ( ( 1.0 ) * sj7 );
                                                                                                                        IkReal x2198 = ( gconst4 * sj10 );
                                                                                                                        IkReal x2199 = ( cj8 * cj9 );
                                                                                                                        IkReal x2200 = ( cj10 * gconst4 );
                                                                                                                        IkReal x2201 = ( cj10 * gconst5 );
                                                                                                                        IkReal x2202 = ( ( 1.0 ) * x2185 );
                                                                                                                        IkReal x2203 = ( sj10 * x2186 );
                                                                                                                        IkReal x2204 = ( ( 1.0 ) * x2186 );
                                                                                                                        IkReal x2205 = ( gconst4 * x2185 );
                                                                                                                        IkReal x2206 = ( cj10 * x2185 );
                                                                                                                        IkReal x2207 = ( x2186 * x2200 );
                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * x2190 * x2202 ) ) + ( ( ( -1.0 ) * r22 * x2204 ) ) + ( ( r21 * x2205 ) ) );
                                                                                                                        evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r12 * x2204 ) ) + ( ( r11 * x2205 ) ) + ( ( ( -1.0 ) * x2194 * x2202 ) ) );
                                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * x2187 * x2202 ) ) + ( ( r01 * x2205 ) ) + ( ( ( -1.0 ) * r02 * x2204 ) ) );
                                                                                                                        evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r20 * x2198 ) ) + ( ( r21 * x2191 ) ) + ( ( cj7 * sj8 ) ) + ( ( r22 * x2206 ) ) + ( ( r21 * x2207 ) ) + ( ( ( -1.0 ) * cj10 * x2190 * x2204 ) ) );
                                                                                                                        evalcond[4] = ( ( ( r20 * x2200 ) ) + ( ( ( -1.0 ) * r21 * x2195 * x2203 ) ) + x2193 + ( ( x2190 * x2203 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2202 ) ) + ( ( r21 * x2201 ) ) + ( ( ( -1.0 ) * cj8 * x2188 ) ) );
                                                                                                                        evalcond[5] = ( ( ( r02 * x2206 ) ) + ( ( ( -1.0 ) * cj10 * x2187 * x2204 ) ) + ( ( r01 * x2207 ) ) + ( ( ( -1.0 ) * x2188 * x2199 ) ) + ( ( sj7 * x2189 ) ) + ( ( r00 * x2198 ) ) + ( ( r01 * x2191 ) ) );
                                                                                                                        evalcond[6] = ( ( ( r12 * x2206 ) ) + ( ( ( -1.0 ) * x2188 * x2196 ) ) + ( ( r11 * x2207 ) ) + ( ( ( -1.0 ) * cj10 * x2194 * x2204 ) ) + ( ( r11 * x2191 ) ) + ( ( sj9 * x2193 ) ) + ( ( sj10 * x2192 ) ) );
                                                                                                                        evalcond[7] = ( ( ( r00 * x2200 ) ) + ( ( r01 * x2201 ) ) + ( ( ( -1.0 ) * x2188 * x2189 ) ) + ( ( ( -1.0 ) * x2197 * x2199 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2202 ) ) + ( ( x2187 * x2203 ) ) + ( ( ( -1.0 ) * r01 * x2195 * x2203 ) ) );
                                                                                                                        evalcond[8] = ( ( ( ( -1.0 ) * r12 * sj10 * x2202 ) ) + ( ( ( -1.0 ) * x2196 * x2197 ) ) + ( ( r10 * x2186 * x2191 ) ) + ( ( r11 * x2201 ) ) + ( ( ( -1.0 ) * r11 * x2195 * x2203 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2188 ) ) + ( ( cj10 * x2192 ) ) );
                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                    }

                                                                                                                    {
                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                    }
                                                                                                                }
                                                                                                            }

                                                                                                        }

                                                                                                    }

                                                                                                }
                                                                                            } while ( 0 );
                                                                                            if ( bgotonextstatement )
                                                                                            {
                                                                                                bool bgotonextstatement = true;
                                                                                                do
                                                                                                {
                                                                                                    IkReal x2208 = ( ( -1.0 ) * r10 );
                                                                                                    IkReal x2210 = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r12 * r12 ) ) ) );
                                                                                                    if ( IKabs ( x2210 ) == 0 ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    IkReal x2209 = pow ( x2210, -0.5 );
                                                                                                    CheckValue<IkReal> x2211 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r11 ) ), IkReal ( x2208 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                    if ( !x2211.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    IkReal gconst6 = ( ( -1.0 ) * ( x2211.value ) );
                                                                                                    IkReal gconst7 = ( r11 * x2209 );
                                                                                                    IkReal gconst8 = ( x2208 * x2209 );
                                                                                                    CheckValue<IkReal> x2212 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r11 ) ), IkReal ( ( ( -1.0 ) * r10 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                    if ( !x2212.valid ) {
                                                                                                        continue;
                                                                                                    }
                                                                                                    evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( j12 + ( x2212.value ) ) ) ) ), 6.28318530717959 ) ) );
                                                                                                    if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                    {
                                                                                                        bgotonextstatement = false;
                                                                                                        {
                                                                                                            IkReal j11eval[3];
                                                                                                            IkReal x2213 = ( ( -1.0 ) * r10 );
                                                                                                            IkReal x2214 = x2209;
                                                                                                            CheckValue<IkReal> x2216 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r11 ) ), IkReal ( x2213 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                            if ( !x2216.valid ) {
                                                                                                                continue;
                                                                                                            }
                                                                                                            IkReal x2215 = ( ( -1.0 ) * ( x2216.value ) );
                                                                                                            sj12 = gconst7;
                                                                                                            cj12 = gconst8;
                                                                                                            j12 = x2215;
                                                                                                            IkReal gconst6 = x2215;
                                                                                                            IkReal gconst7 = ( r11 * x2214 );
                                                                                                            IkReal gconst8 = ( x2213 * x2214 );
                                                                                                            j11eval[0] = cj9;
                                                                                                            j11eval[1] = r22;
                                                                                                            j11eval[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r12 * r12 ) ) ) );
                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                    bool j11valid[1] = {false};
                                                                                                                    _nj11 = 1;
                                                                                                                    IkReal x2217 = ( ( 1.0 ) * gconst7 );
                                                                                                                    CheckValue<IkReal> x2218 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( gconst8 * r10 * sj9 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x2217 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x2217 ) ) + ( ( cj9 * gconst8 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x2218.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x2219 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r20 * x2217 ) ) + ( ( ( -1.0 ) * gconst8 * r21 ) ) ) ), -1 );
                                                                                                                    if ( !x2219.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( x2218.value ) + ( ( ( 1.5707963267949 ) * ( x2219.value ) ) ) );
                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                    {
                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j11valid[0] = true;
                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                    {
                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij11[0] = ij11;
                                                                                                                        _ij11[1] = -1;
                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                        {
                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                            {
                                                                                                                                j11valid[iij11] = false;
                                                                                                                                _ij11[1] = iij11;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j11 = j11array[ij11];
                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                        {
                                                                                                                            IkReal evalcond[9];
                                                                                                                            IkReal x2220 = IKsin ( j11 );
                                                                                                                            IkReal x2221 = IKcos ( j11 );
                                                                                                                            IkReal x2222 = ( ( 1.0 ) * cj7 );
                                                                                                                            IkReal x2223 = ( cj9 * sj8 );
                                                                                                                            IkReal x2224 = ( gconst7 * r21 );
                                                                                                                            IkReal x2225 = ( ( 1.0 ) * gconst8 );
                                                                                                                            IkReal x2226 = ( gconst7 * r01 );
                                                                                                                            IkReal x2227 = ( cj8 * sj9 );
                                                                                                                            IkReal x2228 = ( sj7 * sj8 );
                                                                                                                            IkReal x2229 = ( gconst7 * sj10 );
                                                                                                                            IkReal x2230 = ( cj10 * gconst7 );
                                                                                                                            IkReal x2231 = ( ( 1.0 ) * sj7 );
                                                                                                                            IkReal x2232 = ( cj8 * cj9 );
                                                                                                                            IkReal x2233 = ( gconst7 * r11 );
                                                                                                                            IkReal x2234 = ( gconst8 * r21 );
                                                                                                                            IkReal x2235 = ( gconst8 * r11 );
                                                                                                                            IkReal x2236 = ( gconst8 * sj10 );
                                                                                                                            IkReal x2237 = ( ( 1.0 ) * sj10 );
                                                                                                                            IkReal x2238 = ( cj10 * x2221 );
                                                                                                                            IkReal x2239 = ( ( 1.0 ) * x2221 );
                                                                                                                            IkReal x2240 = ( r22 * x2220 );
                                                                                                                            IkReal x2241 = ( r12 * x2220 );
                                                                                                                            IkReal x2242 = ( r02 * x2220 );
                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r20 * x2220 * x2225 ) ) + ( ( ( -1.0 ) * r22 * x2239 ) ) + ( ( x2220 * x2224 ) ) );
                                                                                                                            evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r10 * x2220 * x2225 ) ) + ( ( ( -1.0 ) * r12 * x2239 ) ) + ( ( x2220 * x2233 ) ) );
                                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x2239 ) ) + ( ( ( -1.0 ) * r00 * x2220 * x2225 ) ) + ( ( x2220 * x2226 ) ) );
                                                                                                                            evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( sj10 * x2234 ) ) + ( ( x2224 * x2238 ) ) + ( ( cj10 * x2240 ) ) + ( ( ( -1.0 ) * r20 * x2225 * x2238 ) ) + ( ( r20 * x2229 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                                            evalcond[4] = ( ( ( ( -1.0 ) * x2237 * x2240 ) ) + ( ( cj10 * x2234 ) ) + ( ( ( -1.0 ) * x2221 * x2224 * x2237 ) ) + x2228 + ( ( r20 * x2221 * x2236 ) ) + ( ( r20 * x2230 ) ) + ( ( ( -1.0 ) * cj8 * x2222 ) ) );
                                                                                                                            evalcond[5] = ( ( ( ( -1.0 ) * r00 * x2225 * x2238 ) ) + ( ( ( -1.0 ) * x2222 * x2232 ) ) + ( ( x2226 * x2238 ) ) + ( ( sj7 * x2223 ) ) + ( ( cj10 * x2242 ) ) + ( ( r00 * x2229 ) ) + ( ( r01 * x2236 ) ) );
                                                                                                                            evalcond[6] = ( ( ( ( -1.0 ) * x2222 * x2227 ) ) + ( ( r10 * x2229 ) ) + ( ( r11 * x2221 * x2230 ) ) + ( ( sj10 * x2235 ) ) + ( ( cj10 * x2241 ) ) + ( ( sj9 * x2228 ) ) + ( ( ( -1.0 ) * r10 * x2225 * x2238 ) ) );
                                                                                                                            evalcond[7] = ( ( ( cj10 * gconst8 * r01 ) ) + ( ( ( -1.0 ) * x2237 * x2242 ) ) + ( ( ( -1.0 ) * x2222 * x2223 ) ) + ( ( ( -1.0 ) * x2221 * x2226 * x2237 ) ) + ( ( ( -1.0 ) * x2231 * x2232 ) ) + ( ( r00 * x2221 * x2236 ) ) + ( ( r00 * x2230 ) ) );
                                                                                                                            evalcond[8] = ( ( ( ( -1.0 ) * x2237 * x2241 ) ) + ( ( cj10 * x2235 ) ) + ( ( ( -1.0 ) * x2227 * x2231 ) ) + ( ( r10 * x2221 * x2236 ) ) + ( ( r10 * x2230 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2222 ) ) + ( ( ( -1.0 ) * r11 * x2229 * x2239 ) ) );
                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                            } else
                                                                                                            {
                                                                                                                {
                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                    bool j11valid[1] = {false};
                                                                                                                    _nj11 = 1;
                                                                                                                    IkReal x2243 = ( ( 1.0 ) * gconst8 );
                                                                                                                    CheckValue<IkReal> x2244 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x2243 ) ) + ( ( ( -1.0 ) * gconst7 * r00 ) ) ) ), -1 );
                                                                                                                    if ( !x2244.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    CheckValue<IkReal> x2245 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x2243 ) ) + ( ( cj9 * gconst7 * r21 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x2245.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2244.value ) ) ) + ( x2245.value ) );
                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                    {
                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                    }
                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                    }
                                                                                                                    j11valid[0] = true;
                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                    {
                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                        {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        _ij11[0] = ij11;
                                                                                                                        _ij11[1] = -1;
                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                        {
                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                            {
                                                                                                                                j11valid[iij11] = false;
                                                                                                                                _ij11[1] = iij11;
                                                                                                                                break;
                                                                                                                            }
                                                                                                                        }
                                                                                                                        j11 = j11array[ij11];
                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                        {
                                                                                                                            IkReal evalcond[9];
                                                                                                                            IkReal x2246 = IKsin ( j11 );
                                                                                                                            IkReal x2247 = IKcos ( j11 );
                                                                                                                            IkReal x2248 = ( ( 1.0 ) * cj7 );
                                                                                                                            IkReal x2249 = ( cj9 * sj8 );
                                                                                                                            IkReal x2250 = ( gconst7 * r21 );
                                                                                                                            IkReal x2251 = ( ( 1.0 ) * gconst8 );
                                                                                                                            IkReal x2252 = ( gconst7 * r01 );
                                                                                                                            IkReal x2253 = ( cj8 * sj9 );
                                                                                                                            IkReal x2254 = ( sj7 * sj8 );
                                                                                                                            IkReal x2255 = ( gconst7 * sj10 );
                                                                                                                            IkReal x2256 = ( cj10 * gconst7 );
                                                                                                                            IkReal x2257 = ( ( 1.0 ) * sj7 );
                                                                                                                            IkReal x2258 = ( cj8 * cj9 );
                                                                                                                            IkReal x2259 = ( gconst7 * r11 );
                                                                                                                            IkReal x2260 = ( gconst8 * r21 );
                                                                                                                            IkReal x2261 = ( gconst8 * r11 );
                                                                                                                            IkReal x2262 = ( gconst8 * sj10 );
                                                                                                                            IkReal x2263 = ( ( 1.0 ) * sj10 );
                                                                                                                            IkReal x2264 = ( cj10 * x2247 );
                                                                                                                            IkReal x2265 = ( ( 1.0 ) * x2247 );
                                                                                                                            IkReal x2266 = ( r22 * x2246 );
                                                                                                                            IkReal x2267 = ( r12 * x2246 );
                                                                                                                            IkReal x2268 = ( r02 * x2246 );
                                                                                                                            evalcond[0] = ( ( ( x2246 * x2250 ) ) + ( ( ( -1.0 ) * r20 * x2246 * x2251 ) ) + ( ( ( -1.0 ) * r22 * x2265 ) ) );
                                                                                                                            evalcond[1] = ( ( ( x2246 * x2259 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x2265 ) ) + ( ( ( -1.0 ) * r10 * x2246 * x2251 ) ) );
                                                                                                                            evalcond[2] = ( ( ( x2246 * x2252 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r00 * x2246 * x2251 ) ) + ( ( ( -1.0 ) * r02 * x2265 ) ) );
                                                                                                                            evalcond[3] = ( ( ( ( -1.0 ) * r20 * x2251 * x2264 ) ) + ( ( cj8 * sj7 ) ) + ( ( cj10 * x2266 ) ) + ( ( x2250 * x2264 ) ) + ( ( sj10 * x2260 ) ) + ( ( r20 * x2255 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                                            evalcond[4] = ( x2254 + ( ( cj10 * x2260 ) ) + ( ( ( -1.0 ) * x2263 * x2266 ) ) + ( ( r20 * x2256 ) ) + ( ( r20 * x2247 * x2262 ) ) + ( ( ( -1.0 ) * x2247 * x2250 * x2263 ) ) + ( ( ( -1.0 ) * cj8 * x2248 ) ) );
                                                                                                                            evalcond[5] = ( ( ( r01 * x2262 ) ) + ( ( x2252 * x2264 ) ) + ( ( cj10 * x2268 ) ) + ( ( ( -1.0 ) * x2248 * x2258 ) ) + ( ( r00 * x2255 ) ) + ( ( sj7 * x2249 ) ) + ( ( ( -1.0 ) * r00 * x2251 * x2264 ) ) );
                                                                                                                            evalcond[6] = ( ( ( r10 * x2255 ) ) + ( ( cj10 * x2267 ) ) + ( ( sj9 * x2254 ) ) + ( ( sj10 * x2261 ) ) + ( ( r11 * x2247 * x2256 ) ) + ( ( ( -1.0 ) * x2248 * x2253 ) ) + ( ( ( -1.0 ) * r10 * x2251 * x2264 ) ) );
                                                                                                                            evalcond[7] = ( ( ( cj10 * gconst8 * r01 ) ) + ( ( r00 * x2247 * x2262 ) ) + ( ( ( -1.0 ) * x2247 * x2252 * x2263 ) ) + ( ( ( -1.0 ) * x2257 * x2258 ) ) + ( ( ( -1.0 ) * x2248 * x2249 ) ) + ( ( ( -1.0 ) * x2263 * x2268 ) ) + ( ( r00 * x2256 ) ) );
                                                                                                                            evalcond[8] = ( ( ( r10 * x2247 * x2262 ) ) + ( ( ( -1.0 ) * r11 * x2255 * x2265 ) ) + ( ( r10 * x2256 ) ) + ( ( cj10 * x2261 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2248 ) ) + ( ( ( -1.0 ) * x2253 * x2257 ) ) + ( ( ( -1.0 ) * x2263 * x2267 ) ) );
                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                        }

                                                                                                                        {
                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                        }
                                                                                                                    }
                                                                                                                }

                                                                                                            }

                                                                                                        }

                                                                                                    }
                                                                                                } while ( 0 );
                                                                                                if ( bgotonextstatement )
                                                                                                {
                                                                                                    bool bgotonextstatement = true;
                                                                                                    do
                                                                                                    {
                                                                                                        IkReal x2269 = ( ( -1.0 ) * r11 );
                                                                                                        IkReal x2271 = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r12 * r12 ) ) ) );
                                                                                                        if ( IKabs ( x2271 ) == 0 ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        IkReal x2270 = pow ( x2271, -0.5 );
                                                                                                        CheckValue<IkReal> x2272 = IKatan2WithCheck ( IkReal ( x2269 ), IkReal ( ( ( -1.0 ) * r10 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                        if ( !x2272.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        IkReal gconst9 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * ( x2272.value ) ) ) );
                                                                                                        IkReal gconst10 = ( x2269 * x2270 );
                                                                                                        IkReal gconst11 = ( ( 1.0 ) * r10 * x2270 );
                                                                                                        CheckValue<IkReal> x2273 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r11 ) ), IkReal ( ( ( -1.0 ) * r10 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                        if ( !x2273.valid ) {
                                                                                                            continue;
                                                                                                        }
                                                                                                        evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( -3.14159265358979 ) + j12 + ( x2273.value ) ) ) ) ), 6.28318530717959 ) ) );
                                                                                                        if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                        {
                                                                                                            bgotonextstatement = false;
                                                                                                            {
                                                                                                                IkReal j11eval[3];
                                                                                                                IkReal x2274 = ( ( -1.0 ) * r11 );
                                                                                                                CheckValue<IkReal> x2277 = IKatan2WithCheck ( IkReal ( x2274 ), IkReal ( ( ( -1.0 ) * r10 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                if ( !x2277.valid ) {
                                                                                                                    continue;
                                                                                                                }
                                                                                                                IkReal x2275 = ( ( 1.0 ) * ( x2277.value ) );
                                                                                                                IkReal x2276 = x2270;
                                                                                                                sj12 = gconst10;
                                                                                                                cj12 = gconst11;
                                                                                                                j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2275 ) ) );
                                                                                                                IkReal gconst9 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2275 ) ) );
                                                                                                                IkReal gconst10 = ( x2274 * x2276 );
                                                                                                                IkReal gconst11 = ( ( 1.0 ) * r10 * x2276 );
                                                                                                                j11eval[0] = cj9;
                                                                                                                j11eval[1] = r22;
                                                                                                                j11eval[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r12 * r12 ) ) ) );
                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11eval[1];
                                                                                                                        IkReal x2278 = ( ( -1.0 ) * r11 );
                                                                                                                        CheckValue<IkReal> x2281 = IKatan2WithCheck ( IkReal ( x2278 ), IkReal ( ( ( -1.0 ) * r10 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x2281.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        IkReal x2279 = ( ( 1.0 ) * ( x2281.value ) );
                                                                                                                        IkReal x2280 = x2270;
                                                                                                                        sj12 = gconst10;
                                                                                                                        cj12 = gconst11;
                                                                                                                        j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2279 ) ) );
                                                                                                                        IkReal gconst9 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2279 ) ) );
                                                                                                                        IkReal gconst10 = ( x2278 * x2280 );
                                                                                                                        IkReal gconst11 = ( ( 1.0 ) * r10 * x2280 );
                                                                                                                        IkReal x2282 = r12 * r12;
                                                                                                                        IkReal x2283 = ( ( 1.0 ) * sj9 );
                                                                                                                        IkReal x2284 = ( cj9 * r02 );
                                                                                                                        IkReal x2285 = x2270;
                                                                                                                        j11eval[0] = ( ( IKabs ( ( ( ( r12 * x2284 * x2285 ) ) + ( ( sj9 * x2282 * x2285 ) ) + ( ( ( -1.0 ) * x2283 * x2285 ) ) ) ) ) + ( IKabs ( ( ( ( ( -1.0 ) * r12 * x2283 ) ) + ( ( ( -1.0 ) * x2284 ) ) ) ) ) );
                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  )
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11eval[2];
                                                                                                                                IkReal x2286 = ( ( -1.0 ) * r11 );
                                                                                                                                CheckValue<IkReal> x2289 = IKatan2WithCheck ( IkReal ( x2286 ), IkReal ( ( ( -1.0 ) * r10 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                if ( !x2289.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                IkReal x2287 = ( ( 1.0 ) * ( x2289.value ) );
                                                                                                                                IkReal x2288 = x2270;
                                                                                                                                sj12 = gconst10;
                                                                                                                                cj12 = gconst11;
                                                                                                                                j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2287 ) ) );
                                                                                                                                IkReal gconst9 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2287 ) ) );
                                                                                                                                IkReal gconst10 = ( x2286 * x2288 );
                                                                                                                                IkReal gconst11 = ( ( 1.0 ) * r10 * x2288 );
                                                                                                                                IkReal x2290 = ( ( 1.0 ) * cj10 );
                                                                                                                                CheckValue<IkReal> x2295 = IKPowWithIntegerCheck ( ( ( 1.0 ) + ( ( ( -1.0 ) * ( r12 * r12 ) ) ) ), -1 );
                                                                                                                                if ( !x2295.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                IkReal x2291 = x2295.value;
                                                                                                                                IkReal x2292 = ( cj10 * x2291 );
                                                                                                                                IkReal x2293 = ( x2290 * x2291 );
                                                                                                                                IkReal x2294 = ( ( ( ( -1.0 ) * x2293 * ( r11 * r11 ) * ( r21 * r21 ) ) ) + ( ( ( -1.0 ) * x2290 * ( r22 * r22 ) ) ) + ( ( ( -2.0 ) * r10 * r11 * r20 * r21 * x2292 ) ) + ( ( ( -1.0 ) * x2293 * ( r10 * r10 ) * ( r20 * r20 ) ) ) );
                                                                                                                                j11eval[0] = x2294;
                                                                                                                                j11eval[1] = IKsign ( x2294 );
                                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                {
                                                                                                                                    continue; // 1 cases reached

                                                                                                                                } else
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                        bool j11valid[1] = {false};
                                                                                                                                        _nj11 = 1;
                                                                                                                                        IkReal x2296 = gconst11 * gconst11;
                                                                                                                                        IkReal x2297 = r20 * r20;
                                                                                                                                        IkReal x2298 = gconst10 * gconst10;
                                                                                                                                        IkReal x2299 = r21 * r21;
                                                                                                                                        IkReal x2300 = ( gconst10 * sj10 );
                                                                                                                                        IkReal x2301 = ( ( 1.0 ) * cj10 );
                                                                                                                                        IkReal x2302 = ( ( 1.0 ) * gconst11 );
                                                                                                                                        IkReal x2303 = ( gconst10 * r21 );
                                                                                                                                        IkReal x2304 = ( cj8 * sj7 );
                                                                                                                                        IkReal x2305 = ( cj7 * sj8 );
                                                                                                                                        IkReal x2306 = ( r21 * sj10 );
                                                                                                                                        CheckValue<IkReal> x2307 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( 2.0 ) * cj10 * gconst11 * r20 * x2303 ) ) + ( ( ( -1.0 ) * x2296 * x2297 * x2301 ) ) + ( ( ( -1.0 ) * x2298 * x2299 * x2301 ) ) + ( ( ( -1.0 ) * x2301 * ( r22 * r22 ) ) ) ) ), -1 );
                                                                                                                                        if ( !x2307.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        CheckValue<IkReal> x2308 = IKatan2WithCheck ( IkReal ( ( ( ( r22 * x2305 ) ) + ( ( r22 * x2304 ) ) + ( ( gconst11 * r22 * x2306 ) ) + ( ( r20 * r22 * x2300 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * x2297 * x2300 * x2302 ) ) + ( ( x2303 * x2305 ) ) + ( ( x2303 * x2304 ) ) + ( ( ( -1.0 ) * r20 * x2302 * x2304 ) ) + ( ( ( -1.0 ) * r20 * x2302 * x2305 ) ) + ( ( r20 * x2298 * x2306 ) ) + ( ( gconst11 * x2299 * x2300 ) ) + ( ( ( -1.0 ) * r20 * x2296 * x2306 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                        if ( !x2308.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2307.value ) ) ) + ( x2308.value ) );
                                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                                        {
                                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                                        }
                                                                                                                                        j11valid[0] = true;
                                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                        {
                                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            _ij11[0] = ij11;
                                                                                                                                            _ij11[1] = -1;
                                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                            {
                                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                {
                                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            j11 = j11array[ij11];
                                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[9];
                                                                                                                                                IkReal x2309 = IKsin ( j11 );
                                                                                                                                                IkReal x2310 = IKcos ( j11 );
                                                                                                                                                IkReal x2311 = ( cj10 * gconst10 );
                                                                                                                                                IkReal x2312 = ( gconst11 * sj10 );
                                                                                                                                                IkReal x2313 = ( sj7 * sj8 );
                                                                                                                                                IkReal x2314 = ( gconst10 * sj10 );
                                                                                                                                                IkReal x2315 = ( cj10 * gconst11 );
                                                                                                                                                IkReal x2316 = ( ( 1.0 ) * cj8 );
                                                                                                                                                IkReal x2317 = ( cj7 * sj8 );
                                                                                                                                                IkReal x2318 = ( ( 1.0 ) * sj9 );
                                                                                                                                                IkReal x2319 = ( ( 1.0 ) * cj7 * cj9 );
                                                                                                                                                IkReal x2320 = ( gconst10 * x2309 );
                                                                                                                                                IkReal x2321 = ( r21 * x2310 );
                                                                                                                                                IkReal x2322 = ( r10 * x2310 );
                                                                                                                                                IkReal x2323 = ( cj10 * x2309 );
                                                                                                                                                IkReal x2324 = ( r20 * x2310 );
                                                                                                                                                IkReal x2325 = ( sj9 * x2316 );
                                                                                                                                                IkReal x2326 = ( ( 1.0 ) * x2310 );
                                                                                                                                                IkReal x2327 = ( ( 1.0 ) * gconst11 * x2309 );
                                                                                                                                                IkReal x2328 = ( ( 1.0 ) * sj10 * x2309 );
                                                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2326 ) ) + ( ( r21 * x2320 ) ) + ( ( ( -1.0 ) * r20 * x2327 ) ) );
                                                                                                                                                evalcond[1] = ( cj9 + ( ( r11 * x2320 ) ) + ( ( ( -1.0 ) * r10 * x2327 ) ) + ( ( ( -1.0 ) * r12 * x2326 ) ) );
                                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * r00 * x2327 ) ) + ( ( r01 * x2320 ) ) + ( ( ( -1.0 ) * r02 * x2326 ) ) + ( ( ( -1.0 ) * x2318 ) ) );
                                                                                                                                                evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r21 * x2312 ) ) + x2317 + ( ( r22 * x2323 ) ) + ( ( ( -1.0 ) * x2315 * x2324 ) ) + ( ( r20 * x2314 ) ) + ( ( x2311 * x2321 ) ) );
                                                                                                                                                evalcond[4] = ( ( ( x2312 * x2324 ) ) + ( ( r21 * x2315 ) ) + ( ( ( -1.0 ) * r22 * x2328 ) ) + x2313 + ( ( ( -1.0 ) * x2314 * x2321 ) ) + ( ( r20 * x2311 ) ) + ( ( ( -1.0 ) * cj7 * x2316 ) ) );
                                                                                                                                                evalcond[5] = ( ( ( r02 * x2323 ) ) + ( ( ( -1.0 ) * cj7 * cj9 * x2316 ) ) + ( ( ( -1.0 ) * r00 * x2315 * x2326 ) ) + ( ( cj9 * x2313 ) ) + ( ( r01 * x2310 * x2311 ) ) + ( ( r01 * x2312 ) ) + ( ( r00 * x2314 ) ) );
                                                                                                                                                evalcond[6] = ( ( ( ( -1.0 ) * cj7 * x2325 ) ) + ( ( r10 * x2314 ) ) + ( ( r11 * x2310 * x2311 ) ) + ( ( r11 * x2312 ) ) + ( ( r12 * x2323 ) ) + ( ( ( -1.0 ) * x2315 * x2322 ) ) + ( ( sj9 * x2313 ) ) );
                                                                                                                                                evalcond[7] = ( ( ( ( -1.0 ) * cj9 * x2317 ) ) + ( ( r00 * x2310 * x2312 ) ) + ( ( r01 * x2315 ) ) + ( ( r00 * x2311 ) ) + ( ( ( -1.0 ) * r02 * x2328 ) ) + ( ( ( -1.0 ) * r01 * x2314 * x2326 ) ) + ( ( ( -1.0 ) * cj9 * sj7 * x2316 ) ) );
                                                                                                                                                evalcond[8] = ( ( ( ( -1.0 ) * r11 * x2314 * x2326 ) ) + ( ( x2312 * x2322 ) ) + ( ( r10 * x2311 ) ) + ( ( r11 * x2315 ) ) + ( ( ( -1.0 ) * r12 * x2328 ) ) + ( ( ( -1.0 ) * sj7 * x2325 ) ) + ( ( ( -1.0 ) * x2317 * x2318 ) ) );
                                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            {
                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                }

                                                                                                                            }

                                                                                                                        } else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                _nj11 = 1;
                                                                                                                                IkReal x2329 = ( ( 1.0 ) * gconst10 );
                                                                                                                                CheckValue<IkReal> x2330 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r01 * x2329 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x2329 ) ) + ( ( gconst11 * r10 * sj9 ) ) + ( ( cj9 * gconst11 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                if ( !x2330.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x2331 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst11 * r21 ) ) + ( ( ( -1.0 ) * r20 * x2329 ) ) ) ), -1 );
                                                                                                                                if ( !x2331.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x2330.value ) + ( ( ( 1.5707963267949 ) * ( x2331.value ) ) ) );
                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                {
                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j11valid[0] = true;
                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                {
                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                    _ij11[1] = -1;
                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                    {
                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                        {
                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[9];
                                                                                                                                        IkReal x2332 = IKsin ( j11 );
                                                                                                                                        IkReal x2333 = IKcos ( j11 );
                                                                                                                                        IkReal x2334 = ( cj10 * gconst10 );
                                                                                                                                        IkReal x2335 = ( gconst11 * sj10 );
                                                                                                                                        IkReal x2336 = ( sj7 * sj8 );
                                                                                                                                        IkReal x2337 = ( gconst10 * sj10 );
                                                                                                                                        IkReal x2338 = ( cj10 * gconst11 );
                                                                                                                                        IkReal x2339 = ( ( 1.0 ) * cj8 );
                                                                                                                                        IkReal x2340 = ( cj7 * sj8 );
                                                                                                                                        IkReal x2341 = ( ( 1.0 ) * sj9 );
                                                                                                                                        IkReal x2342 = ( ( 1.0 ) * cj7 * cj9 );
                                                                                                                                        IkReal x2343 = ( gconst10 * x2332 );
                                                                                                                                        IkReal x2344 = ( r21 * x2333 );
                                                                                                                                        IkReal x2345 = ( r10 * x2333 );
                                                                                                                                        IkReal x2346 = ( cj10 * x2332 );
                                                                                                                                        IkReal x2347 = ( r20 * x2333 );
                                                                                                                                        IkReal x2348 = ( sj9 * x2339 );
                                                                                                                                        IkReal x2349 = ( ( 1.0 ) * x2333 );
                                                                                                                                        IkReal x2350 = ( ( 1.0 ) * gconst11 * x2332 );
                                                                                                                                        IkReal x2351 = ( ( 1.0 ) * sj10 * x2332 );
                                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r20 * x2350 ) ) + ( ( ( -1.0 ) * r22 * x2349 ) ) + ( ( r21 * x2343 ) ) );
                                                                                                                                        evalcond[1] = ( cj9 + ( ( r11 * x2343 ) ) + ( ( ( -1.0 ) * r10 * x2350 ) ) + ( ( ( -1.0 ) * r12 * x2349 ) ) );
                                                                                                                                        evalcond[2] = ( ( ( r01 * x2343 ) ) + ( ( ( -1.0 ) * r00 * x2350 ) ) + ( ( ( -1.0 ) * r02 * x2349 ) ) + ( ( ( -1.0 ) * x2341 ) ) );
                                                                                                                                        evalcond[3] = ( ( ( x2334 * x2344 ) ) + ( ( r21 * x2335 ) ) + ( ( cj8 * sj7 ) ) + x2340 + ( ( r22 * x2346 ) ) + ( ( ( -1.0 ) * x2338 * x2347 ) ) + ( ( r20 * x2337 ) ) );
                                                                                                                                        evalcond[4] = ( ( ( x2335 * x2347 ) ) + ( ( r21 * x2338 ) ) + ( ( ( -1.0 ) * cj7 * x2339 ) ) + x2336 + ( ( ( -1.0 ) * x2337 * x2344 ) ) + ( ( ( -1.0 ) * r22 * x2351 ) ) + ( ( r20 * x2334 ) ) );
                                                                                                                                        evalcond[5] = ( ( ( ( -1.0 ) * cj7 * cj9 * x2339 ) ) + ( ( cj9 * x2336 ) ) + ( ( r01 * x2335 ) ) + ( ( r00 * x2337 ) ) + ( ( r01 * x2333 * x2334 ) ) + ( ( r02 * x2346 ) ) + ( ( ( -1.0 ) * r00 * x2338 * x2349 ) ) );
                                                                                                                                        evalcond[6] = ( ( ( ( -1.0 ) * cj7 * x2348 ) ) + ( ( r12 * x2346 ) ) + ( ( r11 * x2335 ) ) + ( ( r11 * x2333 * x2334 ) ) + ( ( sj9 * x2336 ) ) + ( ( ( -1.0 ) * x2338 * x2345 ) ) + ( ( r10 * x2337 ) ) );
                                                                                                                                        evalcond[7] = ( ( ( ( -1.0 ) * cj9 * sj7 * x2339 ) ) + ( ( r01 * x2338 ) ) + ( ( ( -1.0 ) * cj9 * x2340 ) ) + ( ( r00 * x2334 ) ) + ( ( ( -1.0 ) * r02 * x2351 ) ) + ( ( r00 * x2333 * x2335 ) ) + ( ( ( -1.0 ) * r01 * x2337 * x2349 ) ) );
                                                                                                                                        evalcond[8] = ( ( ( x2335 * x2345 ) ) + ( ( ( -1.0 ) * r11 * x2337 * x2349 ) ) + ( ( ( -1.0 ) * x2340 * x2341 ) ) + ( ( r11 * x2338 ) ) + ( ( ( -1.0 ) * r12 * x2351 ) ) + ( ( ( -1.0 ) * sj7 * x2348 ) ) + ( ( r10 * x2334 ) ) );
                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }

                                                                                                                        }

                                                                                                                    }

                                                                                                                } else
                                                                                                                {
                                                                                                                    {
                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                        bool j11valid[1] = {false};
                                                                                                                        _nj11 = 1;
                                                                                                                        IkReal x2352 = ( ( 1.0 ) * gconst11 );
                                                                                                                        CheckValue<IkReal> x2353 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst10 * r00 ) ) + ( ( ( -1.0 ) * r01 * x2352 ) ) ) ), -1 );
                                                                                                                        if ( !x2353.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        CheckValue<IkReal> x2354 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( cj9 * gconst10 * r21 ) ) + ( ( ( -1.0 ) * cj9 * r20 * x2352 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x2354.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2353.value ) ) ) + ( x2354.value ) );
                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                        {
                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                        }
                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                        }
                                                                                                                        j11valid[0] = true;
                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                        {
                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                            {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            _ij11[0] = ij11;
                                                                                                                            _ij11[1] = -1;
                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                            {
                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                {
                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                    break;
                                                                                                                                }
                                                                                                                            }
                                                                                                                            j11 = j11array[ij11];
                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                            {
                                                                                                                                IkReal evalcond[9];
                                                                                                                                IkReal x2355 = IKsin ( j11 );
                                                                                                                                IkReal x2356 = IKcos ( j11 );
                                                                                                                                IkReal x2357 = ( cj10 * gconst10 );
                                                                                                                                IkReal x2358 = ( gconst11 * sj10 );
                                                                                                                                IkReal x2359 = ( sj7 * sj8 );
                                                                                                                                IkReal x2360 = ( gconst10 * sj10 );
                                                                                                                                IkReal x2361 = ( cj10 * gconst11 );
                                                                                                                                IkReal x2362 = ( ( 1.0 ) * cj8 );
                                                                                                                                IkReal x2363 = ( cj7 * sj8 );
                                                                                                                                IkReal x2364 = ( ( 1.0 ) * sj9 );
                                                                                                                                IkReal x2365 = ( ( 1.0 ) * cj7 * cj9 );
                                                                                                                                IkReal x2366 = ( gconst10 * x2355 );
                                                                                                                                IkReal x2367 = ( r21 * x2356 );
                                                                                                                                IkReal x2368 = ( r10 * x2356 );
                                                                                                                                IkReal x2369 = ( cj10 * x2355 );
                                                                                                                                IkReal x2370 = ( r20 * x2356 );
                                                                                                                                IkReal x2371 = ( sj9 * x2362 );
                                                                                                                                IkReal x2372 = ( ( 1.0 ) * x2356 );
                                                                                                                                IkReal x2373 = ( ( 1.0 ) * gconst11 * x2355 );
                                                                                                                                IkReal x2374 = ( ( 1.0 ) * sj10 * x2355 );
                                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r20 * x2373 ) ) + ( ( ( -1.0 ) * r22 * x2372 ) ) + ( ( r21 * x2366 ) ) );
                                                                                                                                evalcond[1] = ( ( ( r11 * x2366 ) ) + ( ( ( -1.0 ) * r10 * x2373 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x2372 ) ) );
                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * r02 * x2372 ) ) + ( ( ( -1.0 ) * x2364 ) ) + ( ( ( -1.0 ) * r00 * x2373 ) ) + ( ( r01 * x2366 ) ) );
                                                                                                                                evalcond[3] = ( ( ( r20 * x2360 ) ) + ( ( cj8 * sj7 ) ) + x2363 + ( ( ( -1.0 ) * x2361 * x2370 ) ) + ( ( r22 * x2369 ) ) + ( ( x2357 * x2367 ) ) + ( ( r21 * x2358 ) ) );
                                                                                                                                evalcond[4] = ( x2359 + ( ( ( -1.0 ) * cj7 * x2362 ) ) + ( ( ( -1.0 ) * x2360 * x2367 ) ) + ( ( x2358 * x2370 ) ) + ( ( r20 * x2357 ) ) + ( ( ( -1.0 ) * r22 * x2374 ) ) + ( ( r21 * x2361 ) ) );
                                                                                                                                evalcond[5] = ( ( ( r01 * x2358 ) ) + ( ( r02 * x2369 ) ) + ( ( r01 * x2356 * x2357 ) ) + ( ( ( -1.0 ) * r00 * x2361 * x2372 ) ) + ( ( cj9 * x2359 ) ) + ( ( ( -1.0 ) * cj7 * cj9 * x2362 ) ) + ( ( r00 * x2360 ) ) );
                                                                                                                                evalcond[6] = ( ( ( r12 * x2369 ) ) + ( ( r10 * x2360 ) ) + ( ( r11 * x2358 ) ) + ( ( ( -1.0 ) * x2361 * x2368 ) ) + ( ( ( -1.0 ) * cj7 * x2371 ) ) + ( ( sj9 * x2359 ) ) + ( ( r11 * x2356 * x2357 ) ) );
                                                                                                                                evalcond[7] = ( ( ( r00 * x2356 * x2358 ) ) + ( ( ( -1.0 ) * r02 * x2374 ) ) + ( ( r00 * x2357 ) ) + ( ( ( -1.0 ) * cj9 * sj7 * x2362 ) ) + ( ( ( -1.0 ) * cj9 * x2363 ) ) + ( ( ( -1.0 ) * r01 * x2360 * x2372 ) ) + ( ( r01 * x2361 ) ) );
                                                                                                                                evalcond[8] = ( ( ( r11 * x2361 ) ) + ( ( r10 * x2357 ) ) + ( ( ( -1.0 ) * sj7 * x2371 ) ) + ( ( x2358 * x2368 ) ) + ( ( ( -1.0 ) * r11 * x2360 * x2372 ) ) + ( ( ( -1.0 ) * r12 * x2374 ) ) + ( ( ( -1.0 ) * x2363 * x2364 ) ) );
                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                            }

                                                                                                                            {
                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }

                                                                                                                }

                                                                                                            }

                                                                                                        }
                                                                                                    } while ( 0 );
                                                                                                    if ( bgotonextstatement )
                                                                                                    {
                                                                                                        bool bgotonextstatement = true;
                                                                                                        do
                                                                                                        {
                                                                                                            evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( j9 ) ) ), 6.28318530717959 ) ) );
                                                                                                            if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                            {
                                                                                                                bgotonextstatement = false;
                                                                                                                {
                                                                                                                    IkReal j11eval[3];
                                                                                                                    sj9 = 0;
                                                                                                                    cj9 = 1.0;
                                                                                                                    j9 = 0;
                                                                                                                    IkReal x2375 = ( ( ( r20 * sj12 ) ) + ( ( cj12 * r21 ) ) );
                                                                                                                    j11eval[0] = x2375;
                                                                                                                    j11eval[1] = IKsign ( x2375 );
                                                                                                                    j11eval[2] = ( ( IKabs ( r02 ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj12 * r00 ) ) + ( ( r01 * sj12 ) ) ) ) ) );
                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j11eval[3];
                                                                                                                            sj9 = 0;
                                                                                                                            cj9 = 1.0;
                                                                                                                            j9 = 0;
                                                                                                                            IkReal x2376 = ( ( 1.0 ) * cj12 );
                                                                                                                            IkReal x2377 = ( ( ( ( -1.0 ) * r01 * x2376 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) );
                                                                                                                            j11eval[0] = x2377;
                                                                                                                            j11eval[1] = ( ( IKabs ( r22 ) ) + ( IKabs ( ( ( ( ( -1.0 ) * r20 * x2376 ) ) + ( ( r21 * sj12 ) ) ) ) ) );
                                                                                                                            j11eval[2] = IKsign ( x2377 );
                                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j11eval[2];
                                                                                                                                    sj9 = 0;
                                                                                                                                    cj9 = 1.0;
                                                                                                                                    j9 = 0;
                                                                                                                                    IkReal x2378 = cj12 * cj12;
                                                                                                                                    IkReal x2379 = ( cj10 * r11 );
                                                                                                                                    IkReal x2380 = ( cj12 * sj12 );
                                                                                                                                    IkReal x2381 = ( ( 1.0 ) * cj10 );
                                                                                                                                    IkReal x2382 = ( ( ( ( -1.0 ) * r10 * r20 * x2378 * x2381 ) ) + ( ( ( -1.0 ) * r21 * x2379 ) ) + ( ( ( -1.0 ) * r12 * r22 * x2381 ) ) + ( ( r21 * x2378 * x2379 ) ) + ( ( cj10 * r10 * r21 * x2380 ) ) + ( ( r20 * x2379 * x2380 ) ) );
                                                                                                                                    j11eval[0] = x2382;
                                                                                                                                    j11eval[1] = IKsign ( x2382 );
                                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                    {
                                                                                                                                        continue; // 1 cases reached

                                                                                                                                    } else
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                            bool j11valid[1] = {false};
                                                                                                                                            _nj11 = 1;
                                                                                                                                            IkReal x2383 = cj12 * cj12;
                                                                                                                                            IkReal x2384 = ( cj12 * r11 );
                                                                                                                                            IkReal x2385 = ( cj10 * r20 );
                                                                                                                                            IkReal x2386 = ( r22 * sj10 );
                                                                                                                                            IkReal x2387 = ( ( 1.0 ) * r21 );
                                                                                                                                            IkReal x2388 = ( cj10 * r11 );
                                                                                                                                            IkReal x2389 = ( r10 * sj12 );
                                                                                                                                            IkReal x2390 = ( r21 * sj10 );
                                                                                                                                            IkReal x2391 = ( r10 * x2383 );
                                                                                                                                            IkReal x2392 = ( ( 1.0 ) * r20 * sj10 );
                                                                                                                                            CheckValue<IkReal> x2393 = IKPowWithIntegerCheck ( IKsign ( ( ( ( cj10 * cj12 * r21 * x2389 ) ) + ( ( sj12 * x2384 * x2385 ) ) + ( ( ( -1.0 ) * cj10 * r12 * r22 ) ) + ( ( ( -1.0 ) * x2385 * x2391 ) ) + ( ( ( -1.0 ) * x2387 * x2388 ) ) + ( ( r21 * x2383 * x2388 ) ) ) ), -1 );
                                                                                                                                            if ( !x2393.valid ) {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            CheckValue<IkReal> x2394 = IKatan2WithCheck ( IkReal ( ( ( ( x2384 * x2386 ) ) + ( ( x2386 * x2389 ) ) ) ), IkReal ( ( ( ( r10 * x2390 ) ) + ( ( sj12 * x2384 * x2390 ) ) + ( ( ( -1.0 ) * cj12 * x2389 * x2392 ) ) + ( ( ( -1.0 ) * r11 * x2383 * x2392 ) ) + ( ( ( -1.0 ) * sj10 * x2387 * x2391 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                            if ( !x2394.valid ) {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2393.value ) ) ) + ( x2394.value ) );
                                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                                            {
                                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j11valid[0] = true;
                                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                            {
                                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij11[0] = ij11;
                                                                                                                                                _ij11[1] = -1;
                                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                {
                                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                    {
                                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j11 = j11array[ij11];
                                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[9];
                                                                                                                                                    IkReal x2395 = IKsin ( j11 );
                                                                                                                                                    IkReal x2396 = IKcos ( j11 );
                                                                                                                                                    IkReal x2397 = ( sj7 * sj8 );
                                                                                                                                                    IkReal x2398 = ( cj10 * cj12 );
                                                                                                                                                    IkReal x2399 = ( r00 * sj12 );
                                                                                                                                                    IkReal x2400 = ( r01 * sj12 );
                                                                                                                                                    IkReal x2401 = ( r10 * sj10 );
                                                                                                                                                    IkReal x2402 = ( cj12 * r10 );
                                                                                                                                                    IkReal x2403 = ( cj7 * sj8 );
                                                                                                                                                    IkReal x2404 = ( cj10 * sj12 );
                                                                                                                                                    IkReal x2405 = ( cj12 * sj10 );
                                                                                                                                                    IkReal x2406 = ( r11 * sj12 );
                                                                                                                                                    IkReal x2407 = ( r21 * sj12 );
                                                                                                                                                    IkReal x2408 = ( r20 * sj10 );
                                                                                                                                                    IkReal x2409 = ( ( 1.0 ) * cj8 );
                                                                                                                                                    IkReal x2410 = ( cj12 * r00 );
                                                                                                                                                    IkReal x2411 = ( cj7 * x2409 );
                                                                                                                                                    IkReal x2412 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                    IkReal x2413 = ( cj10 * x2396 );
                                                                                                                                                    IkReal x2414 = ( cj12 * x2396 );
                                                                                                                                                    IkReal x2415 = ( ( 1.0 ) * x2395 );
                                                                                                                                                    IkReal x2416 = ( ( 1.0 ) * x2396 );
                                                                                                                                                    IkReal x2417 = ( cj10 * x2395 );
                                                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * x2395 * x2412 ) ) + ( ( ( -1.0 ) * r22 * x2416 ) ) + ( ( x2395 * x2407 ) ) );
                                                                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * r02 * x2416 ) ) + ( ( ( -1.0 ) * x2410 * x2415 ) ) + ( ( x2395 * x2400 ) ) );
                                                                                                                                                    evalcond[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * x2402 * x2415 ) ) + ( ( ( -1.0 ) * r12 * x2416 ) ) + ( ( x2395 * x2406 ) ) );
                                                                                                                                                    evalcond[3] = ( ( ( r11 * x2405 ) ) + ( ( sj12 * x2401 ) ) + ( ( ( -1.0 ) * r10 * x2398 * x2416 ) ) + ( ( r12 * x2417 ) ) + ( ( r11 * x2396 * x2404 ) ) );
                                                                                                                                                    evalcond[4] = ( ( ( r10 * x2404 ) ) + ( ( ( -1.0 ) * sj10 * x2406 * x2416 ) ) + ( ( x2401 * x2414 ) ) + ( ( r11 * x2398 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2415 ) ) );
                                                                                                                                                    evalcond[5] = ( ( ( r22 * x2417 ) ) + ( ( r21 * x2396 * x2404 ) ) + x2403 + ( ( cj8 * sj7 ) ) + ( ( sj12 * x2408 ) ) + ( ( ( -1.0 ) * r20 * x2398 * x2416 ) ) + ( ( r21 * x2405 ) ) );
                                                                                                                                                    evalcond[6] = ( ( ( r01 * x2405 ) ) + x2397 + ( ( sj10 * x2399 ) ) + ( ( ( -1.0 ) * x2411 ) ) + ( ( x2400 * x2413 ) ) + ( ( ( -1.0 ) * r00 * x2398 * x2416 ) ) + ( ( r02 * x2417 ) ) );
                                                                                                                                                    evalcond[7] = ( ( ( r20 * x2404 ) ) + x2397 + ( ( ( -1.0 ) * x2411 ) ) + ( ( ( -1.0 ) * sj10 * x2407 * x2416 ) ) + ( ( r21 * x2398 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2415 ) ) + ( ( r20 * x2396 * x2405 ) ) );
                                                                                                                                                    evalcond[8] = ( ( ( ( -1.0 ) * x2403 ) ) + ( ( r00 * x2396 * x2405 ) ) + ( ( cj10 * x2399 ) ) + ( ( r01 * x2398 ) ) + ( ( ( -1.0 ) * sj7 * x2409 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2415 ) ) + ( ( ( -1.0 ) * sj10 * x2400 * x2416 ) ) );
                                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                    }

                                                                                                                                }

                                                                                                                            } else
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                    bool j11valid[1] = {false};
                                                                                                                                    _nj11 = 1;
                                                                                                                                    IkReal x2418 = ( ( 1.0 ) * cj12 );
                                                                                                                                    CheckValue<IkReal> x2419 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r00 * sj12 ) ) + ( ( ( -1.0 ) * r01 * x2418 ) ) ) ), -1 );
                                                                                                                                    if ( !x2419.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    CheckValue<IkReal> x2420 = IKatan2WithCheck ( IkReal ( r22 ), IkReal ( ( ( ( ( -1.0 ) * r20 * x2418 ) ) + ( ( r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                    if ( !x2420.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2419.value ) ) ) + ( x2420.value ) );
                                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                                    {
                                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j11valid[0] = true;
                                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                    {
                                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij11[0] = ij11;
                                                                                                                                        _ij11[1] = -1;
                                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                        {
                                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                            {
                                                                                                                                                j11valid[iij11] = false;
                                                                                                                                                _ij11[1] = iij11;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j11 = j11array[ij11];
                                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[9];
                                                                                                                                            IkReal x2421 = IKsin ( j11 );
                                                                                                                                            IkReal x2422 = IKcos ( j11 );
                                                                                                                                            IkReal x2423 = ( sj7 * sj8 );
                                                                                                                                            IkReal x2424 = ( cj10 * cj12 );
                                                                                                                                            IkReal x2425 = ( r00 * sj12 );
                                                                                                                                            IkReal x2426 = ( r01 * sj12 );
                                                                                                                                            IkReal x2427 = ( r10 * sj10 );
                                                                                                                                            IkReal x2428 = ( cj12 * r10 );
                                                                                                                                            IkReal x2429 = ( cj7 * sj8 );
                                                                                                                                            IkReal x2430 = ( cj10 * sj12 );
                                                                                                                                            IkReal x2431 = ( cj12 * sj10 );
                                                                                                                                            IkReal x2432 = ( r11 * sj12 );
                                                                                                                                            IkReal x2433 = ( r21 * sj12 );
                                                                                                                                            IkReal x2434 = ( r20 * sj10 );
                                                                                                                                            IkReal x2435 = ( ( 1.0 ) * cj8 );
                                                                                                                                            IkReal x2436 = ( cj12 * r00 );
                                                                                                                                            IkReal x2437 = ( cj7 * x2435 );
                                                                                                                                            IkReal x2438 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                            IkReal x2439 = ( cj10 * x2422 );
                                                                                                                                            IkReal x2440 = ( cj12 * x2422 );
                                                                                                                                            IkReal x2441 = ( ( 1.0 ) * x2421 );
                                                                                                                                            IkReal x2442 = ( ( 1.0 ) * x2422 );
                                                                                                                                            IkReal x2443 = ( cj10 * x2421 );
                                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * x2421 * x2438 ) ) + ( ( x2421 * x2433 ) ) + ( ( ( -1.0 ) * r22 * x2442 ) ) );
                                                                                                                                            evalcond[1] = ( ( ( ( -1.0 ) * x2436 * x2441 ) ) + ( ( x2421 * x2426 ) ) + ( ( ( -1.0 ) * r02 * x2442 ) ) );
                                                                                                                                            evalcond[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * x2428 * x2441 ) ) + ( ( x2421 * x2432 ) ) + ( ( ( -1.0 ) * r12 * x2442 ) ) );
                                                                                                                                            evalcond[3] = ( ( ( r11 * x2431 ) ) + ( ( r11 * x2422 * x2430 ) ) + ( ( ( -1.0 ) * r10 * x2424 * x2442 ) ) + ( ( r12 * x2443 ) ) + ( ( sj12 * x2427 ) ) );
                                                                                                                                            evalcond[4] = ( ( ( x2427 * x2440 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2441 ) ) + ( ( r11 * x2424 ) ) + ( ( ( -1.0 ) * sj10 * x2432 * x2442 ) ) + ( ( r10 * x2430 ) ) );
                                                                                                                                            evalcond[5] = ( x2429 + ( ( cj8 * sj7 ) ) + ( ( r22 * x2443 ) ) + ( ( ( -1.0 ) * r20 * x2424 * x2442 ) ) + ( ( sj12 * x2434 ) ) + ( ( r21 * x2431 ) ) + ( ( r21 * x2422 * x2430 ) ) );
                                                                                                                                            evalcond[6] = ( ( ( sj10 * x2425 ) ) + ( ( r02 * x2443 ) ) + x2423 + ( ( r01 * x2431 ) ) + ( ( ( -1.0 ) * x2437 ) ) + ( ( ( -1.0 ) * r00 * x2424 * x2442 ) ) + ( ( x2426 * x2439 ) ) );
                                                                                                                                            evalcond[7] = ( ( ( ( -1.0 ) * r22 * sj10 * x2441 ) ) + x2423 + ( ( r21 * x2424 ) ) + ( ( r20 * x2430 ) ) + ( ( ( -1.0 ) * x2437 ) ) + ( ( r20 * x2422 * x2431 ) ) + ( ( ( -1.0 ) * sj10 * x2433 * x2442 ) ) );
                                                                                                                                            evalcond[8] = ( ( ( ( -1.0 ) * sj10 * x2426 * x2442 ) ) + ( ( ( -1.0 ) * sj7 * x2435 ) ) + ( ( r00 * x2422 * x2431 ) ) + ( ( cj10 * x2425 ) ) + ( ( r01 * x2424 ) ) + ( ( ( -1.0 ) * x2429 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2441 ) ) );
                                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }

                                                                                                                            }

                                                                                                                        }

                                                                                                                    } else
                                                                                                                    {
                                                                                                                        {
                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                            bool j11valid[1] = {false};
                                                                                                                            _nj11 = 1;
                                                                                                                            CheckValue<IkReal> x2444 = IKatan2WithCheck ( IkReal ( r02 ), IkReal ( ( ( ( ( -1.0 ) * cj12 * r00 ) ) + ( ( r01 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                            if ( !x2444.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            CheckValue<IkReal> x2445 = IKPowWithIntegerCheck ( IKsign ( ( ( ( r20 * sj12 ) ) + ( ( cj12 * r21 ) ) ) ), -1 );
                                                                                                                            if ( !x2445.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x2444.value ) + ( ( ( 1.5707963267949 ) * ( x2445.value ) ) ) );
                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                            {
                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                            }
                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                            }
                                                                                                                            j11valid[0] = true;
                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                            {
                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                _ij11[0] = ij11;
                                                                                                                                _ij11[1] = -1;
                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                {
                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                    {
                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                        break;
                                                                                                                                    }
                                                                                                                                }
                                                                                                                                j11 = j11array[ij11];
                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                {
                                                                                                                                    IkReal evalcond[9];
                                                                                                                                    IkReal x2446 = IKsin ( j11 );
                                                                                                                                    IkReal x2447 = IKcos ( j11 );
                                                                                                                                    IkReal x2448 = ( sj7 * sj8 );
                                                                                                                                    IkReal x2449 = ( cj10 * cj12 );
                                                                                                                                    IkReal x2450 = ( r00 * sj12 );
                                                                                                                                    IkReal x2451 = ( r01 * sj12 );
                                                                                                                                    IkReal x2452 = ( r10 * sj10 );
                                                                                                                                    IkReal x2453 = ( cj12 * r10 );
                                                                                                                                    IkReal x2454 = ( cj7 * sj8 );
                                                                                                                                    IkReal x2455 = ( cj10 * sj12 );
                                                                                                                                    IkReal x2456 = ( cj12 * sj10 );
                                                                                                                                    IkReal x2457 = ( r11 * sj12 );
                                                                                                                                    IkReal x2458 = ( r21 * sj12 );
                                                                                                                                    IkReal x2459 = ( r20 * sj10 );
                                                                                                                                    IkReal x2460 = ( ( 1.0 ) * cj8 );
                                                                                                                                    IkReal x2461 = ( cj12 * r00 );
                                                                                                                                    IkReal x2462 = ( cj7 * x2460 );
                                                                                                                                    IkReal x2463 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                    IkReal x2464 = ( cj10 * x2447 );
                                                                                                                                    IkReal x2465 = ( cj12 * x2447 );
                                                                                                                                    IkReal x2466 = ( ( 1.0 ) * x2446 );
                                                                                                                                    IkReal x2467 = ( ( 1.0 ) * x2447 );
                                                                                                                                    IkReal x2468 = ( cj10 * x2446 );
                                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2467 ) ) + ( ( ( -1.0 ) * x2446 * x2463 ) ) + ( ( x2446 * x2458 ) ) );
                                                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * r02 * x2467 ) ) + ( ( ( -1.0 ) * x2461 * x2466 ) ) + ( ( x2446 * x2451 ) ) );
                                                                                                                                    evalcond[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * r12 * x2467 ) ) + ( ( ( -1.0 ) * x2453 * x2466 ) ) + ( ( x2446 * x2457 ) ) );
                                                                                                                                    evalcond[3] = ( ( ( sj12 * x2452 ) ) + ( ( ( -1.0 ) * r10 * x2449 * x2467 ) ) + ( ( r12 * x2468 ) ) + ( ( r11 * x2447 * x2455 ) ) + ( ( r11 * x2456 ) ) );
                                                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * sj10 * x2457 * x2467 ) ) + ( ( r10 * x2455 ) ) + ( ( x2452 * x2465 ) ) + ( ( r11 * x2449 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2466 ) ) );
                                                                                                                                    evalcond[5] = ( ( ( sj12 * x2459 ) ) + x2454 + ( ( cj8 * sj7 ) ) + ( ( r21 * x2447 * x2455 ) ) + ( ( r22 * x2468 ) ) + ( ( ( -1.0 ) * r20 * x2449 * x2467 ) ) + ( ( r21 * x2456 ) ) );
                                                                                                                                    evalcond[6] = ( x2448 + ( ( ( -1.0 ) * r00 * x2449 * x2467 ) ) + ( ( r01 * x2456 ) ) + ( ( r02 * x2468 ) ) + ( ( x2451 * x2464 ) ) + ( ( ( -1.0 ) * x2462 ) ) + ( ( sj10 * x2450 ) ) );
                                                                                                                                    evalcond[7] = ( x2448 + ( ( ( -1.0 ) * r22 * sj10 * x2466 ) ) + ( ( r20 * x2447 * x2456 ) ) + ( ( ( -1.0 ) * sj10 * x2458 * x2467 ) ) + ( ( ( -1.0 ) * x2462 ) ) + ( ( r20 * x2455 ) ) + ( ( r21 * x2449 ) ) );
                                                                                                                                    evalcond[8] = ( ( ( ( -1.0 ) * sj10 * x2451 * x2467 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2466 ) ) + ( ( cj10 * x2450 ) ) + ( ( r01 * x2449 ) ) + ( ( ( -1.0 ) * x2454 ) ) + ( ( ( -1.0 ) * sj7 * x2460 ) ) + ( ( r00 * x2447 * x2456 ) ) );
                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                }

                                                                                                                                {
                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }

                                                                                                                    }

                                                                                                                }

                                                                                                            }
                                                                                                        } while ( 0 );
                                                                                                        if ( bgotonextstatement )
                                                                                                        {
                                                                                                            bool bgotonextstatement = true;
                                                                                                            do
                                                                                                            {
                                                                                                                evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( -3.14159265358979 ) + j9 ) ) ) ), 6.28318530717959 ) ) );
                                                                                                                if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                                {
                                                                                                                    bgotonextstatement = false;
                                                                                                                    {
                                                                                                                        IkReal j11eval[3];
                                                                                                                        sj9 = 0;
                                                                                                                        cj9 = -1.0;
                                                                                                                        j9 = 3.14159265358979;
                                                                                                                        IkReal x2469 = ( ( ( r00 * sj12 ) ) + ( ( cj12 * r01 ) ) );
                                                                                                                        j11eval[0] = x2469;
                                                                                                                        j11eval[1] = ( ( IKabs ( r22 ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj12 * r20 ) ) + ( ( r21 * sj12 ) ) ) ) ) );
                                                                                                                        j11eval[2] = IKsign ( x2469 );
                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11eval[3];
                                                                                                                                sj9 = 0;
                                                                                                                                cj9 = -1.0;
                                                                                                                                j9 = 3.14159265358979;
                                                                                                                                IkReal x2470 = ( ( 1.0 ) * cj12 );
                                                                                                                                IkReal x2471 = ( ( ( ( -1.0 ) * r21 * x2470 ) ) + ( ( ( -1.0 ) * r20 * sj12 ) ) );
                                                                                                                                j11eval[0] = x2471;
                                                                                                                                j11eval[1] = ( ( IKabs ( r02 ) ) + ( IKabs ( ( ( ( ( -1.0 ) * r00 * x2470 ) ) + ( ( r01 * sj12 ) ) ) ) ) );
                                                                                                                                j11eval[2] = IKsign ( x2471 );
                                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j11eval[2];
                                                                                                                                        sj9 = 0;
                                                                                                                                        cj9 = -1.0;
                                                                                                                                        j9 = 3.14159265358979;
                                                                                                                                        IkReal x2472 = cj12 * cj12;
                                                                                                                                        IkReal x2473 = ( cj10 * r11 );
                                                                                                                                        IkReal x2474 = ( cj12 * sj12 );
                                                                                                                                        IkReal x2475 = ( ( 1.0 ) * cj10 );
                                                                                                                                        IkReal x2476 = ( ( ( r20 * x2473 * x2474 ) ) + ( ( ( -1.0 ) * r12 * r22 * x2475 ) ) + ( ( r21 * x2472 * x2473 ) ) + ( ( ( -1.0 ) * r21 * x2473 ) ) + ( ( ( -1.0 ) * r10 * r20 * x2472 * x2475 ) ) + ( ( cj10 * r10 * r21 * x2474 ) ) );
                                                                                                                                        j11eval[0] = x2476;
                                                                                                                                        j11eval[1] = IKsign ( x2476 );
                                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                        {
                                                                                                                                            continue; // 1 cases reached

                                                                                                                                        } else
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                                _nj11 = 1;
                                                                                                                                                IkReal x2477 = cj12 * cj12;
                                                                                                                                                IkReal x2478 = ( cj12 * r11 );
                                                                                                                                                IkReal x2479 = ( cj10 * r20 );
                                                                                                                                                IkReal x2480 = ( r22 * sj10 );
                                                                                                                                                IkReal x2481 = ( ( 1.0 ) * r21 );
                                                                                                                                                IkReal x2482 = ( cj10 * r11 );
                                                                                                                                                IkReal x2483 = ( r10 * sj12 );
                                                                                                                                                IkReal x2484 = ( r21 * sj10 );
                                                                                                                                                IkReal x2485 = ( r10 * x2477 );
                                                                                                                                                IkReal x2486 = ( ( 1.0 ) * r20 * sj10 );
                                                                                                                                                CheckValue<IkReal> x2487 = IKatan2WithCheck ( IkReal ( ( ( ( x2480 * x2483 ) ) + ( ( x2478 * x2480 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * sj10 * x2481 * x2485 ) ) + ( ( sj12 * x2478 * x2484 ) ) + ( ( ( -1.0 ) * r11 * x2477 * x2486 ) ) + ( ( ( -1.0 ) * cj12 * x2483 * x2486 ) ) + ( ( r10 * x2484 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                if ( !x2487.valid ) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                CheckValue<IkReal> x2488 = IKPowWithIntegerCheck ( IKsign ( ( ( ( sj12 * x2478 * x2479 ) ) + ( ( cj10 * cj12 * r21 * x2483 ) ) + ( ( ( -1.0 ) * x2479 * x2485 ) ) + ( ( ( -1.0 ) * x2481 * x2482 ) ) + ( ( ( -1.0 ) * cj10 * r12 * r22 ) ) + ( ( r21 * x2477 * x2482 ) ) ) ), -1 );
                                                                                                                                                if ( !x2488.valid ) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x2487.value ) + ( ( ( 1.5707963267949 ) * ( x2488.value ) ) ) );
                                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                                {
                                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j11valid[0] = true;
                                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                {
                                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                                    _ij11[1] = -1;
                                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                    {
                                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                        {
                                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[9];
                                                                                                                                                        IkReal x2489 = IKsin ( j11 );
                                                                                                                                                        IkReal x2490 = IKcos ( j11 );
                                                                                                                                                        IkReal x2491 = ( cj8 * sj7 );
                                                                                                                                                        IkReal x2492 = ( cj7 * sj8 );
                                                                                                                                                        IkReal x2493 = ( cj10 * cj12 );
                                                                                                                                                        IkReal x2494 = ( r00 * sj12 );
                                                                                                                                                        IkReal x2495 = ( r01 * sj12 );
                                                                                                                                                        IkReal x2496 = ( r10 * sj10 );
                                                                                                                                                        IkReal x2497 = ( cj12 * r10 );
                                                                                                                                                        IkReal x2498 = ( cj10 * sj12 );
                                                                                                                                                        IkReal x2499 = ( cj12 * sj10 );
                                                                                                                                                        IkReal x2500 = ( r11 * sj12 );
                                                                                                                                                        IkReal x2501 = ( r21 * sj12 );
                                                                                                                                                        IkReal x2502 = ( r20 * sj10 );
                                                                                                                                                        IkReal x2503 = ( cj7 * cj8 );
                                                                                                                                                        IkReal x2504 = ( cj12 * r00 );
                                                                                                                                                        IkReal x2505 = ( sj7 * sj8 );
                                                                                                                                                        IkReal x2506 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                        IkReal x2507 = ( cj10 * x2490 );
                                                                                                                                                        IkReal x2508 = ( cj12 * x2490 );
                                                                                                                                                        IkReal x2509 = ( ( 1.0 ) * x2489 );
                                                                                                                                                        IkReal x2510 = ( ( 1.0 ) * x2490 );
                                                                                                                                                        IkReal x2511 = ( cj10 * x2489 );
                                                                                                                                                        IkReal x2512 = ( x2491 + x2492 );
                                                                                                                                                        evalcond[0] = ( ( ( x2489 * x2501 ) ) + ( ( ( -1.0 ) * r22 * x2510 ) ) + ( ( ( -1.0 ) * x2489 * x2506 ) ) );
                                                                                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * x2504 * x2509 ) ) + ( ( ( -1.0 ) * r02 * x2510 ) ) + ( ( x2489 * x2495 ) ) );
                                                                                                                                                        evalcond[2] = ( ( -1.0 ) + ( ( ( -1.0 ) * x2497 * x2509 ) ) + ( ( ( -1.0 ) * r12 * x2510 ) ) + ( ( x2489 * x2500 ) ) );
                                                                                                                                                        evalcond[3] = ( ( ( r11 * x2490 * x2498 ) ) + ( ( sj12 * x2496 ) ) + ( ( r11 * x2499 ) ) + ( ( ( -1.0 ) * r10 * x2493 * x2510 ) ) + ( ( r12 * x2511 ) ) );
                                                                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * r12 * sj10 * x2509 ) ) + ( ( ( -1.0 ) * sj10 * x2500 * x2510 ) ) + ( ( x2496 * x2508 ) ) + ( ( r11 * x2493 ) ) + ( ( r10 * x2498 ) ) );
                                                                                                                                                        evalcond[5] = ( x2512 + ( ( ( -1.0 ) * r20 * x2493 * x2510 ) ) + ( ( r22 * x2511 ) ) + ( ( r21 * x2490 * x2498 ) ) + ( ( r21 * x2499 ) ) + ( ( sj12 * x2502 ) ) );
                                                                                                                                                        evalcond[6] = ( x2503 + ( ( r02 * x2511 ) ) + ( ( x2495 * x2507 ) ) + ( ( ( -1.0 ) * x2505 ) ) + ( ( sj10 * x2494 ) ) + ( ( r01 * x2499 ) ) + ( ( ( -1.0 ) * r00 * x2493 * x2510 ) ) );
                                                                                                                                                        evalcond[7] = ( x2512 + ( ( ( -1.0 ) * r02 * sj10 * x2509 ) ) + ( ( ( -1.0 ) * sj10 * x2495 * x2510 ) ) + ( ( cj10 * x2494 ) ) + ( ( r00 * x2490 * x2499 ) ) + ( ( r01 * x2493 ) ) );
                                                                                                                                                        evalcond[8] = ( ( ( ( -1.0 ) * r22 * sj10 * x2509 ) ) + x2505 + ( ( ( -1.0 ) * x2503 ) ) + ( ( ( -1.0 ) * sj10 * x2501 * x2510 ) ) + ( ( r20 * x2490 * x2499 ) ) + ( ( r21 * x2493 ) ) + ( ( r20 * x2498 ) ) );
                                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                        }

                                                                                                                                    }

                                                                                                                                } else
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                        bool j11valid[1] = {false};
                                                                                                                                        _nj11 = 1;
                                                                                                                                        IkReal x2513 = ( ( 1.0 ) * cj12 );
                                                                                                                                        CheckValue<IkReal> x2514 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r20 * sj12 ) ) + ( ( ( -1.0 ) * r21 * x2513 ) ) ) ), -1 );
                                                                                                                                        if ( !x2514.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        CheckValue<IkReal> x2515 = IKatan2WithCheck ( IkReal ( r02 ), IkReal ( ( ( ( ( -1.0 ) * r00 * x2513 ) ) + ( ( r01 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                        if ( !x2515.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2514.value ) ) ) + ( x2515.value ) );
                                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                                        {
                                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                                        }
                                                                                                                                        j11valid[0] = true;
                                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                        {
                                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            _ij11[0] = ij11;
                                                                                                                                            _ij11[1] = -1;
                                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                            {
                                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                {
                                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            j11 = j11array[ij11];
                                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[9];
                                                                                                                                                IkReal x2516 = IKsin ( j11 );
                                                                                                                                                IkReal x2517 = IKcos ( j11 );
                                                                                                                                                IkReal x2518 = ( cj8 * sj7 );
                                                                                                                                                IkReal x2519 = ( cj7 * sj8 );
                                                                                                                                                IkReal x2520 = ( cj10 * cj12 );
                                                                                                                                                IkReal x2521 = ( r00 * sj12 );
                                                                                                                                                IkReal x2522 = ( r01 * sj12 );
                                                                                                                                                IkReal x2523 = ( r10 * sj10 );
                                                                                                                                                IkReal x2524 = ( cj12 * r10 );
                                                                                                                                                IkReal x2525 = ( cj10 * sj12 );
                                                                                                                                                IkReal x2526 = ( cj12 * sj10 );
                                                                                                                                                IkReal x2527 = ( r11 * sj12 );
                                                                                                                                                IkReal x2528 = ( r21 * sj12 );
                                                                                                                                                IkReal x2529 = ( r20 * sj10 );
                                                                                                                                                IkReal x2530 = ( cj7 * cj8 );
                                                                                                                                                IkReal x2531 = ( cj12 * r00 );
                                                                                                                                                IkReal x2532 = ( sj7 * sj8 );
                                                                                                                                                IkReal x2533 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                IkReal x2534 = ( cj10 * x2517 );
                                                                                                                                                IkReal x2535 = ( cj12 * x2517 );
                                                                                                                                                IkReal x2536 = ( ( 1.0 ) * x2516 );
                                                                                                                                                IkReal x2537 = ( ( 1.0 ) * x2517 );
                                                                                                                                                IkReal x2538 = ( cj10 * x2516 );
                                                                                                                                                IkReal x2539 = ( x2518 + x2519 );
                                                                                                                                                evalcond[0] = ( ( ( x2516 * x2528 ) ) + ( ( ( -1.0 ) * r22 * x2537 ) ) + ( ( ( -1.0 ) * x2516 * x2533 ) ) );
                                                                                                                                                evalcond[1] = ( ( ( x2516 * x2522 ) ) + ( ( ( -1.0 ) * r02 * x2537 ) ) + ( ( ( -1.0 ) * x2531 * x2536 ) ) );
                                                                                                                                                evalcond[2] = ( ( -1.0 ) + ( ( x2516 * x2527 ) ) + ( ( ( -1.0 ) * x2524 * x2536 ) ) + ( ( ( -1.0 ) * r12 * x2537 ) ) );
                                                                                                                                                evalcond[3] = ( ( ( ( -1.0 ) * r10 * x2520 * x2537 ) ) + ( ( r11 * x2526 ) ) + ( ( r11 * x2517 * x2525 ) ) + ( ( sj12 * x2523 ) ) + ( ( r12 * x2538 ) ) );
                                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * r12 * sj10 * x2536 ) ) + ( ( x2523 * x2535 ) ) + ( ( r11 * x2520 ) ) + ( ( ( -1.0 ) * sj10 * x2527 * x2537 ) ) + ( ( r10 * x2525 ) ) );
                                                                                                                                                evalcond[5] = ( x2539 + ( ( ( -1.0 ) * r20 * x2520 * x2537 ) ) + ( ( r22 * x2538 ) ) + ( ( sj12 * x2529 ) ) + ( ( r21 * x2517 * x2525 ) ) + ( ( r21 * x2526 ) ) );
                                                                                                                                                evalcond[6] = ( x2530 + ( ( sj10 * x2521 ) ) + ( ( r01 * x2526 ) ) + ( ( r02 * x2538 ) ) + ( ( ( -1.0 ) * x2532 ) ) + ( ( x2522 * x2534 ) ) + ( ( ( -1.0 ) * r00 * x2520 * x2537 ) ) );
                                                                                                                                                evalcond[7] = ( ( ( cj10 * x2521 ) ) + x2539 + ( ( r00 * x2517 * x2526 ) ) + ( ( ( -1.0 ) * sj10 * x2522 * x2537 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2536 ) ) + ( ( r01 * x2520 ) ) );
                                                                                                                                                evalcond[8] = ( x2532 + ( ( ( -1.0 ) * sj10 * x2528 * x2537 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2536 ) ) + ( ( r20 * x2517 * x2526 ) ) + ( ( r20 * x2525 ) ) + ( ( ( -1.0 ) * x2530 ) ) + ( ( r21 * x2520 ) ) );
                                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            {
                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                }

                                                                                                                            }

                                                                                                                        } else
                                                                                                                        {
                                                                                                                            {
                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                _nj11 = 1;
                                                                                                                                CheckValue<IkReal> x2540 = IKatan2WithCheck ( IkReal ( r22 ), IkReal ( ( ( ( ( -1.0 ) * cj12 * r20 ) ) + ( ( r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                if ( !x2540.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                CheckValue<IkReal> x2541 = IKPowWithIntegerCheck ( IKsign ( ( ( ( r00 * sj12 ) ) + ( ( cj12 * r01 ) ) ) ), -1 );
                                                                                                                                if ( !x2541.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x2540.value ) + ( ( ( 1.5707963267949 ) * ( x2541.value ) ) ) );
                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                {
                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                }
                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                }
                                                                                                                                j11valid[0] = true;
                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                {
                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                    {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                    _ij11[1] = -1;
                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                    {
                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                        {
                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                            break;
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                    {
                                                                                                                                        IkReal evalcond[9];
                                                                                                                                        IkReal x2542 = IKsin ( j11 );
                                                                                                                                        IkReal x2543 = IKcos ( j11 );
                                                                                                                                        IkReal x2544 = ( cj8 * sj7 );
                                                                                                                                        IkReal x2545 = ( cj7 * sj8 );
                                                                                                                                        IkReal x2546 = ( cj10 * cj12 );
                                                                                                                                        IkReal x2547 = ( r00 * sj12 );
                                                                                                                                        IkReal x2548 = ( r01 * sj12 );
                                                                                                                                        IkReal x2549 = ( r10 * sj10 );
                                                                                                                                        IkReal x2550 = ( cj12 * r10 );
                                                                                                                                        IkReal x2551 = ( cj10 * sj12 );
                                                                                                                                        IkReal x2552 = ( cj12 * sj10 );
                                                                                                                                        IkReal x2553 = ( r11 * sj12 );
                                                                                                                                        IkReal x2554 = ( r21 * sj12 );
                                                                                                                                        IkReal x2555 = ( r20 * sj10 );
                                                                                                                                        IkReal x2556 = ( cj7 * cj8 );
                                                                                                                                        IkReal x2557 = ( cj12 * r00 );
                                                                                                                                        IkReal x2558 = ( sj7 * sj8 );
                                                                                                                                        IkReal x2559 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                        IkReal x2560 = ( cj10 * x2543 );
                                                                                                                                        IkReal x2561 = ( cj12 * x2543 );
                                                                                                                                        IkReal x2562 = ( ( 1.0 ) * x2542 );
                                                                                                                                        IkReal x2563 = ( ( 1.0 ) * x2543 );
                                                                                                                                        IkReal x2564 = ( cj10 * x2542 );
                                                                                                                                        IkReal x2565 = ( x2545 + x2544 );
                                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2563 ) ) + ( ( ( -1.0 ) * x2542 * x2559 ) ) + ( ( x2542 * x2554 ) ) );
                                                                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * r02 * x2563 ) ) + ( ( ( -1.0 ) * x2557 * x2562 ) ) + ( ( x2542 * x2548 ) ) );
                                                                                                                                        evalcond[2] = ( ( -1.0 ) + ( ( ( -1.0 ) * x2550 * x2562 ) ) + ( ( x2542 * x2553 ) ) + ( ( ( -1.0 ) * r12 * x2563 ) ) );
                                                                                                                                        evalcond[3] = ( ( ( r11 * x2543 * x2551 ) ) + ( ( r11 * x2552 ) ) + ( ( r12 * x2564 ) ) + ( ( sj12 * x2549 ) ) + ( ( ( -1.0 ) * r10 * x2546 * x2563 ) ) );
                                                                                                                                        evalcond[4] = ( ( ( r11 * x2546 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2562 ) ) + ( ( x2549 * x2561 ) ) + ( ( r10 * x2551 ) ) + ( ( ( -1.0 ) * sj10 * x2553 * x2563 ) ) );
                                                                                                                                        evalcond[5] = ( ( ( r22 * x2564 ) ) + x2565 + ( ( ( -1.0 ) * r20 * x2546 * x2563 ) ) + ( ( sj12 * x2555 ) ) + ( ( r21 * x2543 * x2551 ) ) + ( ( r21 * x2552 ) ) );
                                                                                                                                        evalcond[6] = ( x2556 + ( ( ( -1.0 ) * r00 * x2546 * x2563 ) ) + ( ( ( -1.0 ) * x2558 ) ) + ( ( x2548 * x2560 ) ) + ( ( r01 * x2552 ) ) + ( ( sj10 * x2547 ) ) + ( ( r02 * x2564 ) ) );
                                                                                                                                        evalcond[7] = ( ( ( r00 * x2543 * x2552 ) ) + x2565 + ( ( cj10 * x2547 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2562 ) ) + ( ( r01 * x2546 ) ) + ( ( ( -1.0 ) * sj10 * x2548 * x2563 ) ) );
                                                                                                                                        evalcond[8] = ( x2558 + ( ( r21 * x2546 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2562 ) ) + ( ( ( -1.0 ) * x2556 ) ) + ( ( r20 * x2551 ) ) + ( ( r20 * x2543 * x2552 ) ) + ( ( ( -1.0 ) * sj10 * x2554 * x2563 ) ) );
                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                    {
                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }

                                                                                                                        }

                                                                                                                    }

                                                                                                                }
                                                                                                            } while ( 0 );
                                                                                                            if ( bgotonextstatement )
                                                                                                            {
                                                                                                                bool bgotonextstatement = true;
                                                                                                                do
                                                                                                                {
                                                                                                                    IkReal x2566 = ( ( -1.0 ) * r00 );
                                                                                                                    IkReal x2568 = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r02 * r02 ) ) ) );
                                                                                                                    if ( IKabs ( x2568 ) == 0 ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    IkReal x2567 = pow ( x2568, -0.5 );
                                                                                                                    CheckValue<IkReal> x2569 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r01 ) ), IkReal ( x2566 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x2569.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    IkReal gconst12 = ( ( -1.0 ) * ( x2569.value ) );
                                                                                                                    IkReal gconst13 = ( r01 * x2567 );
                                                                                                                    IkReal gconst14 = ( x2566 * x2567 );
                                                                                                                    CheckValue<IkReal> x2570 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r01 ) ), IkReal ( ( ( -1.0 ) * r00 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                    if ( !x2570.valid ) {
                                                                                                                        continue;
                                                                                                                    }
                                                                                                                    evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( j12 + ( x2570.value ) ) ) ) ), 6.28318530717959 ) ) );
                                                                                                                    if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                                    {
                                                                                                                        bgotonextstatement = false;
                                                                                                                        {
                                                                                                                            IkReal j11eval[3];
                                                                                                                            IkReal x2571 = ( ( -1.0 ) * r00 );
                                                                                                                            IkReal x2572 = x2567;
                                                                                                                            CheckValue<IkReal> x2574 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r01 ) ), IkReal ( x2571 ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                            if ( !x2574.valid ) {
                                                                                                                                continue;
                                                                                                                            }
                                                                                                                            IkReal x2573 = ( ( -1.0 ) * ( x2574.value ) );
                                                                                                                            sj12 = gconst13;
                                                                                                                            cj12 = gconst14;
                                                                                                                            j12 = x2573;
                                                                                                                            IkReal gconst12 = x2573;
                                                                                                                            IkReal gconst13 = ( r01 * x2572 );
                                                                                                                            IkReal gconst14 = ( x2571 * x2572 );
                                                                                                                            j11eval[0] = r22;
                                                                                                                            j11eval[1] = sj9;
                                                                                                                            j11eval[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r02 * r02 ) ) ) );
                                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                    bool j11valid[1] = {false};
                                                                                                                                    _nj11 = 1;
                                                                                                                                    IkReal x2575 = ( ( 1.0 ) * cj9 );
                                                                                                                                    IkReal x2576 = ( ( 1.0 ) * sj9 );
                                                                                                                                    CheckValue<IkReal> x2577 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * r12 * x2576 ) ) + ( ( ( -1.0 ) * r02 * x2575 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * gconst13 * r01 * x2575 ) ) + ( ( gconst14 * r10 * sj9 ) ) + ( ( ( -1.0 ) * gconst13 * r11 * x2576 ) ) + ( ( cj9 * gconst14 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                    if ( !x2577.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    CheckValue<IkReal> x2578 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst13 * r20 ) ) + ( ( ( -1.0 ) * gconst14 * r21 ) ) ) ), -1 );
                                                                                                                                    if ( !x2578.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( x2577.value ) + ( ( ( 1.5707963267949 ) * ( x2578.value ) ) ) );
                                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                                    {
                                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j11valid[0] = true;
                                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                    {
                                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij11[0] = ij11;
                                                                                                                                        _ij11[1] = -1;
                                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                        {
                                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                            {
                                                                                                                                                j11valid[iij11] = false;
                                                                                                                                                _ij11[1] = iij11;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j11 = j11array[ij11];
                                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[9];
                                                                                                                                            IkReal x2579 = IKsin ( j11 );
                                                                                                                                            IkReal x2580 = IKcos ( j11 );
                                                                                                                                            IkReal x2581 = ( ( 1.0 ) * cj7 );
                                                                                                                                            IkReal x2582 = ( cj9 * sj8 );
                                                                                                                                            IkReal x2583 = ( gconst13 * sj10 );
                                                                                                                                            IkReal x2584 = ( cj10 * gconst14 );
                                                                                                                                            IkReal x2585 = ( sj7 * sj8 );
                                                                                                                                            IkReal x2586 = ( cj10 * gconst13 );
                                                                                                                                            IkReal x2587 = ( cj8 * sj9 );
                                                                                                                                            IkReal x2588 = ( ( 1.0 ) * sj7 );
                                                                                                                                            IkReal x2589 = ( cj8 * cj9 );
                                                                                                                                            IkReal x2590 = ( gconst14 * sj10 );
                                                                                                                                            IkReal x2591 = ( r01 * x2580 );
                                                                                                                                            IkReal x2592 = ( ( 1.0 ) * x2580 );
                                                                                                                                            IkReal x2593 = ( gconst13 * x2579 );
                                                                                                                                            IkReal x2594 = ( cj10 * x2579 );
                                                                                                                                            IkReal x2595 = ( ( 1.0 ) * gconst14 * x2579 );
                                                                                                                                            IkReal x2596 = ( ( 1.0 ) * sj10 * x2579 );
                                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2592 ) ) + ( ( ( -1.0 ) * r20 * x2595 ) ) + ( ( r21 * x2593 ) ) );
                                                                                                                                            evalcond[1] = ( cj9 + ( ( r11 * x2593 ) ) + ( ( ( -1.0 ) * r12 * x2592 ) ) + ( ( ( -1.0 ) * r10 * x2595 ) ) );
                                                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * r00 * x2595 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( r01 * x2593 ) ) + ( ( ( -1.0 ) * r02 * x2592 ) ) );
                                                                                                                                            evalcond[3] = ( ( ( r22 * x2594 ) ) + ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * r20 * x2584 * x2592 ) ) + ( ( r20 * x2583 ) ) + ( ( r21 * x2580 * x2586 ) ) + ( ( cj7 * sj8 ) ) + ( ( r21 * x2590 ) ) );
                                                                                                                                            evalcond[4] = ( x2585 + ( ( ( -1.0 ) * r22 * x2596 ) ) + ( ( ( -1.0 ) * r21 * x2583 * x2592 ) ) + ( ( ( -1.0 ) * cj8 * x2581 ) ) + ( ( r20 * x2586 ) ) + ( ( r20 * x2580 * x2590 ) ) + ( ( r21 * x2584 ) ) );
                                                                                                                                            evalcond[5] = ( ( ( r01 * x2590 ) ) + ( ( r00 * x2583 ) ) + ( ( x2586 * x2591 ) ) + ( ( ( -1.0 ) * r00 * x2584 * x2592 ) ) + ( ( sj7 * x2582 ) ) + ( ( r02 * x2594 ) ) + ( ( ( -1.0 ) * x2581 * x2589 ) ) );
                                                                                                                                            evalcond[6] = ( ( ( r11 * x2580 * x2586 ) ) + ( ( sj9 * x2585 ) ) + ( ( r10 * x2583 ) ) + ( ( r12 * x2594 ) ) + ( ( r11 * x2590 ) ) + ( ( ( -1.0 ) * r10 * x2584 * x2592 ) ) + ( ( ( -1.0 ) * x2581 * x2587 ) ) );
                                                                                                                                            evalcond[7] = ( ( ( r01 * x2584 ) ) + ( ( ( -1.0 ) * x2583 * x2591 ) ) + ( ( r00 * x2586 ) ) + ( ( ( -1.0 ) * r02 * x2596 ) ) + ( ( ( -1.0 ) * x2588 * x2589 ) ) + ( ( r00 * x2580 * x2590 ) ) + ( ( ( -1.0 ) * x2581 * x2582 ) ) );
                                                                                                                                            evalcond[8] = ( ( ( ( -1.0 ) * r11 * x2583 * x2592 ) ) + ( ( r10 * x2580 * x2590 ) ) + ( ( r10 * x2586 ) ) + ( ( ( -1.0 ) * x2587 * x2588 ) ) + ( ( r11 * x2584 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2581 ) ) + ( ( ( -1.0 ) * r12 * x2596 ) ) );
                                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }

                                                                                                                            } else
                                                                                                                            {
                                                                                                                                {
                                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                    bool j11valid[1] = {false};
                                                                                                                                    _nj11 = 1;
                                                                                                                                    IkReal x2597 = ( ( 1.0 ) * gconst14 );
                                                                                                                                    CheckValue<IkReal> x2598 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( gconst13 * r21 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x2597 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                    if ( !x2598.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    CheckValue<IkReal> x2599 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst13 * r10 ) ) + ( ( ( -1.0 ) * r11 * x2597 ) ) ) ), -1 );
                                                                                                                                    if ( !x2599.valid ) {
                                                                                                                                        continue;
                                                                                                                                    }
                                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( x2598.value ) + ( ( ( 1.5707963267949 ) * ( x2599.value ) ) ) );
                                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                                    {
                                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                                    }
                                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                                    }
                                                                                                                                    j11valid[0] = true;
                                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                    {
                                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                                        {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        _ij11[0] = ij11;
                                                                                                                                        _ij11[1] = -1;
                                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                        {
                                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                            {
                                                                                                                                                j11valid[iij11] = false;
                                                                                                                                                _ij11[1] = iij11;
                                                                                                                                                break;
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                        j11 = j11array[ij11];
                                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                                        {
                                                                                                                                            IkReal evalcond[9];
                                                                                                                                            IkReal x2600 = IKsin ( j11 );
                                                                                                                                            IkReal x2601 = IKcos ( j11 );
                                                                                                                                            IkReal x2602 = ( ( 1.0 ) * cj7 );
                                                                                                                                            IkReal x2603 = ( cj9 * sj8 );
                                                                                                                                            IkReal x2604 = ( gconst13 * sj10 );
                                                                                                                                            IkReal x2605 = ( cj10 * gconst14 );
                                                                                                                                            IkReal x2606 = ( sj7 * sj8 );
                                                                                                                                            IkReal x2607 = ( cj10 * gconst13 );
                                                                                                                                            IkReal x2608 = ( cj8 * sj9 );
                                                                                                                                            IkReal x2609 = ( ( 1.0 ) * sj7 );
                                                                                                                                            IkReal x2610 = ( cj8 * cj9 );
                                                                                                                                            IkReal x2611 = ( gconst14 * sj10 );
                                                                                                                                            IkReal x2612 = ( r01 * x2601 );
                                                                                                                                            IkReal x2613 = ( ( 1.0 ) * x2601 );
                                                                                                                                            IkReal x2614 = ( gconst13 * x2600 );
                                                                                                                                            IkReal x2615 = ( cj10 * x2600 );
                                                                                                                                            IkReal x2616 = ( ( 1.0 ) * gconst14 * x2600 );
                                                                                                                                            IkReal x2617 = ( ( 1.0 ) * sj10 * x2600 );
                                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2613 ) ) + ( ( ( -1.0 ) * r20 * x2616 ) ) + ( ( r21 * x2614 ) ) );
                                                                                                                                            evalcond[1] = ( cj9 + ( ( ( -1.0 ) * r12 * x2613 ) ) + ( ( r11 * x2614 ) ) + ( ( ( -1.0 ) * r10 * x2616 ) ) );
                                                                                                                                            evalcond[2] = ( ( ( ( -1.0 ) * r00 * x2616 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( r01 * x2614 ) ) + ( ( ( -1.0 ) * r02 * x2613 ) ) );
                                                                                                                                            evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r20 * x2604 ) ) + ( ( ( -1.0 ) * r20 * x2605 * x2613 ) ) + ( ( r21 * x2601 * x2607 ) ) + ( ( r22 * x2615 ) ) + ( ( cj7 * sj8 ) ) + ( ( r21 * x2611 ) ) );
                                                                                                                                            evalcond[4] = ( ( ( r20 * x2607 ) ) + ( ( ( -1.0 ) * r22 * x2617 ) ) + ( ( r20 * x2601 * x2611 ) ) + ( ( r21 * x2605 ) ) + ( ( ( -1.0 ) * cj8 * x2602 ) ) + ( ( ( -1.0 ) * r21 * x2604 * x2613 ) ) + x2606 );
                                                                                                                                            evalcond[5] = ( ( ( r01 * x2611 ) ) + ( ( ( -1.0 ) * r00 * x2605 * x2613 ) ) + ( ( ( -1.0 ) * x2602 * x2610 ) ) + ( ( r02 * x2615 ) ) + ( ( sj7 * x2603 ) ) + ( ( r00 * x2604 ) ) + ( ( x2607 * x2612 ) ) );
                                                                                                                                            evalcond[6] = ( ( ( sj9 * x2606 ) ) + ( ( ( -1.0 ) * r10 * x2605 * x2613 ) ) + ( ( r11 * x2601 * x2607 ) ) + ( ( r10 * x2604 ) ) + ( ( r11 * x2611 ) ) + ( ( ( -1.0 ) * x2602 * x2608 ) ) + ( ( r12 * x2615 ) ) );
                                                                                                                                            evalcond[7] = ( ( ( ( -1.0 ) * x2609 * x2610 ) ) + ( ( r00 * x2601 * x2611 ) ) + ( ( ( -1.0 ) * x2602 * x2603 ) ) + ( ( ( -1.0 ) * r02 * x2617 ) ) + ( ( r01 * x2605 ) ) + ( ( r00 * x2607 ) ) + ( ( ( -1.0 ) * x2604 * x2612 ) ) );
                                                                                                                                            evalcond[8] = ( ( ( ( -1.0 ) * x2608 * x2609 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2602 ) ) + ( ( ( -1.0 ) * r12 * x2617 ) ) + ( ( r10 * x2607 ) ) + ( ( r10 * x2601 * x2611 ) ) + ( ( ( -1.0 ) * r11 * x2604 * x2613 ) ) + ( ( r11 * x2605 ) ) );
                                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                        {
                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                                        }
                                                                                                                                    }
                                                                                                                                }

                                                                                                                            }

                                                                                                                        }

                                                                                                                    }
                                                                                                                } while ( 0 );
                                                                                                                if ( bgotonextstatement )
                                                                                                                {
                                                                                                                    bool bgotonextstatement = true;
                                                                                                                    do
                                                                                                                    {
                                                                                                                        IkReal x2618 = ( ( -1.0 ) * r01 );
                                                                                                                        IkReal x2620 = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r02 * r02 ) ) ) );
                                                                                                                        if ( IKabs ( x2620 ) == 0 ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        IkReal x2619 = pow ( x2620, -0.5 );
                                                                                                                        CheckValue<IkReal> x2621 = IKatan2WithCheck ( IkReal ( x2618 ), IkReal ( ( ( -1.0 ) * r00 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x2621.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        IkReal gconst15 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * ( x2621.value ) ) ) );
                                                                                                                        IkReal gconst16 = ( x2618 * x2619 );
                                                                                                                        IkReal gconst17 = ( ( 1.0 ) * r00 * x2619 );
                                                                                                                        CheckValue<IkReal> x2622 = IKatan2WithCheck ( IkReal ( ( ( -1.0 ) * r01 ) ), IkReal ( ( ( -1.0 ) * r00 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                        if ( !x2622.valid ) {
                                                                                                                            continue;
                                                                                                                        }
                                                                                                                        evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( -3.14159265358979 ) + j12 + ( x2622.value ) ) ) ) ), 6.28318530717959 ) ) );
                                                                                                                        if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                                        {
                                                                                                                            bgotonextstatement = false;
                                                                                                                            {
                                                                                                                                IkReal j11eval[5];
                                                                                                                                IkReal x2623 = ( ( -1.0 ) * r01 );
                                                                                                                                CheckValue<IkReal> x2626 = IKatan2WithCheck ( IkReal ( x2623 ), IkReal ( ( ( -1.0 ) * r00 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                if ( !x2626.valid ) {
                                                                                                                                    continue;
                                                                                                                                }
                                                                                                                                IkReal x2624 = ( ( 1.0 ) * ( x2626.value ) );
                                                                                                                                IkReal x2625 = x2619;
                                                                                                                                sj12 = gconst16;
                                                                                                                                cj12 = gconst17;
                                                                                                                                j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2624 ) ) );
                                                                                                                                IkReal gconst15 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2624 ) ) );
                                                                                                                                IkReal gconst16 = ( x2623 * x2625 );
                                                                                                                                IkReal gconst17 = ( ( 1.0 ) * r00 * x2625 );
                                                                                                                                j11eval[0] = 0;
                                                                                                                                j11eval[1] = 0;
                                                                                                                                j11eval[2] = cj9;
                                                                                                                                j11eval[3] = r22;
                                                                                                                                j11eval[4] = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r02 * r02 ) ) ) );
                                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  || IKabs ( j11eval[3] ) < 0.0000010000000000  || IKabs ( j11eval[4] ) < 0.0000010000000000  )
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j11eval[3];
                                                                                                                                        IkReal x2627 = ( ( -1.0 ) * r01 );
                                                                                                                                        CheckValue<IkReal> x2630 = IKatan2WithCheck ( IkReal ( x2627 ), IkReal ( ( ( -1.0 ) * r00 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                        if ( !x2630.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        IkReal x2628 = ( ( 1.0 ) * ( x2630.value ) );
                                                                                                                                        IkReal x2629 = x2619;
                                                                                                                                        sj12 = gconst16;
                                                                                                                                        cj12 = gconst17;
                                                                                                                                        j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2628 ) ) );
                                                                                                                                        IkReal gconst15 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2628 ) ) );
                                                                                                                                        IkReal gconst16 = ( x2627 * x2629 );
                                                                                                                                        IkReal gconst17 = ( ( 1.0 ) * r00 * x2629 );
                                                                                                                                        j11eval[0] = r22;
                                                                                                                                        j11eval[1] = sj9;
                                                                                                                                        j11eval[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * ( r02 * r02 ) ) ) );
                                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j11eval[1];
                                                                                                                                                IkReal x2631 = ( ( -1.0 ) * r01 );
                                                                                                                                                CheckValue<IkReal> x2634 = IKatan2WithCheck ( IkReal ( x2631 ), IkReal ( ( ( -1.0 ) * r00 ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                if ( !x2634.valid ) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                IkReal x2632 = ( ( 1.0 ) * ( x2634.value ) );
                                                                                                                                                IkReal x2633 = x2619;
                                                                                                                                                sj12 = gconst16;
                                                                                                                                                cj12 = gconst17;
                                                                                                                                                j12 = ( ( 3.14159265 ) + ( ( ( -1.0 ) * x2632 ) ) );
                                                                                                                                                IkReal gconst15 = ( ( 3.14159265358979 ) + ( ( ( -1.0 ) * x2632 ) ) );
                                                                                                                                                IkReal gconst16 = ( x2631 * x2633 );
                                                                                                                                                IkReal gconst17 = ( ( 1.0 ) * r00 * x2633 );
                                                                                                                                                IkReal x2635 = r02 * r02;
                                                                                                                                                IkReal x2636 = ( ( 1.0 ) * cj9 );
                                                                                                                                                IkReal x2637 = ( r12 * sj9 );
                                                                                                                                                IkReal x2638 = x2619;
                                                                                                                                                j11eval[0] = ( ( IKabs ( ( ( ( ( -1.0 ) * r02 * x2636 ) ) + ( ( ( -1.0 ) * x2637 ) ) ) ) ) + ( IKabs ( ( ( ( r02 * x2637 * x2638 ) ) + ( ( ( -1.0 ) * x2636 * x2638 ) ) + ( ( cj9 * x2635 * x2638 ) ) ) ) ) );
                                                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  )
                                                                                                                                                {
                                                                                                                                                    continue; // 1 cases reached

                                                                                                                                                } else
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                        bool j11valid[1] = {false};
                                                                                                                                                        _nj11 = 1;
                                                                                                                                                        IkReal x2639 = ( ( 1.0 ) * gconst16 );
                                                                                                                                                        CheckValue<IkReal> x2640 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst17 * r21 ) ) + ( ( ( -1.0 ) * r20 * x2639 ) ) ) ), -1 );
                                                                                                                                                        if ( !x2640.valid ) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        CheckValue<IkReal> x2641 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r01 * x2639 ) ) + ( ( gconst17 * r10 * sj9 ) ) + ( ( cj9 * gconst17 * r00 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x2639 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                        if ( !x2641.valid ) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x2640.value ) ) ) + ( x2641.value ) );
                                                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                                                        {
                                                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j11valid[0] = true;
                                                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                        {
                                                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij11[0] = ij11;
                                                                                                                                                            _ij11[1] = -1;
                                                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                            {
                                                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                                {
                                                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j11 = j11array[ij11];
                                                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[9];
                                                                                                                                                                IkReal x2642 = IKsin ( j11 );
                                                                                                                                                                IkReal x2643 = IKcos ( j11 );
                                                                                                                                                                IkReal x2644 = ( ( 1.0 ) * cj7 );
                                                                                                                                                                IkReal x2645 = ( cj9 * sj8 );
                                                                                                                                                                IkReal x2646 = ( gconst16 * sj10 );
                                                                                                                                                                IkReal x2647 = ( cj8 * sj9 );
                                                                                                                                                                IkReal x2648 = ( gconst17 * r21 );
                                                                                                                                                                IkReal x2649 = ( cj10 * gconst16 );
                                                                                                                                                                IkReal x2650 = ( sj7 * sj8 );
                                                                                                                                                                IkReal x2651 = ( gconst17 * r01 );
                                                                                                                                                                IkReal x2652 = ( ( 1.0 ) * sj7 );
                                                                                                                                                                IkReal x2653 = ( gconst17 * r20 );
                                                                                                                                                                IkReal x2654 = ( gconst17 * r00 );
                                                                                                                                                                IkReal x2655 = ( gconst17 * r11 );
                                                                                                                                                                IkReal x2656 = ( gconst17 * r10 );
                                                                                                                                                                IkReal x2657 = ( cj8 * cj9 );
                                                                                                                                                                IkReal x2658 = ( ( 1.0 ) * x2643 );
                                                                                                                                                                IkReal x2659 = ( gconst16 * x2642 );
                                                                                                                                                                IkReal x2660 = ( ( 1.0 ) * x2642 );
                                                                                                                                                                IkReal x2661 = ( cj10 * x2642 );
                                                                                                                                                                IkReal x2662 = ( sj10 * x2643 );
                                                                                                                                                                IkReal x2663 = ( cj10 * gconst17 * x2658 );
                                                                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2658 ) ) + ( ( ( -1.0 ) * x2653 * x2660 ) ) + ( ( r21 * x2659 ) ) );
                                                                                                                                                                evalcond[1] = ( ( ( r11 * x2659 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x2658 ) ) + ( ( ( -1.0 ) * x2656 * x2660 ) ) );
                                                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x2658 ) ) + ( ( r01 * x2659 ) ) + ( ( ( -1.0 ) * x2654 * x2660 ) ) );
                                                                                                                                                                evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r22 * x2661 ) ) + ( ( r21 * x2643 * x2649 ) ) + ( ( ( -1.0 ) * cj10 * x2653 * x2658 ) ) + ( ( cj7 * sj8 ) ) + ( ( sj10 * x2648 ) ) + ( ( r20 * x2646 ) ) );
                                                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * r22 * sj10 * x2660 ) ) + ( ( cj10 * x2648 ) ) + ( ( x2653 * x2662 ) ) + ( ( ( -1.0 ) * cj8 * x2644 ) ) + ( ( ( -1.0 ) * r21 * x2646 * x2658 ) ) + x2650 + ( ( r20 * x2649 ) ) );
                                                                                                                                                                evalcond[5] = ( ( ( ( -1.0 ) * x2644 * x2657 ) ) + ( ( r02 * x2661 ) ) + ( ( r00 * x2646 ) ) + ( ( r01 * x2643 * x2649 ) ) + ( ( sj10 * x2651 ) ) + ( ( sj7 * x2645 ) ) + ( ( ( -1.0 ) * cj10 * x2654 * x2658 ) ) );
                                                                                                                                                                evalcond[6] = ( ( ( r11 * x2643 * x2649 ) ) + ( ( ( -1.0 ) * cj10 * x2656 * x2658 ) ) + ( ( r12 * x2661 ) ) + ( ( ( -1.0 ) * x2644 * x2647 ) ) + ( ( r10 * x2646 ) ) + ( ( sj9 * x2650 ) ) + ( ( sj10 * x2655 ) ) );
                                                                                                                                                                evalcond[7] = ( ( ( ( -1.0 ) * x2652 * x2657 ) ) + ( ( ( -1.0 ) * x2644 * x2645 ) ) + ( ( ( -1.0 ) * r01 * x2646 * x2658 ) ) + ( ( x2654 * x2662 ) ) + ( ( cj10 * x2651 ) ) + ( ( r00 * x2649 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2660 ) ) );
                                                                                                                                                                evalcond[8] = ( ( ( ( -1.0 ) * x2647 * x2652 ) ) + ( ( cj10 * x2655 ) ) + ( ( r10 * x2649 ) ) + ( ( x2656 * x2662 ) ) + ( ( ( -1.0 ) * r11 * x2646 * x2658 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2660 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2644 ) ) );
                                                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                }

                                                                                                                                            }

                                                                                                                                        } else
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                                _nj11 = 1;
                                                                                                                                                IkReal x2664 = ( ( 1.0 ) * gconst17 );
                                                                                                                                                CheckValue<IkReal> x2665 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( ( -1.0 ) * r20 * sj9 * x2664 ) ) + ( ( gconst16 * r21 * sj9 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                if ( !x2665.valid ) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                CheckValue<IkReal> x2666 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x2664 ) ) + ( ( ( -1.0 ) * gconst16 * r10 ) ) ) ), -1 );
                                                                                                                                                if ( !x2666.valid ) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x2665.value ) + ( ( ( 1.5707963267949 ) * ( x2666.value ) ) ) );
                                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                                {
                                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j11valid[0] = true;
                                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                {
                                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                                    _ij11[1] = -1;
                                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                    {
                                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                        {
                                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[9];
                                                                                                                                                        IkReal x2667 = IKsin ( j11 );
                                                                                                                                                        IkReal x2668 = IKcos ( j11 );
                                                                                                                                                        IkReal x2669 = ( ( 1.0 ) * cj7 );
                                                                                                                                                        IkReal x2670 = ( cj9 * sj8 );
                                                                                                                                                        IkReal x2671 = ( gconst16 * sj10 );
                                                                                                                                                        IkReal x2672 = ( cj8 * sj9 );
                                                                                                                                                        IkReal x2673 = ( gconst17 * r21 );
                                                                                                                                                        IkReal x2674 = ( cj10 * gconst16 );
                                                                                                                                                        IkReal x2675 = ( sj7 * sj8 );
                                                                                                                                                        IkReal x2676 = ( gconst17 * r01 );
                                                                                                                                                        IkReal x2677 = ( ( 1.0 ) * sj7 );
                                                                                                                                                        IkReal x2678 = ( gconst17 * r20 );
                                                                                                                                                        IkReal x2679 = ( gconst17 * r00 );
                                                                                                                                                        IkReal x2680 = ( gconst17 * r11 );
                                                                                                                                                        IkReal x2681 = ( gconst17 * r10 );
                                                                                                                                                        IkReal x2682 = ( cj8 * cj9 );
                                                                                                                                                        IkReal x2683 = ( ( 1.0 ) * x2668 );
                                                                                                                                                        IkReal x2684 = ( gconst16 * x2667 );
                                                                                                                                                        IkReal x2685 = ( ( 1.0 ) * x2667 );
                                                                                                                                                        IkReal x2686 = ( cj10 * x2667 );
                                                                                                                                                        IkReal x2687 = ( sj10 * x2668 );
                                                                                                                                                        IkReal x2688 = ( cj10 * gconst17 * x2683 );
                                                                                                                                                        evalcond[0] = ( ( ( r21 * x2684 ) ) + ( ( ( -1.0 ) * r22 * x2683 ) ) + ( ( ( -1.0 ) * x2678 * x2685 ) ) );
                                                                                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * r12 * x2683 ) ) + ( ( r11 * x2684 ) ) + cj9 + ( ( ( -1.0 ) * x2681 * x2685 ) ) );
                                                                                                                                                        evalcond[2] = ( ( ( ( -1.0 ) * r02 * x2683 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( r01 * x2684 ) ) + ( ( ( -1.0 ) * x2679 * x2685 ) ) );
                                                                                                                                                        evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r22 * x2686 ) ) + ( ( r21 * x2668 * x2674 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * cj10 * x2678 * x2683 ) ) + ( ( r20 * x2671 ) ) + ( ( sj10 * x2673 ) ) );
                                                                                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * r22 * sj10 * x2685 ) ) + ( ( ( -1.0 ) * cj8 * x2669 ) ) + ( ( cj10 * x2673 ) ) + ( ( x2678 * x2687 ) ) + ( ( r20 * x2674 ) ) + ( ( ( -1.0 ) * r21 * x2671 * x2683 ) ) + x2675 );
                                                                                                                                                        evalcond[5] = ( ( ( r02 * x2686 ) ) + ( ( r01 * x2668 * x2674 ) ) + ( ( ( -1.0 ) * x2669 * x2682 ) ) + ( ( r00 * x2671 ) ) + ( ( sj7 * x2670 ) ) + ( ( sj10 * x2676 ) ) + ( ( ( -1.0 ) * cj10 * x2679 * x2683 ) ) );
                                                                                                                                                        evalcond[6] = ( ( ( ( -1.0 ) * cj10 * x2681 * x2683 ) ) + ( ( r11 * x2668 * x2674 ) ) + ( ( r10 * x2671 ) ) + ( ( sj9 * x2675 ) ) + ( ( sj10 * x2680 ) ) + ( ( ( -1.0 ) * x2669 * x2672 ) ) + ( ( r12 * x2686 ) ) );
                                                                                                                                                        evalcond[7] = ( ( ( ( -1.0 ) * r01 * x2671 * x2683 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2685 ) ) + ( ( cj10 * x2676 ) ) + ( ( r00 * x2674 ) ) + ( ( x2679 * x2687 ) ) + ( ( ( -1.0 ) * x2669 * x2670 ) ) + ( ( ( -1.0 ) * x2677 * x2682 ) ) );
                                                                                                                                                        evalcond[8] = ( ( ( ( -1.0 ) * sj8 * sj9 * x2669 ) ) + ( ( cj10 * x2680 ) ) + ( ( ( -1.0 ) * r11 * x2671 * x2683 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2685 ) ) + ( ( r10 * x2674 ) ) + ( ( ( -1.0 ) * x2672 * x2677 ) ) + ( ( x2681 * x2687 ) ) );
                                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                        }

                                                                                                                                    }

                                                                                                                                } else
                                                                                                                                {
                                                                                                                                    {
                                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                        bool j11valid[1] = {false};
                                                                                                                                        _nj11 = 1;
                                                                                                                                        IkReal x2689 = ( ( 1.0 ) * gconst17 );
                                                                                                                                        CheckValue<IkReal> x2690 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x2689 ) ) + ( ( cj9 * gconst16 * r21 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                        if ( !x2690.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        CheckValue<IkReal> x2691 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * gconst16 * r00 ) ) + ( ( ( -1.0 ) * r01 * x2689 ) ) ) ), -1 );
                                                                                                                                        if ( !x2691.valid ) {
                                                                                                                                            continue;
                                                                                                                                        }
                                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x2690.value ) + ( ( ( 1.5707963267949 ) * ( x2691.value ) ) ) );
                                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                                        {
                                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                                        }
                                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                                        }
                                                                                                                                        j11valid[0] = true;
                                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                        {
                                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                                            {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            _ij11[0] = ij11;
                                                                                                                                            _ij11[1] = -1;
                                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                            {
                                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                {
                                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                                    break;
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                            j11 = j11array[ij11];
                                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                                            {
                                                                                                                                                IkReal evalcond[9];
                                                                                                                                                IkReal x2692 = IKsin ( j11 );
                                                                                                                                                IkReal x2693 = IKcos ( j11 );
                                                                                                                                                IkReal x2694 = ( ( 1.0 ) * cj7 );
                                                                                                                                                IkReal x2695 = ( cj9 * sj8 );
                                                                                                                                                IkReal x2696 = ( gconst16 * sj10 );
                                                                                                                                                IkReal x2697 = ( cj8 * sj9 );
                                                                                                                                                IkReal x2698 = ( gconst17 * r21 );
                                                                                                                                                IkReal x2699 = ( cj10 * gconst16 );
                                                                                                                                                IkReal x2700 = ( sj7 * sj8 );
                                                                                                                                                IkReal x2701 = ( gconst17 * r01 );
                                                                                                                                                IkReal x2702 = ( ( 1.0 ) * sj7 );
                                                                                                                                                IkReal x2703 = ( gconst17 * r20 );
                                                                                                                                                IkReal x2704 = ( gconst17 * r00 );
                                                                                                                                                IkReal x2705 = ( gconst17 * r11 );
                                                                                                                                                IkReal x2706 = ( gconst17 * r10 );
                                                                                                                                                IkReal x2707 = ( cj8 * cj9 );
                                                                                                                                                IkReal x2708 = ( ( 1.0 ) * x2693 );
                                                                                                                                                IkReal x2709 = ( gconst16 * x2692 );
                                                                                                                                                IkReal x2710 = ( ( 1.0 ) * x2692 );
                                                                                                                                                IkReal x2711 = ( cj10 * x2692 );
                                                                                                                                                IkReal x2712 = ( sj10 * x2693 );
                                                                                                                                                IkReal x2713 = ( cj10 * gconst17 * x2708 );
                                                                                                                                                evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2708 ) ) + ( ( ( -1.0 ) * x2703 * x2710 ) ) + ( ( r21 * x2709 ) ) );
                                                                                                                                                evalcond[1] = ( ( ( r11 * x2709 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x2708 ) ) + ( ( ( -1.0 ) * x2706 * x2710 ) ) );
                                                                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * x2704 * x2710 ) ) + ( ( r01 * x2709 ) ) + ( ( ( -1.0 ) * r02 * x2708 ) ) );
                                                                                                                                                evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * cj10 * x2703 * x2708 ) ) + ( ( r22 * x2711 ) ) + ( ( r21 * x2693 * x2699 ) ) + ( ( sj10 * x2698 ) ) + ( ( cj7 * sj8 ) ) + ( ( r20 * x2696 ) ) );
                                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * cj8 * x2694 ) ) + x2700 + ( ( ( -1.0 ) * r22 * sj10 * x2710 ) ) + ( ( cj10 * x2698 ) ) + ( ( x2703 * x2712 ) ) + ( ( ( -1.0 ) * r21 * x2696 * x2708 ) ) + ( ( r20 * x2699 ) ) );
                                                                                                                                                evalcond[5] = ( ( ( sj7 * x2695 ) ) + ( ( r02 * x2711 ) ) + ( ( sj10 * x2701 ) ) + ( ( ( -1.0 ) * cj10 * x2704 * x2708 ) ) + ( ( r00 * x2696 ) ) + ( ( ( -1.0 ) * x2694 * x2707 ) ) + ( ( r01 * x2693 * x2699 ) ) );
                                                                                                                                                evalcond[6] = ( ( ( r12 * x2711 ) ) + ( ( r10 * x2696 ) ) + ( ( sj10 * x2705 ) ) + ( ( sj9 * x2700 ) ) + ( ( r11 * x2693 * x2699 ) ) + ( ( ( -1.0 ) * x2694 * x2697 ) ) + ( ( ( -1.0 ) * cj10 * x2706 * x2708 ) ) );
                                                                                                                                                evalcond[7] = ( ( ( ( -1.0 ) * x2702 * x2707 ) ) + ( ( ( -1.0 ) * r01 * x2696 * x2708 ) ) + ( ( cj10 * x2701 ) ) + ( ( r00 * x2699 ) ) + ( ( x2704 * x2712 ) ) + ( ( ( -1.0 ) * x2694 * x2695 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2710 ) ) );
                                                                                                                                                evalcond[8] = ( ( ( ( -1.0 ) * x2697 * x2702 ) ) + ( ( r10 * x2699 ) ) + ( ( x2706 * x2712 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2694 ) ) + ( ( ( -1.0 ) * r11 * x2696 * x2708 ) ) + ( ( cj10 * x2705 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2710 ) ) );
                                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                            {
                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                                            }
                                                                                                                                        }
                                                                                                                                    }

                                                                                                                                }

                                                                                                                            }

                                                                                                                        }
                                                                                                                    } while ( 0 );
                                                                                                                    if ( bgotonextstatement )
                                                                                                                    {
                                                                                                                        bool bgotonextstatement = true;
                                                                                                                        do
                                                                                                                        {
                                                                                                                            evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( -1.5707963267949 ) + j9 ) ) ) ), 6.28318530717959 ) ) );
                                                                                                                            if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                                            {
                                                                                                                                bgotonextstatement = false;
                                                                                                                                {
                                                                                                                                    IkReal j11eval[3];
                                                                                                                                    sj9 = 1.0;
                                                                                                                                    cj9 = 0;
                                                                                                                                    j9 = 1.5707963267949;
                                                                                                                                    IkReal x2714 = ( ( ( r20 * sj12 ) ) + ( ( cj12 * r21 ) ) );
                                                                                                                                    j11eval[0] = x2714;
                                                                                                                                    j11eval[1] = IKsign ( x2714 );
                                                                                                                                    j11eval[2] = ( ( IKabs ( r12 ) ) + ( IKabs ( ( ( ( r11 * sj12 ) ) + ( ( ( -1.0 ) * cj12 * r10 ) ) ) ) ) );
                                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            IkReal j11eval[3];
                                                                                                                                            sj9 = 1.0;
                                                                                                                                            cj9 = 0;
                                                                                                                                            j9 = 1.5707963267949;
                                                                                                                                            IkReal x2715 = ( ( 1.0 ) * cj12 );
                                                                                                                                            IkReal x2716 = ( ( ( ( -1.0 ) * r10 * sj12 ) ) + ( ( ( -1.0 ) * r11 * x2715 ) ) );
                                                                                                                                            j11eval[0] = x2716;
                                                                                                                                            j11eval[1] = IKsign ( x2716 );
                                                                                                                                            j11eval[2] = ( ( IKabs ( r22 ) ) + ( IKabs ( ( ( ( ( -1.0 ) * r20 * x2715 ) ) + ( ( r21 * sj12 ) ) ) ) ) );
                                                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j11eval[2];
                                                                                                                                                    sj9 = 1.0;
                                                                                                                                                    cj9 = 0;
                                                                                                                                                    j9 = 1.5707963267949;
                                                                                                                                                    IkReal x2717 = cj12 * cj12;
                                                                                                                                                    IkReal x2718 = ( ( 1.0 ) * cj10 );
                                                                                                                                                    IkReal x2719 = ( cj10 * r01 * r21 );
                                                                                                                                                    IkReal x2720 = ( cj10 * cj12 * sj12 );
                                                                                                                                                    IkReal x2721 = ( ( ( ( -1.0 ) * r00 * r20 * x2717 * x2718 ) ) + ( ( r00 * r21 * x2720 ) ) + ( ( r01 * r20 * x2720 ) ) + ( ( ( -1.0 ) * r01 * r21 * x2718 ) ) + ( ( x2717 * x2719 ) ) + ( ( ( -1.0 ) * r02 * r22 * x2718 ) ) );
                                                                                                                                                    j11eval[0] = x2721;
                                                                                                                                                    j11eval[1] = IKsign ( x2721 );
                                                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                                    {
                                                                                                                                                        continue; // 1 cases reached

                                                                                                                                                    } else
                                                                                                                                                    {
                                                                                                                                                        {
                                                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                            bool j11valid[1] = {false};
                                                                                                                                                            _nj11 = 1;
                                                                                                                                                            IkReal x2722 = cj12 * cj12;
                                                                                                                                                            IkReal x2723 = ( r00 * sj10 );
                                                                                                                                                            IkReal x2724 = ( cj12 * sj12 );
                                                                                                                                                            IkReal x2725 = ( ( 1.0 ) * r20 );
                                                                                                                                                            IkReal x2726 = ( r01 * sj10 );
                                                                                                                                                            IkReal x2727 = ( cj10 * r00 );
                                                                                                                                                            IkReal x2728 = ( cj10 * r01 * r21 );
                                                                                                                                                            CheckValue<IkReal> x2729 = IKatan2WithCheck ( IkReal ( ( ( ( cj12 * r22 * x2726 ) ) + ( ( r22 * sj12 * x2723 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * x2722 * x2725 * x2726 ) ) + ( ( r21 * x2724 * x2726 ) ) + ( ( ( -1.0 ) * r21 * x2722 * x2723 ) ) + ( ( r21 * x2723 ) ) + ( ( ( -1.0 ) * x2723 * x2724 * x2725 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                            if ( !x2729.valid ) {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            CheckValue<IkReal> x2730 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * x2722 * x2725 * x2727 ) ) + ( ( ( -1.0 ) * cj10 * r02 * r22 ) ) + ( ( ( -1.0 ) * x2728 ) ) + ( ( r21 * x2724 * x2727 ) ) + ( ( x2722 * x2728 ) ) + ( ( cj10 * r01 * r20 * x2724 ) ) ) ), -1 );
                                                                                                                                                            if ( !x2730.valid ) {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x2729.value ) + ( ( ( 1.5707963267949 ) * ( x2730.value ) ) ) );
                                                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                                                            {
                                                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                                                            }
                                                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                                                            }
                                                                                                                                                            j11valid[0] = true;
                                                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                            {
                                                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                _ij11[0] = ij11;
                                                                                                                                                                _ij11[1] = -1;
                                                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                                {
                                                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                                    {
                                                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                j11 = j11array[ij11];
                                                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                                                {
                                                                                                                                                                    IkReal evalcond[9];
                                                                                                                                                                    IkReal x2731 = IKsin ( j11 );
                                                                                                                                                                    IkReal x2732 = IKcos ( j11 );
                                                                                                                                                                    IkReal x2733 = ( sj7 * sj8 );
                                                                                                                                                                    IkReal x2734 = ( cj10 * cj12 );
                                                                                                                                                                    IkReal x2735 = ( cj10 * sj12 );
                                                                                                                                                                    IkReal x2736 = ( r01 * sj12 );
                                                                                                                                                                    IkReal x2737 = ( cj12 * sj10 );
                                                                                                                                                                    IkReal x2738 = ( cj12 * r10 );
                                                                                                                                                                    IkReal x2739 = ( cj7 * sj8 );
                                                                                                                                                                    IkReal x2740 = ( sj10 * sj12 );
                                                                                                                                                                    IkReal x2741 = ( ( 1.0 ) * cj8 );
                                                                                                                                                                    IkReal x2742 = ( cj12 * r00 );
                                                                                                                                                                    IkReal x2743 = ( cj7 * x2741 );
                                                                                                                                                                    IkReal x2744 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                                    IkReal x2745 = ( cj10 * x2732 );
                                                                                                                                                                    IkReal x2746 = ( ( 1.0 ) * x2731 );
                                                                                                                                                                    IkReal x2747 = ( ( 1.0 ) * x2732 );
                                                                                                                                                                    IkReal x2748 = ( sj12 * x2731 );
                                                                                                                                                                    IkReal x2749 = ( cj10 * x2731 );
                                                                                                                                                                    evalcond[0] = ( ( ( r21 * x2748 ) ) + ( ( ( -1.0 ) * x2731 * x2744 ) ) + ( ( ( -1.0 ) * r22 * x2747 ) ) );
                                                                                                                                                                    evalcond[1] = ( ( ( r11 * x2748 ) ) + ( ( ( -1.0 ) * x2738 * x2746 ) ) + ( ( ( -1.0 ) * r12 * x2747 ) ) );
                                                                                                                                                                    evalcond[2] = ( ( -1.0 ) + ( ( x2731 * x2736 ) ) + ( ( ( -1.0 ) * r02 * x2747 ) ) + ( ( ( -1.0 ) * x2742 * x2746 ) ) );
                                                                                                                                                                    evalcond[3] = ( ( ( r01 * x2737 ) ) + ( ( r00 * x2740 ) ) + ( ( ( -1.0 ) * r00 * x2734 * x2747 ) ) + ( ( r02 * x2749 ) ) + ( ( r01 * x2732 * x2735 ) ) );
                                                                                                                                                                    evalcond[4] = ( ( ( r00 * x2732 * x2737 ) ) + ( ( r01 * x2734 ) ) + ( ( r00 * x2735 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2746 ) ) + ( ( ( -1.0 ) * sj10 * x2736 * x2747 ) ) );
                                                                                                                                                                    evalcond[5] = ( x2739 + ( ( r22 * x2749 ) ) + ( ( cj8 * sj7 ) ) + ( ( r21 * x2737 ) ) + ( ( r20 * x2740 ) ) + ( ( r21 * x2732 * x2735 ) ) + ( ( ( -1.0 ) * r20 * x2734 * x2747 ) ) );
                                                                                                                                                                    evalcond[6] = ( x2733 + ( ( r12 * x2749 ) ) + ( ( ( -1.0 ) * r10 * x2734 * x2747 ) ) + ( ( r11 * x2732 * x2735 ) ) + ( ( r10 * x2740 ) ) + ( ( ( -1.0 ) * x2743 ) ) + ( ( r11 * x2737 ) ) );
                                                                                                                                                                    evalcond[7] = ( x2733 + ( ( r20 * x2732 * x2737 ) ) + ( ( r21 * x2734 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2746 ) ) + ( ( ( -1.0 ) * r21 * x2740 * x2747 ) ) + ( ( r20 * x2735 ) ) + ( ( ( -1.0 ) * x2743 ) ) );
                                                                                                                                                                    evalcond[8] = ( ( ( ( -1.0 ) * r11 * x2740 * x2747 ) ) + ( ( ( -1.0 ) * x2739 ) ) + ( ( ( -1.0 ) * sj7 * x2741 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2746 ) ) + ( ( r10 * x2735 ) ) + ( ( r10 * x2732 * x2737 ) ) + ( ( r11 * x2734 ) ) );
                                                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                                {
                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                    }

                                                                                                                                                }

                                                                                                                                            } else
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                    bool j11valid[1] = {false};
                                                                                                                                                    _nj11 = 1;
                                                                                                                                                    IkReal x2750 = ( ( 1.0 ) * cj12 );
                                                                                                                                                    CheckValue<IkReal> x2751 = IKatan2WithCheck ( IkReal ( r22 ), IkReal ( ( ( ( r21 * sj12 ) ) + ( ( ( -1.0 ) * r20 * x2750 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                    if ( !x2751.valid ) {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    CheckValue<IkReal> x2752 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x2750 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                                                                                    if ( !x2752.valid ) {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    j11array[0] = ( ( -1.5707963267949 ) + ( x2751.value ) + ( ( ( 1.5707963267949 ) * ( x2752.value ) ) ) );
                                                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                                                    {
                                                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j11valid[0] = true;
                                                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                    {
                                                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij11[0] = ij11;
                                                                                                                                                        _ij11[1] = -1;
                                                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                        {
                                                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                            {
                                                                                                                                                                j11valid[iij11] = false;
                                                                                                                                                                _ij11[1] = iij11;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j11 = j11array[ij11];
                                                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[9];
                                                                                                                                                            IkReal x2753 = IKsin ( j11 );
                                                                                                                                                            IkReal x2754 = IKcos ( j11 );
                                                                                                                                                            IkReal x2755 = ( sj7 * sj8 );
                                                                                                                                                            IkReal x2756 = ( cj10 * cj12 );
                                                                                                                                                            IkReal x2757 = ( cj10 * sj12 );
                                                                                                                                                            IkReal x2758 = ( r01 * sj12 );
                                                                                                                                                            IkReal x2759 = ( cj12 * sj10 );
                                                                                                                                                            IkReal x2760 = ( cj12 * r10 );
                                                                                                                                                            IkReal x2761 = ( cj7 * sj8 );
                                                                                                                                                            IkReal x2762 = ( sj10 * sj12 );
                                                                                                                                                            IkReal x2763 = ( ( 1.0 ) * cj8 );
                                                                                                                                                            IkReal x2764 = ( cj12 * r00 );
                                                                                                                                                            IkReal x2765 = ( cj7 * x2763 );
                                                                                                                                                            IkReal x2766 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                            IkReal x2767 = ( cj10 * x2754 );
                                                                                                                                                            IkReal x2768 = ( ( 1.0 ) * x2753 );
                                                                                                                                                            IkReal x2769 = ( ( 1.0 ) * x2754 );
                                                                                                                                                            IkReal x2770 = ( sj12 * x2753 );
                                                                                                                                                            IkReal x2771 = ( cj10 * x2753 );
                                                                                                                                                            evalcond[0] = ( ( ( r21 * x2770 ) ) + ( ( ( -1.0 ) * x2753 * x2766 ) ) + ( ( ( -1.0 ) * r22 * x2769 ) ) );
                                                                                                                                                            evalcond[1] = ( ( ( r11 * x2770 ) ) + ( ( ( -1.0 ) * r12 * x2769 ) ) + ( ( ( -1.0 ) * x2760 * x2768 ) ) );
                                                                                                                                                            evalcond[2] = ( ( -1.0 ) + ( ( ( -1.0 ) * x2764 * x2768 ) ) + ( ( x2753 * x2758 ) ) + ( ( ( -1.0 ) * r02 * x2769 ) ) );
                                                                                                                                                            evalcond[3] = ( ( ( r01 * x2754 * x2757 ) ) + ( ( r00 * x2762 ) ) + ( ( r01 * x2759 ) ) + ( ( r02 * x2771 ) ) + ( ( ( -1.0 ) * r00 * x2756 * x2769 ) ) );
                                                                                                                                                            evalcond[4] = ( ( ( ( -1.0 ) * r02 * sj10 * x2768 ) ) + ( ( ( -1.0 ) * sj10 * x2758 * x2769 ) ) + ( ( r00 * x2754 * x2759 ) ) + ( ( r00 * x2757 ) ) + ( ( r01 * x2756 ) ) );
                                                                                                                                                            evalcond[5] = ( ( ( r21 * x2754 * x2757 ) ) + x2761 + ( ( r22 * x2771 ) ) + ( ( r21 * x2759 ) ) + ( ( cj8 * sj7 ) ) + ( ( r20 * x2762 ) ) + ( ( ( -1.0 ) * r20 * x2756 * x2769 ) ) );
                                                                                                                                                            evalcond[6] = ( x2755 + ( ( r11 * x2759 ) ) + ( ( ( -1.0 ) * x2765 ) ) + ( ( r10 * x2762 ) ) + ( ( ( -1.0 ) * r10 * x2756 * x2769 ) ) + ( ( r11 * x2754 * x2757 ) ) + ( ( r12 * x2771 ) ) );
                                                                                                                                                            evalcond[7] = ( x2755 + ( ( r21 * x2756 ) ) + ( ( ( -1.0 ) * x2765 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2768 ) ) + ( ( ( -1.0 ) * r21 * x2762 * x2769 ) ) + ( ( r20 * x2757 ) ) + ( ( r20 * x2754 * x2759 ) ) );
                                                                                                                                                            evalcond[8] = ( ( ( r11 * x2756 ) ) + ( ( ( -1.0 ) * x2761 ) ) + ( ( r10 * x2754 * x2759 ) ) + ( ( r10 * x2757 ) ) + ( ( ( -1.0 ) * sj7 * x2763 ) ) + ( ( ( -1.0 ) * r11 * x2762 * x2769 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2768 ) ) );
                                                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                            }

                                                                                                                                        }

                                                                                                                                    } else
                                                                                                                                    {
                                                                                                                                        {
                                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                            bool j11valid[1] = {false};
                                                                                                                                            _nj11 = 1;
                                                                                                                                            CheckValue<IkReal> x2772 = IKatan2WithCheck ( IkReal ( r12 ), IkReal ( ( ( ( r11 * sj12 ) ) + ( ( ( -1.0 ) * cj12 * r10 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                            if ( !x2772.valid ) {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            CheckValue<IkReal> x2773 = IKPowWithIntegerCheck ( IKsign ( ( ( ( r20 * sj12 ) ) + ( ( cj12 * r21 ) ) ) ), -1 );
                                                                                                                                            if ( !x2773.valid ) {
                                                                                                                                                continue;
                                                                                                                                            }
                                                                                                                                            j11array[0] = ( ( -1.5707963267949 ) + ( x2772.value ) + ( ( ( 1.5707963267949 ) * ( x2773.value ) ) ) );
                                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                                            {
                                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                                            }
                                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                                            }
                                                                                                                                            j11valid[0] = true;
                                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                            {
                                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                                {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                _ij11[0] = ij11;
                                                                                                                                                _ij11[1] = -1;
                                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                {
                                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                    {
                                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                                        break;
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                                j11 = j11array[ij11];
                                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                                {
                                                                                                                                                    IkReal evalcond[9];
                                                                                                                                                    IkReal x2774 = IKsin ( j11 );
                                                                                                                                                    IkReal x2775 = IKcos ( j11 );
                                                                                                                                                    IkReal x2776 = ( sj7 * sj8 );
                                                                                                                                                    IkReal x2777 = ( cj10 * cj12 );
                                                                                                                                                    IkReal x2778 = ( cj10 * sj12 );
                                                                                                                                                    IkReal x2779 = ( r01 * sj12 );
                                                                                                                                                    IkReal x2780 = ( cj12 * sj10 );
                                                                                                                                                    IkReal x2781 = ( cj12 * r10 );
                                                                                                                                                    IkReal x2782 = ( cj7 * sj8 );
                                                                                                                                                    IkReal x2783 = ( sj10 * sj12 );
                                                                                                                                                    IkReal x2784 = ( ( 1.0 ) * cj8 );
                                                                                                                                                    IkReal x2785 = ( cj12 * r00 );
                                                                                                                                                    IkReal x2786 = ( cj7 * x2784 );
                                                                                                                                                    IkReal x2787 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                    IkReal x2788 = ( cj10 * x2775 );
                                                                                                                                                    IkReal x2789 = ( ( 1.0 ) * x2774 );
                                                                                                                                                    IkReal x2790 = ( ( 1.0 ) * x2775 );
                                                                                                                                                    IkReal x2791 = ( sj12 * x2774 );
                                                                                                                                                    IkReal x2792 = ( cj10 * x2774 );
                                                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * x2774 * x2787 ) ) + ( ( r21 * x2791 ) ) + ( ( ( -1.0 ) * r22 * x2790 ) ) );
                                                                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * x2781 * x2789 ) ) + ( ( r11 * x2791 ) ) + ( ( ( -1.0 ) * r12 * x2790 ) ) );
                                                                                                                                                    evalcond[2] = ( ( -1.0 ) + ( ( x2774 * x2779 ) ) + ( ( ( -1.0 ) * x2785 * x2789 ) ) + ( ( ( -1.0 ) * r02 * x2790 ) ) );
                                                                                                                                                    evalcond[3] = ( ( ( r02 * x2792 ) ) + ( ( r01 * x2780 ) ) + ( ( r00 * x2783 ) ) + ( ( ( -1.0 ) * r00 * x2777 * x2790 ) ) + ( ( r01 * x2775 * x2778 ) ) );
                                                                                                                                                    evalcond[4] = ( ( ( r00 * x2775 * x2780 ) ) + ( ( r01 * x2777 ) ) + ( ( r00 * x2778 ) ) + ( ( ( -1.0 ) * sj10 * x2779 * x2790 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2789 ) ) );
                                                                                                                                                    evalcond[5] = ( x2782 + ( ( r21 * x2780 ) ) + ( ( cj8 * sj7 ) ) + ( ( ( -1.0 ) * r20 * x2777 * x2790 ) ) + ( ( r22 * x2792 ) ) + ( ( r21 * x2775 * x2778 ) ) + ( ( r20 * x2783 ) ) );
                                                                                                                                                    evalcond[6] = ( ( ( ( -1.0 ) * x2786 ) ) + x2776 + ( ( ( -1.0 ) * r10 * x2777 * x2790 ) ) + ( ( r12 * x2792 ) ) + ( ( r11 * x2780 ) ) + ( ( r10 * x2783 ) ) + ( ( r11 * x2775 * x2778 ) ) );
                                                                                                                                                    evalcond[7] = ( ( ( ( -1.0 ) * r22 * sj10 * x2789 ) ) + ( ( ( -1.0 ) * x2786 ) ) + x2776 + ( ( r20 * x2775 * x2780 ) ) + ( ( r20 * x2778 ) ) + ( ( r21 * x2777 ) ) + ( ( ( -1.0 ) * r21 * x2783 * x2790 ) ) );
                                                                                                                                                    evalcond[8] = ( ( ( r10 * x2775 * x2780 ) ) + ( ( r11 * x2777 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2789 ) ) + ( ( r10 * x2778 ) ) + ( ( ( -1.0 ) * x2782 ) ) + ( ( ( -1.0 ) * r11 * x2783 * x2790 ) ) + ( ( ( -1.0 ) * sj7 * x2784 ) ) );
                                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                                {
                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                }
                                                                                                                                            }
                                                                                                                                        }

                                                                                                                                    }

                                                                                                                                }

                                                                                                                            }
                                                                                                                        } while ( 0 );
                                                                                                                        if ( bgotonextstatement )
                                                                                                                        {
                                                                                                                            bool bgotonextstatement = true;
                                                                                                                            do
                                                                                                                            {
                                                                                                                                evalcond[0] = ( ( -3.14159265358979 ) + ( IKfmod ( ( ( 3.14159265358979 ) + ( IKabs ( ( ( 1.5707963267949 ) + j9 ) ) ) ), 6.28318530717959 ) ) );
                                                                                                                                if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                                                {
                                                                                                                                    bgotonextstatement = false;
                                                                                                                                    {
                                                                                                                                        IkReal j11eval[3];
                                                                                                                                        sj9 = -1.0;
                                                                                                                                        cj9 = 0;
                                                                                                                                        j9 = -1.5707963267949;
                                                                                                                                        IkReal x2793 = ( ( ( r10 * sj12 ) ) + ( ( cj12 * r11 ) ) );
                                                                                                                                        j11eval[0] = x2793;
                                                                                                                                        j11eval[1] = ( ( IKabs ( r22 ) ) + ( IKabs ( ( ( ( ( -1.0 ) * cj12 * r20 ) ) + ( ( r21 * sj12 ) ) ) ) ) );
                                                                                                                                        j11eval[2] = IKsign ( x2793 );
                                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j11eval[3];
                                                                                                                                                sj9 = -1.0;
                                                                                                                                                cj9 = 0;
                                                                                                                                                j9 = -1.5707963267949;
                                                                                                                                                IkReal x2794 = ( ( 1.0 ) * cj12 );
                                                                                                                                                IkReal x2795 = ( ( ( ( -1.0 ) * r21 * x2794 ) ) + ( ( ( -1.0 ) * r20 * sj12 ) ) );
                                                                                                                                                j11eval[0] = x2795;
                                                                                                                                                j11eval[1] = ( ( IKabs ( ( ( ( r11 * sj12 ) ) + ( ( ( -1.0 ) * r10 * x2794 ) ) ) ) ) + ( IKabs ( r12 ) ) );
                                                                                                                                                j11eval[2] = IKsign ( x2795 );
                                                                                                                                                if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  || IKabs ( j11eval[2] ) < 0.0000010000000000  )
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        IkReal j11eval[2];
                                                                                                                                                        sj9 = -1.0;
                                                                                                                                                        cj9 = 0;
                                                                                                                                                        j9 = -1.5707963267949;
                                                                                                                                                        IkReal x2796 = cj12 * cj12;
                                                                                                                                                        IkReal x2797 = ( ( 1.0 ) * cj10 );
                                                                                                                                                        IkReal x2798 = ( cj10 * r01 * r21 );
                                                                                                                                                        IkReal x2799 = ( cj10 * cj12 * sj12 );
                                                                                                                                                        IkReal x2800 = ( ( ( r00 * r21 * x2799 ) ) + ( ( ( -1.0 ) * r02 * r22 * x2797 ) ) + ( ( ( -1.0 ) * r00 * r20 * x2796 * x2797 ) ) + ( ( r01 * r20 * x2799 ) ) + ( ( x2796 * x2798 ) ) + ( ( ( -1.0 ) * r01 * r21 * x2797 ) ) );
                                                                                                                                                        j11eval[0] = x2800;
                                                                                                                                                        j11eval[1] = IKsign ( x2800 );
                                                                                                                                                        if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                                        {
                                                                                                                                                            continue; // 1 cases reached

                                                                                                                                                        } else
                                                                                                                                                        {
                                                                                                                                                            {
                                                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                                                _nj11 = 1;
                                                                                                                                                                IkReal x2801 = cj12 * cj12;
                                                                                                                                                                IkReal x2802 = ( r00 * sj10 );
                                                                                                                                                                IkReal x2803 = ( cj12 * sj12 );
                                                                                                                                                                IkReal x2804 = ( ( 1.0 ) * r20 );
                                                                                                                                                                IkReal x2805 = ( r01 * sj10 );
                                                                                                                                                                IkReal x2806 = ( cj10 * r00 );
                                                                                                                                                                IkReal x2807 = ( cj10 * r01 * r21 );
                                                                                                                                                                CheckValue<IkReal> x2808 = IKatan2WithCheck ( IkReal ( ( ( ( r22 * sj12 * x2802 ) ) + ( ( cj12 * r22 * x2805 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * x2802 * x2803 * x2804 ) ) + ( ( ( -1.0 ) * r21 * x2801 * x2802 ) ) + ( ( r21 * x2803 * x2805 ) ) + ( ( ( -1.0 ) * x2801 * x2804 * x2805 ) ) + ( ( r21 * x2802 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                                if ( !x2808.valid ) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                CheckValue<IkReal> x2809 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * x2807 ) ) + ( ( ( -1.0 ) * cj10 * r02 * r22 ) ) + ( ( x2801 * x2807 ) ) + ( ( r21 * x2803 * x2806 ) ) + ( ( ( -1.0 ) * x2801 * x2804 * x2806 ) ) + ( ( cj10 * r01 * r20 * x2803 ) ) ) ), -1 );
                                                                                                                                                                if ( !x2809.valid ) {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x2808.value ) + ( ( ( 1.5707963267949 ) * ( x2809.value ) ) ) );
                                                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                                                {
                                                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                                                }
                                                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                                                }
                                                                                                                                                                j11valid[0] = true;
                                                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                                {
                                                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                                                    _ij11[1] = -1;
                                                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                                    {
                                                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                                        {
                                                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                                                            break;
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                                                    {
                                                                                                                                                                        IkReal evalcond[9];
                                                                                                                                                                        IkReal x2810 = IKsin ( j11 );
                                                                                                                                                                        IkReal x2811 = IKcos ( j11 );
                                                                                                                                                                        IkReal x2812 = ( cj8 * sj7 );
                                                                                                                                                                        IkReal x2813 = ( cj7 * sj8 );
                                                                                                                                                                        IkReal x2814 = ( cj10 * cj12 );
                                                                                                                                                                        IkReal x2815 = ( cj10 * sj12 );
                                                                                                                                                                        IkReal x2816 = ( r01 * sj12 );
                                                                                                                                                                        IkReal x2817 = ( cj12 * sj10 );
                                                                                                                                                                        IkReal x2818 = ( cj12 * r10 );
                                                                                                                                                                        IkReal x2819 = ( sj10 * sj12 );
                                                                                                                                                                        IkReal x2820 = ( cj7 * cj8 );
                                                                                                                                                                        IkReal x2821 = ( cj12 * r00 );
                                                                                                                                                                        IkReal x2822 = ( sj7 * sj8 );
                                                                                                                                                                        IkReal x2823 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                                        IkReal x2824 = ( cj10 * x2811 );
                                                                                                                                                                        IkReal x2825 = ( ( 1.0 ) * x2810 );
                                                                                                                                                                        IkReal x2826 = ( ( 1.0 ) * x2811 );
                                                                                                                                                                        IkReal x2827 = ( sj12 * x2810 );
                                                                                                                                                                        IkReal x2828 = ( cj10 * x2810 );
                                                                                                                                                                        IkReal x2829 = ( x2813 + x2812 );
                                                                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * x2810 * x2823 ) ) + ( ( r21 * x2827 ) ) + ( ( ( -1.0 ) * r22 * x2826 ) ) );
                                                                                                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * r12 * x2826 ) ) + ( ( ( -1.0 ) * x2818 * x2825 ) ) + ( ( r11 * x2827 ) ) );
                                                                                                                                                                        evalcond[2] = ( ( 1.0 ) + ( ( x2810 * x2816 ) ) + ( ( ( -1.0 ) * x2821 * x2825 ) ) + ( ( ( -1.0 ) * r02 * x2826 ) ) );
                                                                                                                                                                        evalcond[3] = ( ( ( r00 * x2819 ) ) + ( ( r02 * x2828 ) ) + ( ( r01 * x2817 ) ) + ( ( r01 * x2811 * x2815 ) ) + ( ( ( -1.0 ) * r00 * x2814 * x2826 ) ) );
                                                                                                                                                                        evalcond[4] = ( ( ( r00 * x2815 ) ) + ( ( r01 * x2814 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2825 ) ) + ( ( r00 * x2811 * x2817 ) ) + ( ( ( -1.0 ) * sj10 * x2816 * x2826 ) ) );
                                                                                                                                                                        evalcond[5] = ( ( ( r21 * x2817 ) ) + ( ( ( -1.0 ) * r20 * x2814 * x2826 ) ) + ( ( r21 * x2811 * x2815 ) ) + ( ( r22 * x2828 ) ) + x2829 + ( ( r20 * x2819 ) ) );
                                                                                                                                                                        evalcond[6] = ( ( ( r10 * x2819 ) ) + ( ( r11 * x2811 * x2815 ) ) + ( ( ( -1.0 ) * x2822 ) ) + ( ( ( -1.0 ) * r10 * x2814 * x2826 ) ) + ( ( r11 * x2817 ) ) + x2820 + ( ( r12 * x2828 ) ) );
                                                                                                                                                                        evalcond[7] = ( ( ( ( -1.0 ) * r12 * sj10 * x2825 ) ) + ( ( r10 * x2815 ) ) + ( ( ( -1.0 ) * r11 * x2819 * x2826 ) ) + ( ( r10 * x2811 * x2817 ) ) + ( ( r11 * x2814 ) ) + x2829 );
                                                                                                                                                                        evalcond[8] = ( ( ( ( -1.0 ) * x2820 ) ) + ( ( r21 * x2814 ) ) + ( ( ( -1.0 ) * r21 * x2819 * x2826 ) ) + ( ( r20 * x2811 * x2817 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2825 ) ) + x2822 + ( ( r20 * x2815 ) ) );
                                                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                    }

                                                                                                                                                                    {
                                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                        }

                                                                                                                                                    }

                                                                                                                                                } else
                                                                                                                                                {
                                                                                                                                                    {
                                                                                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                        bool j11valid[1] = {false};
                                                                                                                                                        _nj11 = 1;
                                                                                                                                                        IkReal x2830 = ( ( 1.0 ) * cj12 );
                                                                                                                                                        CheckValue<IkReal> x2831 = IKatan2WithCheck ( IkReal ( r12 ), IkReal ( ( ( ( r11 * sj12 ) ) + ( ( ( -1.0 ) * r10 * x2830 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                        if ( !x2831.valid ) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        CheckValue<IkReal> x2832 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r21 * x2830 ) ) + ( ( ( -1.0 ) * r20 * sj12 ) ) ) ), -1 );
                                                                                                                                                        if ( !x2832.valid ) {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x2831.value ) + ( ( ( 1.5707963267949 ) * ( x2832.value ) ) ) );
                                                                                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                        if ( j11array[0] > IKPI )
                                                                                                                                                        {
                                                                                                                                                            j11array[0] -= IK2PI;
                                                                                                                                                        }
                                                                                                                                                        else if ( j11array[0] < -IKPI )
                                                                                                                                                        {   j11array[0] += IK2PI;
                                                                                                                                                        }
                                                                                                                                                        j11valid[0] = true;
                                                                                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                        {
                                                                                                                                                            if ( !j11valid[ij11] )
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            _ij11[0] = ij11;
                                                                                                                                                            _ij11[1] = -1;
                                                                                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                            {
                                                                                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                                {
                                                                                                                                                                    j11valid[iij11] = false;
                                                                                                                                                                    _ij11[1] = iij11;
                                                                                                                                                                    break;
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                            j11 = j11array[ij11];
                                                                                                                                                            cj11 = cj11array[ij11];
                                                                                                                                                            sj11 = sj11array[ij11];
                                                                                                                                                            {
                                                                                                                                                                IkReal evalcond[9];
                                                                                                                                                                IkReal x2833 = IKsin ( j11 );
                                                                                                                                                                IkReal x2834 = IKcos ( j11 );
                                                                                                                                                                IkReal x2835 = ( cj8 * sj7 );
                                                                                                                                                                IkReal x2836 = ( cj7 * sj8 );
                                                                                                                                                                IkReal x2837 = ( cj10 * cj12 );
                                                                                                                                                                IkReal x2838 = ( cj10 * sj12 );
                                                                                                                                                                IkReal x2839 = ( r01 * sj12 );
                                                                                                                                                                IkReal x2840 = ( cj12 * sj10 );
                                                                                                                                                                IkReal x2841 = ( cj12 * r10 );
                                                                                                                                                                IkReal x2842 = ( sj10 * sj12 );
                                                                                                                                                                IkReal x2843 = ( cj7 * cj8 );
                                                                                                                                                                IkReal x2844 = ( cj12 * r00 );
                                                                                                                                                                IkReal x2845 = ( sj7 * sj8 );
                                                                                                                                                                IkReal x2846 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                                IkReal x2847 = ( cj10 * x2834 );
                                                                                                                                                                IkReal x2848 = ( ( 1.0 ) * x2833 );
                                                                                                                                                                IkReal x2849 = ( ( 1.0 ) * x2834 );
                                                                                                                                                                IkReal x2850 = ( sj12 * x2833 );
                                                                                                                                                                IkReal x2851 = ( cj10 * x2833 );
                                                                                                                                                                IkReal x2852 = ( x2836 + x2835 );
                                                                                                                                                                evalcond[0] = ( ( ( r21 * x2850 ) ) + ( ( ( -1.0 ) * x2833 * x2846 ) ) + ( ( ( -1.0 ) * r22 * x2849 ) ) );
                                                                                                                                                                evalcond[1] = ( ( ( ( -1.0 ) * r12 * x2849 ) ) + ( ( r11 * x2850 ) ) + ( ( ( -1.0 ) * x2841 * x2848 ) ) );
                                                                                                                                                                evalcond[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * r02 * x2849 ) ) + ( ( ( -1.0 ) * x2844 * x2848 ) ) + ( ( x2833 * x2839 ) ) );
                                                                                                                                                                evalcond[3] = ( ( ( r00 * x2842 ) ) + ( ( ( -1.0 ) * r00 * x2837 * x2849 ) ) + ( ( r01 * x2840 ) ) + ( ( r02 * x2851 ) ) + ( ( r01 * x2834 * x2838 ) ) );
                                                                                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * r02 * sj10 * x2848 ) ) + ( ( r00 * x2838 ) ) + ( ( ( -1.0 ) * sj10 * x2839 * x2849 ) ) + ( ( r00 * x2834 * x2840 ) ) + ( ( r01 * x2837 ) ) );
                                                                                                                                                                evalcond[5] = ( ( ( r21 * x2840 ) ) + ( ( r20 * x2842 ) ) + ( ( ( -1.0 ) * r20 * x2837 * x2849 ) ) + ( ( r22 * x2851 ) ) + x2852 + ( ( r21 * x2834 * x2838 ) ) );
                                                                                                                                                                evalcond[6] = ( ( ( r11 * x2840 ) ) + ( ( r12 * x2851 ) ) + ( ( r11 * x2834 * x2838 ) ) + ( ( ( -1.0 ) * x2845 ) ) + x2843 + ( ( r10 * x2842 ) ) + ( ( ( -1.0 ) * r10 * x2837 * x2849 ) ) );
                                                                                                                                                                evalcond[7] = ( ( ( ( -1.0 ) * r11 * x2842 * x2849 ) ) + ( ( r10 * x2838 ) ) + ( ( r10 * x2834 * x2840 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2848 ) ) + x2852 + ( ( r11 * x2837 ) ) );
                                                                                                                                                                evalcond[8] = ( ( ( r20 * x2838 ) ) + ( ( ( -1.0 ) * r21 * x2842 * x2849 ) ) + ( ( ( -1.0 ) * x2843 ) ) + x2845 + ( ( r20 * x2834 * x2840 ) ) + ( ( r21 * x2837 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2848 ) ) );
                                                                                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                            }

                                                                                                                                                            {
                                                                                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                                vinfos[0].jointtype = 1;
                                                                                                                                                                vinfos[0].foffset = j9;
                                                                                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                                                                                vinfos[1].jointtype = 1;
                                                                                                                                                                vinfos[1].foffset = j8;
                                                                                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                                                                                vinfos[2].jointtype = 1;
                                                                                                                                                                vinfos[2].foffset = j7;
                                                                                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                                                                                vinfos[3].jointtype = 1;
                                                                                                                                                                vinfos[3].foffset = j10;
                                                                                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                                                                                vinfos[4].jointtype = 1;
                                                                                                                                                                vinfos[4].foffset = j11;
                                                                                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                                                                                vinfos[5].jointtype = 1;
                                                                                                                                                                vinfos[5].foffset = j12;
                                                                                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                                                                                std::vector<int> vfree ( 0 );
                                                                                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                }

                                                                                                                                            }

                                                                                                                                        } else
                                                                                                                                        {
                                                                                                                                            {
                                                                                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                bool j11valid[1] = {false};
                                                                                                                                                _nj11 = 1;
                                                                                                                                                CheckValue<IkReal> x2853 = IKatan2WithCheck ( IkReal ( r22 ), IkReal ( ( ( ( ( -1.0 ) * cj12 * r20 ) ) + ( ( r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                                                                                if ( !x2853.valid ) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                CheckValue<IkReal> x2854 = IKPowWithIntegerCheck ( IKsign ( ( ( ( r10 * sj12 ) ) + ( ( cj12 * r11 ) ) ) ), -1 );
                                                                                                                                                if ( !x2854.valid ) {
                                                                                                                                                    continue;
                                                                                                                                                }
                                                                                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x2853.value ) + ( ( ( 1.5707963267949 ) * ( x2854.value ) ) ) );
                                                                                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                if ( j11array[0] > IKPI )
                                                                                                                                                {
                                                                                                                                                    j11array[0] -= IK2PI;
                                                                                                                                                }
                                                                                                                                                else if ( j11array[0] < -IKPI )
                                                                                                                                                {   j11array[0] += IK2PI;
                                                                                                                                                }
                                                                                                                                                j11valid[0] = true;
                                                                                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                {
                                                                                                                                                    if ( !j11valid[ij11] )
                                                                                                                                                    {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    _ij11[0] = ij11;
                                                                                                                                                    _ij11[1] = -1;
                                                                                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                    {
                                                                                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                        {
                                                                                                                                                            j11valid[iij11] = false;
                                                                                                                                                            _ij11[1] = iij11;
                                                                                                                                                            break;
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                    j11 = j11array[ij11];
                                                                                                                                                    cj11 = cj11array[ij11];
                                                                                                                                                    sj11 = sj11array[ij11];
                                                                                                                                                    {
                                                                                                                                                        IkReal evalcond[9];
                                                                                                                                                        IkReal x2855 = IKsin ( j11 );
                                                                                                                                                        IkReal x2856 = IKcos ( j11 );
                                                                                                                                                        IkReal x2857 = ( cj8 * sj7 );
                                                                                                                                                        IkReal x2858 = ( cj7 * sj8 );
                                                                                                                                                        IkReal x2859 = ( cj10 * cj12 );
                                                                                                                                                        IkReal x2860 = ( cj10 * sj12 );
                                                                                                                                                        IkReal x2861 = ( r01 * sj12 );
                                                                                                                                                        IkReal x2862 = ( cj12 * sj10 );
                                                                                                                                                        IkReal x2863 = ( cj12 * r10 );
                                                                                                                                                        IkReal x2864 = ( sj10 * sj12 );
                                                                                                                                                        IkReal x2865 = ( cj7 * cj8 );
                                                                                                                                                        IkReal x2866 = ( cj12 * r00 );
                                                                                                                                                        IkReal x2867 = ( sj7 * sj8 );
                                                                                                                                                        IkReal x2868 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                        IkReal x2869 = ( cj10 * x2856 );
                                                                                                                                                        IkReal x2870 = ( ( 1.0 ) * x2855 );
                                                                                                                                                        IkReal x2871 = ( ( 1.0 ) * x2856 );
                                                                                                                                                        IkReal x2872 = ( sj12 * x2855 );
                                                                                                                                                        IkReal x2873 = ( cj10 * x2855 );
                                                                                                                                                        IkReal x2874 = ( x2858 + x2857 );
                                                                                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * x2855 * x2868 ) ) + ( ( ( -1.0 ) * r22 * x2871 ) ) + ( ( r21 * x2872 ) ) );
                                                                                                                                                        evalcond[1] = ( ( ( ( -1.0 ) * x2863 * x2870 ) ) + ( ( r11 * x2872 ) ) + ( ( ( -1.0 ) * r12 * x2871 ) ) );
                                                                                                                                                        evalcond[2] = ( ( 1.0 ) + ( ( ( -1.0 ) * r02 * x2871 ) ) + ( ( x2855 * x2861 ) ) + ( ( ( -1.0 ) * x2866 * x2870 ) ) );
                                                                                                                                                        evalcond[3] = ( ( ( r00 * x2864 ) ) + ( ( ( -1.0 ) * r00 * x2859 * x2871 ) ) + ( ( r02 * x2873 ) ) + ( ( r01 * x2856 * x2860 ) ) + ( ( r01 * x2862 ) ) );
                                                                                                                                                        evalcond[4] = ( ( ( r00 * x2860 ) ) + ( ( r00 * x2856 * x2862 ) ) + ( ( r01 * x2859 ) ) + ( ( ( -1.0 ) * sj10 * x2861 * x2871 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x2870 ) ) );
                                                                                                                                                        evalcond[5] = ( ( ( r22 * x2873 ) ) + ( ( ( -1.0 ) * r20 * x2859 * x2871 ) ) + ( ( r21 * x2862 ) ) + ( ( r21 * x2856 * x2860 ) ) + ( ( r20 * x2864 ) ) + x2874 );
                                                                                                                                                        evalcond[6] = ( ( ( r11 * x2856 * x2860 ) ) + ( ( ( -1.0 ) * x2867 ) ) + ( ( r10 * x2864 ) ) + ( ( ( -1.0 ) * r10 * x2859 * x2871 ) ) + ( ( r11 * x2862 ) ) + ( ( r12 * x2873 ) ) + x2865 );
                                                                                                                                                        evalcond[7] = ( ( ( r11 * x2859 ) ) + ( ( r10 * x2860 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x2870 ) ) + ( ( r10 * x2856 * x2862 ) ) + x2874 + ( ( ( -1.0 ) * r11 * x2864 * x2871 ) ) );
                                                                                                                                                        evalcond[8] = ( ( ( r21 * x2859 ) ) + ( ( ( -1.0 ) * r22 * sj10 * x2870 ) ) + ( ( ( -1.0 ) * x2865 ) ) + ( ( r20 * x2856 * x2862 ) ) + ( ( ( -1.0 ) * r21 * x2864 * x2871 ) ) + ( ( r20 * x2860 ) ) + x2867 );
                                                                                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                    }

                                                                                                                                                    {
                                                                                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                        vinfos[0].jointtype = 1;
                                                                                                                                                        vinfos[0].foffset = j9;
                                                                                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                                                                                        vinfos[1].jointtype = 1;
                                                                                                                                                        vinfos[1].foffset = j8;
                                                                                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                                                                                        vinfos[2].jointtype = 1;
                                                                                                                                                        vinfos[2].foffset = j7;
                                                                                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                                                                                        vinfos[3].jointtype = 1;
                                                                                                                                                        vinfos[3].foffset = j10;
                                                                                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                                                                                        vinfos[4].jointtype = 1;
                                                                                                                                                        vinfos[4].foffset = j11;
                                                                                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                                                                                        vinfos[5].jointtype = 1;
                                                                                                                                                        vinfos[5].foffset = j12;
                                                                                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                                                                                        std::vector<int> vfree ( 0 );
                                                                                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                    }
                                                                                                                                                }
                                                                                                                                            }

                                                                                                                                        }

                                                                                                                                    }

                                                                                                                                }
                                                                                                                            } while ( 0 );
                                                                                                                            if ( bgotonextstatement )
                                                                                                                            {
                                                                                                                                bool bgotonextstatement = true;
                                                                                                                                do
                                                                                                                                {
                                                                                                                                    evalcond[0] = ( ( IKabs ( r01 ) ) + ( IKabs ( r00 ) ) );
                                                                                                                                    if ( IKabs ( evalcond[0] ) < 0.0000050000000000  )
                                                                                                                                    {
                                                                                                                                        bgotonextstatement = false;
                                                                                                                                        {
                                                                                                                                            IkReal j11eval[2];
                                                                                                                                            IkReal x2875 = ( ( -1.0 ) * px );
                                                                                                                                            r00 = 0;
                                                                                                                                            r01 = 0;
                                                                                                                                            r12 = 0;
                                                                                                                                            r22 = 0;
                                                                                                                                            npx = ( ( ( py * r10 ) ) + ( ( pz * r20 ) ) );
                                                                                                                                            npy = ( ( ( py * r11 ) ) + ( ( pz * r21 ) ) );
                                                                                                                                            npz = ( px * r02 );
                                                                                                                                            rxp0_1 = ( px * r20 );
                                                                                                                                            rxp0_2 = ( r10 * x2875 );
                                                                                                                                            rxp1_1 = ( px * r21 );
                                                                                                                                            rxp1_2 = ( r11 * x2875 );
                                                                                                                                            rxp2_0 = 0;
                                                                                                                                            rxp2_1 = ( ( -1.0 ) * pz * r02 );
                                                                                                                                            rxp2_2 = ( py * r02 );
                                                                                                                                            j11eval[0] = ( ( ( r11 * sj12 ) ) + ( ( ( -1.0 ) * cj12 * r10 ) ) );
                                                                                                                                            j11eval[1] = r02;
                                                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j11eval[2];
                                                                                                                                                    IkReal x2876 = ( ( -1.0 ) * px );
                                                                                                                                                    r00 = 0;
                                                                                                                                                    r01 = 0;
                                                                                                                                                    r12 = 0;
                                                                                                                                                    r22 = 0;
                                                                                                                                                    npx = ( ( ( py * r10 ) ) + ( ( pz * r20 ) ) );
                                                                                                                                                    npy = ( ( ( py * r11 ) ) + ( ( pz * r21 ) ) );
                                                                                                                                                    npz = ( px * r02 );
                                                                                                                                                    rxp0_1 = ( px * r20 );
                                                                                                                                                    rxp0_2 = ( r10 * x2876 );
                                                                                                                                                    rxp1_1 = ( px * r21 );
                                                                                                                                                    rxp1_2 = ( r11 * x2876 );
                                                                                                                                                    rxp2_0 = 0;
                                                                                                                                                    rxp2_1 = ( ( -1.0 ) * pz * r02 );
                                                                                                                                                    rxp2_2 = ( py * r02 );
                                                                                                                                                    IkReal x2877 = ( ( 1.0 ) * cj12 );
                                                                                                                                                    j11eval[0] = ( ( ( ( -1.0 ) * r10 * x2877 ) ) + ( ( r11 * sj12 ) ) );
                                                                                                                                                    j11eval[1] = ( ( ( ( -1.0 ) * cj10 * r20 * x2877 ) ) + ( ( cj10 * r21 * sj12 ) ) );
                                                                                                                                                    if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                                    {
                                                                                                                                                        {
                                                                                                                                                            IkReal j11eval[2];
                                                                                                                                                            IkReal x2878 = ( ( -1.0 ) * px );
                                                                                                                                                            r00 = 0;
                                                                                                                                                            r01 = 0;
                                                                                                                                                            r12 = 0;
                                                                                                                                                            r22 = 0;
                                                                                                                                                            npx = ( ( ( py * r10 ) ) + ( ( pz * r20 ) ) );
                                                                                                                                                            npy = ( ( ( py * r11 ) ) + ( ( pz * r21 ) ) );
                                                                                                                                                            npz = ( px * r02 );
                                                                                                                                                            rxp0_1 = ( px * r20 );
                                                                                                                                                            rxp0_2 = ( r10 * x2878 );
                                                                                                                                                            rxp1_1 = ( px * r21 );
                                                                                                                                                            rxp1_2 = ( r11 * x2878 );
                                                                                                                                                            rxp2_0 = 0;
                                                                                                                                                            rxp2_1 = ( ( -1.0 ) * pz * r02 );
                                                                                                                                                            rxp2_2 = ( py * r02 );
                                                                                                                                                            j11eval[0] = cj10;
                                                                                                                                                            j11eval[1] = r02;
                                                                                                                                                            if ( IKabs ( j11eval[0] ) < 0.0000010000000000  || IKabs ( j11eval[1] ) < 0.0000010000000000  )
                                                                                                                                                            {
                                                                                                                                                                continue; // 1 cases reached

                                                                                                                                                            } else
                                                                                                                                                            {
                                                                                                                                                                {
                                                                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                                    bool j11valid[1] = {false};
                                                                                                                                                                    _nj11 = 1;
                                                                                                                                                                    CheckValue<IkReal> x2880 = IKPowWithIntegerCheck ( r02, -1 );
                                                                                                                                                                    if ( !x2880.valid ) {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                    IkReal x2879 = x2880.value;
                                                                                                                                                                    CheckValue<IkReal> x2881 = IKPowWithIntegerCheck ( cj10, -1 );
                                                                                                                                                                    if ( !x2881.valid ) {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                    if ( IKabs ( ( x2879 * ( x2881.value ) * ( ( ( ( ( -1.0 ) *cj9 * sj7 * sj8 ) ) + ( ( cj7 * cj8 * cj9 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( -1.0 ) *sj9 * x2879 ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( x2879 * ( x2881.value ) * ( ( ( ( ( -1.0 ) *cj9 * sj7 * sj8 ) ) + ( ( cj7 * cj8 * cj9 ) ) ) ) ) ) + IKsqr ( ( ( -1.0 ) *sj9 * x2879 ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                                                                                        continue;
                                                                                                                                                                    j11array[0] = IKatan2 ( ( x2879 * ( x2881.value ) * ( ( ( ( ( -1.0 ) * cj9 * sj7 * sj8 ) ) + ( ( cj7 * cj8 * cj9 ) ) ) ) ), ( ( -1.0 ) * sj9 * x2879 ) );
                                                                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                                                                    {
                                                                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                                                                    }
                                                                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                                                                    }
                                                                                                                                                                    j11valid[0] = true;
                                                                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                                    {
                                                                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                                                                        {
                                                                                                                                                                            continue;
                                                                                                                                                                        }
                                                                                                                                                                        _ij11[0] = ij11;
                                                                                                                                                                        _ij11[1] = -1;
                                                                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                                        {
                                                                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                                            {
                                                                                                                                                                                j11valid[iij11] = false;
                                                                                                                                                                                _ij11[1] = iij11;
                                                                                                                                                                                break;
                                                                                                                                                                            }
                                                                                                                                                                        }
                                                                                                                                                                        j11 = j11array[ij11];
                                                                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                                                                        {
                                                                                                                                                                            IkReal evalcond[9];
                                                                                                                                                                            IkReal x2882 = IKsin ( j11 );
                                                                                                                                                                            IkReal x2883 = IKcos ( j11 );
                                                                                                                                                                            IkReal x2884 = ( ( 1.0 ) * cj7 );
                                                                                                                                                                            IkReal x2885 = ( cj9 * sj8 );
                                                                                                                                                                            IkReal x2886 = ( cj10 * cj12 );
                                                                                                                                                                            IkReal x2887 = ( cj8 * sj9 );
                                                                                                                                                                            IkReal x2888 = ( cj12 * sj10 );
                                                                                                                                                                            IkReal x2889 = ( sj7 * sj8 );
                                                                                                                                                                            IkReal x2890 = ( ( 1.0 ) * sj7 );
                                                                                                                                                                            IkReal x2891 = ( cj10 * sj12 );
                                                                                                                                                                            IkReal x2892 = ( r11 * sj12 );
                                                                                                                                                                            IkReal x2893 = ( r21 * sj12 );
                                                                                                                                                                            IkReal x2894 = ( cj8 * cj9 );
                                                                                                                                                                            IkReal x2895 = ( sj10 * sj12 );
                                                                                                                                                                            IkReal x2896 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                                            IkReal x2897 = ( cj10 * x2883 );
                                                                                                                                                                            IkReal x2898 = ( ( 1.0 ) * x2883 );
                                                                                                                                                                            IkReal x2899 = ( ( 1.0 ) * cj12 * r10 );
                                                                                                                                                                            IkReal x2900 = ( r02 * x2882 );
                                                                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x2898 ) ) );
                                                                                                                                                                            evalcond[1] = ( ( ( ( -1.0 ) * x2882 * x2896 ) ) + ( ( x2882 * x2893 ) ) );
                                                                                                                                                                            evalcond[2] = ( cj9 + ( ( ( -1.0 ) * x2882 * x2899 ) ) + ( ( x2882 * x2892 ) ) );
                                                                                                                                                                            evalcond[3] = ( ( ( cj10 * x2900 ) ) + ( ( sj7 * x2885 ) ) + ( ( ( -1.0 ) * x2884 * x2894 ) ) );
                                                                                                                                                                            evalcond[4] = ( ( ( ( -1.0 ) * x2890 * x2894 ) ) + ( ( ( -1.0 ) * x2884 * x2885 ) ) + ( ( ( -1.0 ) * sj10 * x2900 ) ) );
                                                                                                                                                                            evalcond[5] = ( ( ( ( -1.0 ) * r20 * x2886 * x2898 ) ) + ( ( cj8 * sj7 ) ) + ( ( r21 * x2888 ) ) + ( ( r21 * x2883 * x2891 ) ) + ( ( cj7 * sj8 ) ) + ( ( r20 * x2895 ) ) );
                                                                                                                                                                            evalcond[6] = ( ( ( r21 * x2886 ) ) + ( ( ( -1.0 ) * cj8 * x2884 ) ) + ( ( r20 * x2883 * x2888 ) ) + x2889 + ( ( ( -1.0 ) * sj10 * x2893 * x2898 ) ) + ( ( r20 * x2891 ) ) );
                                                                                                                                                                            evalcond[7] = ( ( ( sj9 * x2889 ) ) + ( ( r11 * x2888 ) ) + ( ( r11 * x2883 * x2891 ) ) + ( ( r10 * x2895 ) ) + ( ( ( -1.0 ) * r10 * x2886 * x2898 ) ) + ( ( ( -1.0 ) * x2884 * x2887 ) ) );
                                                                                                                                                                            evalcond[8] = ( ( ( ( -1.0 ) * x2887 * x2890 ) ) + ( ( r11 * x2886 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2884 ) ) + ( ( r10 * x2891 ) ) + ( ( ( -1.0 ) * sj10 * x2892 * x2898 ) ) + ( ( r10 * x2883 * x2888 ) ) );
                                                                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                                            {
                                                                                                                                                                                continue;
                                                                                                                                                                            }
                                                                                                                                                                        }

                                                                                                                                                                        {
                                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                                        }
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                            }

                                                                                                                                                        }

                                                                                                                                                    } else
                                                                                                                                                    {
                                                                                                                                                        {
                                                                                                                                                            IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                            bool j11valid[1] = {false};
                                                                                                                                                            _nj11 = 1;
                                                                                                                                                            IkReal x2901 = ( ( 1.0 ) * r20 );
                                                                                                                                                            IkReal x2902 = ( ( 1.0 ) * cj12 );
                                                                                                                                                            CheckValue<IkReal> x2903 = IKPowWithIntegerCheck ( ( ( ( ( -1.0 ) * r10 * x2902 ) ) + ( ( r11 * sj12 ) ) ), -1 );
                                                                                                                                                            if ( !x2903.valid ) {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            CheckValue<IkReal> x2904 = IKPowWithIntegerCheck ( ( ( ( ( -1.0 ) * cj10 * cj12 * x2901 ) ) + ( ( cj10 * r21 * sj12 ) ) ), -1 );
                                                                                                                                                            if ( !x2904.valid ) {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                            if ( IKabs ( ( ( -1.0 ) *cj9 * ( x2903.value ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( x2904.value ) * ( ( ( ( ( -1.0 ) *sj10 * sj12 * x2901 ) ) + ( ( ( -1.0 ) *cj8 * sj7 ) ) + ( ( ( -1.0 ) *r21 * sj10 * x2902 ) ) + ( ( ( -1.0 ) *cj7 * sj8 ) ) ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( -1.0 ) *cj9 * ( x2903.value ) ) ) + IKsqr ( ( ( x2904.value ) * ( ( ( ( ( -1.0 ) *sj10 * sj12 * x2901 ) ) + ( ( ( -1.0 ) *cj8 * sj7 ) ) + ( ( ( -1.0 ) *r21 * sj10 * x2902 ) ) + ( ( ( -1.0 ) *cj7 * sj8 ) ) ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                                                                                continue;
                                                                                                                                                            j11array[0] = IKatan2 ( ( ( -1.0 ) * cj9 * ( x2903.value ) ), ( ( x2904.value ) * ( ( ( ( ( -1.0 ) * sj10 * sj12 * x2901 ) ) + ( ( ( -1.0 ) * cj8 * sj7 ) ) + ( ( ( -1.0 ) * r21 * sj10 * x2902 ) ) + ( ( ( -1.0 ) * cj7 * sj8 ) ) ) ) ) );
                                                                                                                                                            sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                            cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                            if ( j11array[0] > IKPI )
                                                                                                                                                            {
                                                                                                                                                                j11array[0] -= IK2PI;
                                                                                                                                                            }
                                                                                                                                                            else if ( j11array[0] < -IKPI )
                                                                                                                                                            {   j11array[0] += IK2PI;
                                                                                                                                                            }
                                                                                                                                                            j11valid[0] = true;
                                                                                                                                                            for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                            {
                                                                                                                                                                if ( !j11valid[ij11] )
                                                                                                                                                                {
                                                                                                                                                                    continue;
                                                                                                                                                                }
                                                                                                                                                                _ij11[0] = ij11;
                                                                                                                                                                _ij11[1] = -1;
                                                                                                                                                                for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                                {
                                                                                                                                                                    if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                                    {
                                                                                                                                                                        j11valid[iij11] = false;
                                                                                                                                                                        _ij11[1] = iij11;
                                                                                                                                                                        break;
                                                                                                                                                                    }
                                                                                                                                                                }
                                                                                                                                                                j11 = j11array[ij11];
                                                                                                                                                                cj11 = cj11array[ij11];
                                                                                                                                                                sj11 = sj11array[ij11];
                                                                                                                                                                {
                                                                                                                                                                    IkReal evalcond[9];
                                                                                                                                                                    IkReal x2905 = IKsin ( j11 );
                                                                                                                                                                    IkReal x2906 = IKcos ( j11 );
                                                                                                                                                                    IkReal x2907 = ( ( 1.0 ) * cj7 );
                                                                                                                                                                    IkReal x2908 = ( cj9 * sj8 );
                                                                                                                                                                    IkReal x2909 = ( cj10 * cj12 );
                                                                                                                                                                    IkReal x2910 = ( cj8 * sj9 );
                                                                                                                                                                    IkReal x2911 = ( cj12 * sj10 );
                                                                                                                                                                    IkReal x2912 = ( sj7 * sj8 );
                                                                                                                                                                    IkReal x2913 = ( ( 1.0 ) * sj7 );
                                                                                                                                                                    IkReal x2914 = ( cj10 * sj12 );
                                                                                                                                                                    IkReal x2915 = ( r11 * sj12 );
                                                                                                                                                                    IkReal x2916 = ( r21 * sj12 );
                                                                                                                                                                    IkReal x2917 = ( cj8 * cj9 );
                                                                                                                                                                    IkReal x2918 = ( sj10 * sj12 );
                                                                                                                                                                    IkReal x2919 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                                    IkReal x2920 = ( cj10 * x2906 );
                                                                                                                                                                    IkReal x2921 = ( ( 1.0 ) * x2906 );
                                                                                                                                                                    IkReal x2922 = ( ( 1.0 ) * cj12 * r10 );
                                                                                                                                                                    IkReal x2923 = ( r02 * x2905 );
                                                                                                                                                                    evalcond[0] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x2921 ) ) );
                                                                                                                                                                    evalcond[1] = ( ( ( ( -1.0 ) * x2905 * x2919 ) ) + ( ( x2905 * x2916 ) ) );
                                                                                                                                                                    evalcond[2] = ( cj9 + ( ( ( -1.0 ) * x2905 * x2922 ) ) + ( ( x2905 * x2915 ) ) );
                                                                                                                                                                    evalcond[3] = ( ( ( cj10 * x2923 ) ) + ( ( ( -1.0 ) * x2907 * x2917 ) ) + ( ( sj7 * x2908 ) ) );
                                                                                                                                                                    evalcond[4] = ( ( ( ( -1.0 ) * x2913 * x2917 ) ) + ( ( ( -1.0 ) * x2907 * x2908 ) ) + ( ( ( -1.0 ) * sj10 * x2923 ) ) );
                                                                                                                                                                    evalcond[5] = ( ( ( cj8 * sj7 ) ) + ( ( r20 * x2918 ) ) + ( ( ( -1.0 ) * r20 * x2909 * x2921 ) ) + ( ( r21 * x2911 ) ) + ( ( r21 * x2906 * x2914 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                                                                                    evalcond[6] = ( ( ( r20 * x2914 ) ) + ( ( r21 * x2909 ) ) + ( ( r20 * x2906 * x2911 ) ) + ( ( ( -1.0 ) * sj10 * x2916 * x2921 ) ) + ( ( ( -1.0 ) * cj8 * x2907 ) ) + x2912 );
                                                                                                                                                                    evalcond[7] = ( ( ( ( -1.0 ) * r10 * x2909 * x2921 ) ) + ( ( r11 * x2911 ) ) + ( ( ( -1.0 ) * x2907 * x2910 ) ) + ( ( r11 * x2906 * x2914 ) ) + ( ( sj9 * x2912 ) ) + ( ( r10 * x2918 ) ) );
                                                                                                                                                                    evalcond[8] = ( ( ( r10 * x2906 * x2911 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2907 ) ) + ( ( ( -1.0 ) * sj10 * x2915 * x2921 ) ) + ( ( ( -1.0 ) * x2910 * x2913 ) ) + ( ( r11 * x2909 ) ) + ( ( r10 * x2914 ) ) );
                                                                                                                                                                    if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                                    {
                                                                                                                                                                        continue;
                                                                                                                                                                    }
                                                                                                                                                                }

                                                                                                                                                                {
                                                                                                                                                                    std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                                    vinfos[0].jointtype = 1;
                                                                                                                                                                    vinfos[0].foffset = j9;
                                                                                                                                                                    vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                                    vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                                    vinfos[0].maxsolutions = _nj9;
                                                                                                                                                                    vinfos[1].jointtype = 1;
                                                                                                                                                                    vinfos[1].foffset = j8;
                                                                                                                                                                    vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                                    vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                                    vinfos[1].maxsolutions = _nj8;
                                                                                                                                                                    vinfos[2].jointtype = 1;
                                                                                                                                                                    vinfos[2].foffset = j7;
                                                                                                                                                                    vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                                    vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                                    vinfos[2].maxsolutions = _nj7;
                                                                                                                                                                    vinfos[3].jointtype = 1;
                                                                                                                                                                    vinfos[3].foffset = j10;
                                                                                                                                                                    vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                                    vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                                    vinfos[3].maxsolutions = _nj10;
                                                                                                                                                                    vinfos[4].jointtype = 1;
                                                                                                                                                                    vinfos[4].foffset = j11;
                                                                                                                                                                    vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                                    vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                                    vinfos[4].maxsolutions = _nj11;
                                                                                                                                                                    vinfos[5].jointtype = 1;
                                                                                                                                                                    vinfos[5].foffset = j12;
                                                                                                                                                                    vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                                    vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                                    vinfos[5].maxsolutions = _nj12;
                                                                                                                                                                    std::vector<int> vfree ( 0 );
                                                                                                                                                                    solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                                }
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                    }

                                                                                                                                                }

                                                                                                                                            } else
                                                                                                                                            {
                                                                                                                                                {
                                                                                                                                                    IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                                                                                    bool j11valid[1] = {false};
                                                                                                                                                    _nj11 = 1;
                                                                                                                                                    CheckValue<IkReal> x2924 = IKPowWithIntegerCheck ( ( ( ( r11 * sj12 ) ) + ( ( ( -1.0 ) * cj12 * r10 ) ) ), -1 );
                                                                                                                                                    if ( !x2924.valid ) {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    CheckValue<IkReal> x2925 = IKPowWithIntegerCheck ( r02, -1 );
                                                                                                                                                    if ( !x2925.valid ) {
                                                                                                                                                        continue;
                                                                                                                                                    }
                                                                                                                                                    if ( IKabs ( ( ( -1.0 ) *cj9 * ( x2924.value ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( -1.0 ) *sj9 * ( x2925.value ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( -1.0 ) *cj9 * ( x2924.value ) ) ) + IKsqr ( ( ( -1.0 ) *sj9 * ( x2925.value ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                                                                                                                        continue;
                                                                                                                                                    j11array[0] = IKatan2 ( ( ( -1.0 ) * cj9 * ( x2924.value ) ), ( ( -1.0 ) * sj9 * ( x2925.value ) ) );
                                                                                                                                                    sj11array[0] = IKsin ( j11array[0] );
                                                                                                                                                    cj11array[0] = IKcos ( j11array[0] );
                                                                                                                                                    if ( j11array[0] > IKPI )
                                                                                                                                                    {
                                                                                                                                                        j11array[0] -= IK2PI;
                                                                                                                                                    }
                                                                                                                                                    else if ( j11array[0] < -IKPI )
                                                                                                                                                    {   j11array[0] += IK2PI;
                                                                                                                                                    }
                                                                                                                                                    j11valid[0] = true;
                                                                                                                                                    for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                                                                                    {
                                                                                                                                                        if ( !j11valid[ij11] )
                                                                                                                                                        {
                                                                                                                                                            continue;
                                                                                                                                                        }
                                                                                                                                                        _ij11[0] = ij11;
                                                                                                                                                        _ij11[1] = -1;
                                                                                                                                                        for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                                                                                        {
                                                                                                                                                            if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                                                                            {
                                                                                                                                                                j11valid[iij11] = false;
                                                                                                                                                                _ij11[1] = iij11;
                                                                                                                                                                break;
                                                                                                                                                            }
                                                                                                                                                        }
                                                                                                                                                        j11 = j11array[ij11];
                                                                                                                                                        cj11 = cj11array[ij11];
                                                                                                                                                        sj11 = sj11array[ij11];
                                                                                                                                                        {
                                                                                                                                                            IkReal evalcond[9];
                                                                                                                                                            IkReal x2926 = IKsin ( j11 );
                                                                                                                                                            IkReal x2927 = IKcos ( j11 );
                                                                                                                                                            IkReal x2928 = ( ( 1.0 ) * cj7 );
                                                                                                                                                            IkReal x2929 = ( cj9 * sj8 );
                                                                                                                                                            IkReal x2930 = ( cj10 * cj12 );
                                                                                                                                                            IkReal x2931 = ( cj8 * sj9 );
                                                                                                                                                            IkReal x2932 = ( cj12 * sj10 );
                                                                                                                                                            IkReal x2933 = ( sj7 * sj8 );
                                                                                                                                                            IkReal x2934 = ( ( 1.0 ) * sj7 );
                                                                                                                                                            IkReal x2935 = ( cj10 * sj12 );
                                                                                                                                                            IkReal x2936 = ( r11 * sj12 );
                                                                                                                                                            IkReal x2937 = ( r21 * sj12 );
                                                                                                                                                            IkReal x2938 = ( cj8 * cj9 );
                                                                                                                                                            IkReal x2939 = ( sj10 * sj12 );
                                                                                                                                                            IkReal x2940 = ( ( 1.0 ) * cj12 * r20 );
                                                                                                                                                            IkReal x2941 = ( cj10 * x2927 );
                                                                                                                                                            IkReal x2942 = ( ( 1.0 ) * x2927 );
                                                                                                                                                            IkReal x2943 = ( ( 1.0 ) * cj12 * r10 );
                                                                                                                                                            IkReal x2944 = ( r02 * x2926 );
                                                                                                                                                            evalcond[0] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r02 * x2942 ) ) );
                                                                                                                                                            evalcond[1] = ( ( ( x2926 * x2937 ) ) + ( ( ( -1.0 ) * x2926 * x2940 ) ) );
                                                                                                                                                            evalcond[2] = ( cj9 + ( ( x2926 * x2936 ) ) + ( ( ( -1.0 ) * x2926 * x2943 ) ) );
                                                                                                                                                            evalcond[3] = ( ( ( cj10 * x2944 ) ) + ( ( sj7 * x2929 ) ) + ( ( ( -1.0 ) * x2928 * x2938 ) ) );
                                                                                                                                                            evalcond[4] = ( ( ( ( -1.0 ) * sj10 * x2944 ) ) + ( ( ( -1.0 ) * x2934 * x2938 ) ) + ( ( ( -1.0 ) * x2928 * x2929 ) ) );
                                                                                                                                                            evalcond[5] = ( ( ( ( -1.0 ) * r20 * x2930 * x2942 ) ) + ( ( r21 * x2927 * x2935 ) ) + ( ( cj8 * sj7 ) ) + ( ( r21 * x2932 ) ) + ( ( r20 * x2939 ) ) + ( ( cj7 * sj8 ) ) );
                                                                                                                                                            evalcond[6] = ( ( ( r21 * x2930 ) ) + ( ( ( -1.0 ) * cj8 * x2928 ) ) + ( ( r20 * x2935 ) ) + ( ( r20 * x2927 * x2932 ) ) + ( ( ( -1.0 ) * sj10 * x2937 * x2942 ) ) + x2933 );
                                                                                                                                                            evalcond[7] = ( ( ( r10 * x2939 ) ) + ( ( r11 * x2927 * x2935 ) ) + ( ( sj9 * x2933 ) ) + ( ( ( -1.0 ) * x2928 * x2931 ) ) + ( ( r11 * x2932 ) ) + ( ( ( -1.0 ) * r10 * x2930 * x2942 ) ) );
                                                                                                                                                            evalcond[8] = ( ( ( ( -1.0 ) * x2931 * x2934 ) ) + ( ( r10 * x2935 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2928 ) ) + ( ( r10 * x2927 * x2932 ) ) + ( ( ( -1.0 ) * sj10 * x2936 * x2942 ) ) + ( ( r11 * x2930 ) ) );
                                                                                                                                                            if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                                                                            {
                                                                                                                                                                continue;
                                                                                                                                                            }
                                                                                                                                                        }

                                                                                                                                                        {
                                                                                                                                                            std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                                                                            vinfos[0].jointtype = 1;
                                                                                                                                                            vinfos[0].foffset = j9;
                                                                                                                                                            vinfos[0].indices[0] = _ij9[0];
                                                                                                                                                            vinfos[0].indices[1] = _ij9[1];
                                                                                                                                                            vinfos[0].maxsolutions = _nj9;
                                                                                                                                                            vinfos[1].jointtype = 1;
                                                                                                                                                            vinfos[1].foffset = j8;
                                                                                                                                                            vinfos[1].indices[0] = _ij8[0];
                                                                                                                                                            vinfos[1].indices[1] = _ij8[1];
                                                                                                                                                            vinfos[1].maxsolutions = _nj8;
                                                                                                                                                            vinfos[2].jointtype = 1;
                                                                                                                                                            vinfos[2].foffset = j7;
                                                                                                                                                            vinfos[2].indices[0] = _ij7[0];
                                                                                                                                                            vinfos[2].indices[1] = _ij7[1];
                                                                                                                                                            vinfos[2].maxsolutions = _nj7;
                                                                                                                                                            vinfos[3].jointtype = 1;
                                                                                                                                                            vinfos[3].foffset = j10;
                                                                                                                                                            vinfos[3].indices[0] = _ij10[0];
                                                                                                                                                            vinfos[3].indices[1] = _ij10[1];
                                                                                                                                                            vinfos[3].maxsolutions = _nj10;
                                                                                                                                                            vinfos[4].jointtype = 1;
                                                                                                                                                            vinfos[4].foffset = j11;
                                                                                                                                                            vinfos[4].indices[0] = _ij11[0];
                                                                                                                                                            vinfos[4].indices[1] = _ij11[1];
                                                                                                                                                            vinfos[4].maxsolutions = _nj11;
                                                                                                                                                            vinfos[5].jointtype = 1;
                                                                                                                                                            vinfos[5].foffset = j12;
                                                                                                                                                            vinfos[5].indices[0] = _ij12[0];
                                                                                                                                                            vinfos[5].indices[1] = _ij12[1];
                                                                                                                                                            vinfos[5].maxsolutions = _nj12;
                                                                                                                                                            std::vector<int> vfree ( 0 );
                                                                                                                                                            solutions.AddSolution ( vinfos, vfree );
                                                                                                                                                        }
                                                                                                                                                    }
                                                                                                                                                }

                                                                                                                                            }

                                                                                                                                        }

                                                                                                                                    }
                                                                                                                                } while ( 0 );
                                                                                                                                if ( bgotonextstatement )
                                                                                                                                {
                                                                                                                                    bool bgotonextstatement = true;
                                                                                                                                    do
                                                                                                                                    {
                                                                                                                                        if ( 1 )
                                                                                                                                        {
                                                                                                                                            bgotonextstatement = false;
                                                                                                                                            continue; // branch miss [j11]

                                                                                                                                        }
                                                                                                                                    } while ( 0 );
                                                                                                                                    if ( bgotonextstatement )
                                                                                                                                    {
                                                                                                                                    }
                                                                                                                                }
                                                                                                                            }
                                                                                                                        }
                                                                                                                    }
                                                                                                                }
                                                                                                            }
                                                                                                        }
                                                                                                    }
                                                                                                }
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                } else
                                                                                {
                                                                                    {
                                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                        bool j11valid[1] = {false};
                                                                                        _nj11 = 1;
                                                                                        IkReal x2945 = ( ( 1.0 ) * sj12 );
                                                                                        CheckValue<IkReal> x2946 = IKatan2WithCheck ( IkReal ( ( ( ( ( -1.0 ) * cj9 * r02 ) ) + ( ( ( -1.0 ) * r12 * sj9 ) ) ) ), IkReal ( ( ( ( cj12 * r10 * sj9 ) ) + ( ( ( -1.0 ) * r11 * sj9 * x2945 ) ) + ( ( ( -1.0 ) * cj9 * r01 * x2945 ) ) + ( ( cj12 * cj9 * r00 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                        if ( !x2946.valid ) {
                                                                                            continue;
                                                                                        }
                                                                                        CheckValue<IkReal> x2947 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * cj12 * r21 ) ) + ( ( ( -1.0 ) * r20 * x2945 ) ) ) ), -1 );
                                                                                        if ( !x2947.valid ) {
                                                                                            continue;
                                                                                        }
                                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( x2946.value ) + ( ( ( 1.5707963267949 ) * ( x2947.value ) ) ) );
                                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                                        if ( j11array[0] > IKPI )
                                                                                        {
                                                                                            j11array[0] -= IK2PI;
                                                                                        }
                                                                                        else if ( j11array[0] < -IKPI )
                                                                                        {   j11array[0] += IK2PI;
                                                                                        }
                                                                                        j11valid[0] = true;
                                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                        {
                                                                                            if ( !j11valid[ij11] )
                                                                                            {
                                                                                                continue;
                                                                                            }
                                                                                            _ij11[0] = ij11;
                                                                                            _ij11[1] = -1;
                                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                            {
                                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                                {
                                                                                                    j11valid[iij11] = false;
                                                                                                    _ij11[1] = iij11;
                                                                                                    break;
                                                                                                }
                                                                                            }
                                                                                            j11 = j11array[ij11];
                                                                                            cj11 = cj11array[ij11];
                                                                                            sj11 = sj11array[ij11];
                                                                                            {
                                                                                                IkReal evalcond[9];
                                                                                                IkReal x2948 = IKsin ( j11 );
                                                                                                IkReal x2949 = IKcos ( j11 );
                                                                                                IkReal x2950 = ( ( 1.0 ) * cj7 );
                                                                                                IkReal x2951 = ( cj9 * sj8 );
                                                                                                IkReal x2952 = ( cj10 * cj12 );
                                                                                                IkReal x2953 = ( cj8 * sj9 );
                                                                                                IkReal x2954 = ( r01 * sj12 );
                                                                                                IkReal x2955 = ( cj12 * sj10 );
                                                                                                IkReal x2956 = ( sj7 * sj8 );
                                                                                                IkReal x2957 = ( ( 1.0 ) * sj7 );
                                                                                                IkReal x2958 = ( r10 * sj12 );
                                                                                                IkReal x2959 = ( ( 1.0 ) * sj10 );
                                                                                                IkReal x2960 = ( r11 * sj12 );
                                                                                                IkReal x2961 = ( cj10 * sj12 );
                                                                                                IkReal x2962 = ( r21 * sj12 );
                                                                                                IkReal x2963 = ( cj8 * cj9 );
                                                                                                IkReal x2964 = ( ( 1.0 ) * cj12 );
                                                                                                IkReal x2965 = ( sj10 * sj12 );
                                                                                                IkReal x2966 = ( r20 * x2964 );
                                                                                                IkReal x2967 = ( cj10 * x2949 );
                                                                                                IkReal x2968 = ( r12 * x2948 );
                                                                                                IkReal x2969 = ( ( 1.0 ) * x2949 );
                                                                                                IkReal x2970 = ( r22 * x2948 );
                                                                                                IkReal x2971 = ( r02 * x2948 );
                                                                                                IkReal x2972 = ( x2949 * x2955 );
                                                                                                evalcond[0] = ( ( ( x2948 * x2962 ) ) + ( ( ( -1.0 ) * x2948 * x2966 ) ) + ( ( ( -1.0 ) * r22 * x2969 ) ) );
                                                                                                evalcond[1] = ( ( ( x2948 * x2960 ) ) + cj9 + ( ( ( -1.0 ) * r10 * x2948 * x2964 ) ) + ( ( ( -1.0 ) * r12 * x2969 ) ) );
                                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( x2948 * x2954 ) ) + ( ( ( -1.0 ) * r00 * x2948 * x2964 ) ) + ( ( ( -1.0 ) * r02 * x2969 ) ) );
                                                                                                evalcond[3] = ( ( ( r21 * x2949 * x2961 ) ) + ( ( cj8 * sj7 ) ) + ( ( cj10 * x2970 ) ) + ( ( r21 * x2955 ) ) + ( ( r20 * x2965 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * r20 * x2952 * x2969 ) ) );
                                                                                                evalcond[4] = ( ( ( ( -1.0 ) * x2949 * x2959 * x2962 ) ) + ( ( r21 * x2952 ) ) + ( ( ( -1.0 ) * cj8 * x2950 ) ) + ( ( ( -1.0 ) * x2959 * x2970 ) ) + ( ( r20 * x2961 ) ) + ( ( r20 * x2972 ) ) + x2956 );
                                                                                                evalcond[5] = ( ( ( x2954 * x2967 ) ) + ( ( cj10 * x2971 ) ) + ( ( sj7 * x2951 ) ) + ( ( r01 * x2955 ) ) + ( ( r00 * x2965 ) ) + ( ( ( -1.0 ) * r00 * x2952 * x2969 ) ) + ( ( ( -1.0 ) * x2950 * x2963 ) ) );
                                                                                                evalcond[6] = ( ( ( cj10 * x2968 ) ) + ( ( x2960 * x2967 ) ) + ( ( sj9 * x2956 ) ) + ( ( ( -1.0 ) * r10 * x2952 * x2969 ) ) + ( ( ( -1.0 ) * x2950 * x2953 ) ) + ( ( sj10 * x2958 ) ) + ( ( r11 * x2955 ) ) );
                                                                                                evalcond[7] = ( ( ( ( -1.0 ) * x2957 * x2963 ) ) + ( ( r01 * x2952 ) ) + ( ( r00 * x2972 ) ) + ( ( r00 * x2961 ) ) + ( ( ( -1.0 ) * x2959 * x2971 ) ) + ( ( ( -1.0 ) * x2950 * x2951 ) ) + ( ( ( -1.0 ) * x2949 * x2954 * x2959 ) ) );
                                                                                                evalcond[8] = ( ( ( ( -1.0 ) * x2953 * x2957 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2950 ) ) + ( ( cj10 * x2958 ) ) + ( ( r10 * x2972 ) ) + ( ( ( -1.0 ) * x2949 * x2959 * x2960 ) ) + ( ( ( -1.0 ) * x2959 * x2968 ) ) + ( ( r11 * x2952 ) ) );
                                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                                {
                                                                                                    continue;
                                                                                                }
                                                                                            }

                                                                                            {
                                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                                vinfos[0].jointtype = 1;
                                                                                                vinfos[0].foffset = j9;
                                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                                vinfos[1].jointtype = 1;
                                                                                                vinfos[1].foffset = j8;
                                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                                vinfos[2].jointtype = 1;
                                                                                                vinfos[2].foffset = j7;
                                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                                vinfos[3].jointtype = 1;
                                                                                                vinfos[3].foffset = j10;
                                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                                vinfos[4].jointtype = 1;
                                                                                                vinfos[4].foffset = j11;
                                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                                vinfos[5].jointtype = 1;
                                                                                                vinfos[5].foffset = j12;
                                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                                std::vector<int> vfree ( 0 );
                                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                                            }
                                                                                        }
                                                                                    }

                                                                                }

                                                                            }

                                                                        } else
                                                                        {
                                                                            {
                                                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                                                bool j11valid[1] = {false};
                                                                                _nj11 = 1;
                                                                                IkReal x2973 = ( ( 1.0 ) * cj12 );
                                                                                CheckValue<IkReal> x2974 = IKatan2WithCheck ( IkReal ( ( r22 * sj9 ) ), IkReal ( ( ( ( r21 * sj12 * sj9 ) ) + ( ( ( -1.0 ) * r20 * sj9 * x2973 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                                if ( !x2974.valid ) {
                                                                                    continue;
                                                                                }
                                                                                CheckValue<IkReal> x2975 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r11 * x2973 ) ) + ( ( ( -1.0 ) * r10 * sj12 ) ) ) ), -1 );
                                                                                if ( !x2975.valid ) {
                                                                                    continue;
                                                                                }
                                                                                j11array[0] = ( ( -1.5707963267949 ) + ( x2974.value ) + ( ( ( 1.5707963267949 ) * ( x2975.value ) ) ) );
                                                                                sj11array[0] = IKsin ( j11array[0] );
                                                                                cj11array[0] = IKcos ( j11array[0] );
                                                                                if ( j11array[0] > IKPI )
                                                                                {
                                                                                    j11array[0] -= IK2PI;
                                                                                }
                                                                                else if ( j11array[0] < -IKPI )
                                                                                {   j11array[0] += IK2PI;
                                                                                }
                                                                                j11valid[0] = true;
                                                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                                {
                                                                                    if ( !j11valid[ij11] )
                                                                                    {
                                                                                        continue;
                                                                                    }
                                                                                    _ij11[0] = ij11;
                                                                                    _ij11[1] = -1;
                                                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                                    {
                                                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                        {
                                                                                            j11valid[iij11] = false;
                                                                                            _ij11[1] = iij11;
                                                                                            break;
                                                                                        }
                                                                                    }
                                                                                    j11 = j11array[ij11];
                                                                                    cj11 = cj11array[ij11];
                                                                                    sj11 = sj11array[ij11];
                                                                                    {
                                                                                        IkReal evalcond[9];
                                                                                        IkReal x2976 = IKsin ( j11 );
                                                                                        IkReal x2977 = IKcos ( j11 );
                                                                                        IkReal x2978 = ( ( 1.0 ) * cj7 );
                                                                                        IkReal x2979 = ( cj9 * sj8 );
                                                                                        IkReal x2980 = ( cj10 * cj12 );
                                                                                        IkReal x2981 = ( cj8 * sj9 );
                                                                                        IkReal x2982 = ( r01 * sj12 );
                                                                                        IkReal x2983 = ( cj12 * sj10 );
                                                                                        IkReal x2984 = ( sj7 * sj8 );
                                                                                        IkReal x2985 = ( ( 1.0 ) * sj7 );
                                                                                        IkReal x2986 = ( r10 * sj12 );
                                                                                        IkReal x2987 = ( ( 1.0 ) * sj10 );
                                                                                        IkReal x2988 = ( r11 * sj12 );
                                                                                        IkReal x2989 = ( cj10 * sj12 );
                                                                                        IkReal x2990 = ( r21 * sj12 );
                                                                                        IkReal x2991 = ( cj8 * cj9 );
                                                                                        IkReal x2992 = ( ( 1.0 ) * cj12 );
                                                                                        IkReal x2993 = ( sj10 * sj12 );
                                                                                        IkReal x2994 = ( r20 * x2992 );
                                                                                        IkReal x2995 = ( cj10 * x2977 );
                                                                                        IkReal x2996 = ( r12 * x2976 );
                                                                                        IkReal x2997 = ( ( 1.0 ) * x2977 );
                                                                                        IkReal x2998 = ( r22 * x2976 );
                                                                                        IkReal x2999 = ( r02 * x2976 );
                                                                                        IkReal x3000 = ( x2977 * x2983 );
                                                                                        evalcond[0] = ( ( ( ( -1.0 ) * r22 * x2997 ) ) + ( ( x2976 * x2990 ) ) + ( ( ( -1.0 ) * x2976 * x2994 ) ) );
                                                                                        evalcond[1] = ( ( ( x2976 * x2988 ) ) + cj9 + ( ( ( -1.0 ) * r12 * x2997 ) ) + ( ( ( -1.0 ) * r10 * x2976 * x2992 ) ) );
                                                                                        evalcond[2] = ( ( ( x2976 * x2982 ) ) + ( ( ( -1.0 ) * sj9 ) ) + ( ( ( -1.0 ) * r00 * x2976 * x2992 ) ) + ( ( ( -1.0 ) * r02 * x2997 ) ) );
                                                                                        evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r20 * x2993 ) ) + ( ( r21 * x2977 * x2989 ) ) + ( ( ( -1.0 ) * r20 * x2980 * x2997 ) ) + ( ( cj7 * sj8 ) ) + ( ( cj10 * x2998 ) ) + ( ( r21 * x2983 ) ) );
                                                                                        evalcond[4] = ( ( ( ( -1.0 ) * x2987 * x2998 ) ) + ( ( r20 * x2989 ) ) + ( ( r20 * x3000 ) ) + ( ( ( -1.0 ) * x2977 * x2987 * x2990 ) ) + ( ( ( -1.0 ) * cj8 * x2978 ) ) + x2984 + ( ( r21 * x2980 ) ) );
                                                                                        evalcond[5] = ( ( ( r00 * x2993 ) ) + ( ( x2982 * x2995 ) ) + ( ( sj7 * x2979 ) ) + ( ( r01 * x2983 ) ) + ( ( ( -1.0 ) * x2978 * x2991 ) ) + ( ( ( -1.0 ) * r00 * x2980 * x2997 ) ) + ( ( cj10 * x2999 ) ) );
                                                                                        evalcond[6] = ( ( ( ( -1.0 ) * x2978 * x2981 ) ) + ( ( r11 * x2983 ) ) + ( ( sj9 * x2984 ) ) + ( ( sj10 * x2986 ) ) + ( ( x2988 * x2995 ) ) + ( ( ( -1.0 ) * r10 * x2980 * x2997 ) ) + ( ( cj10 * x2996 ) ) );
                                                                                        evalcond[7] = ( ( ( ( -1.0 ) * x2985 * x2991 ) ) + ( ( r00 * x3000 ) ) + ( ( ( -1.0 ) * x2977 * x2982 * x2987 ) ) + ( ( ( -1.0 ) * x2978 * x2979 ) ) + ( ( ( -1.0 ) * x2987 * x2999 ) ) + ( ( r00 * x2989 ) ) + ( ( r01 * x2980 ) ) );
                                                                                        evalcond[8] = ( ( ( cj10 * x2986 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x2978 ) ) + ( ( r11 * x2980 ) ) + ( ( ( -1.0 ) * x2981 * x2985 ) ) + ( ( ( -1.0 ) * x2987 * x2996 ) ) + ( ( ( -1.0 ) * x2977 * x2987 * x2988 ) ) + ( ( r10 * x3000 ) ) );
                                                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                        {
                                                                                            continue;
                                                                                        }
                                                                                    }

                                                                                    {
                                                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                        vinfos[0].jointtype = 1;
                                                                                        vinfos[0].foffset = j9;
                                                                                        vinfos[0].indices[0] = _ij9[0];
                                                                                        vinfos[0].indices[1] = _ij9[1];
                                                                                        vinfos[0].maxsolutions = _nj9;
                                                                                        vinfos[1].jointtype = 1;
                                                                                        vinfos[1].foffset = j8;
                                                                                        vinfos[1].indices[0] = _ij8[0];
                                                                                        vinfos[1].indices[1] = _ij8[1];
                                                                                        vinfos[1].maxsolutions = _nj8;
                                                                                        vinfos[2].jointtype = 1;
                                                                                        vinfos[2].foffset = j7;
                                                                                        vinfos[2].indices[0] = _ij7[0];
                                                                                        vinfos[2].indices[1] = _ij7[1];
                                                                                        vinfos[2].maxsolutions = _nj7;
                                                                                        vinfos[3].jointtype = 1;
                                                                                        vinfos[3].foffset = j10;
                                                                                        vinfos[3].indices[0] = _ij10[0];
                                                                                        vinfos[3].indices[1] = _ij10[1];
                                                                                        vinfos[3].maxsolutions = _nj10;
                                                                                        vinfos[4].jointtype = 1;
                                                                                        vinfos[4].foffset = j11;
                                                                                        vinfos[4].indices[0] = _ij11[0];
                                                                                        vinfos[4].indices[1] = _ij11[1];
                                                                                        vinfos[4].maxsolutions = _nj11;
                                                                                        vinfos[5].jointtype = 1;
                                                                                        vinfos[5].foffset = j12;
                                                                                        vinfos[5].indices[0] = _ij12[0];
                                                                                        vinfos[5].indices[1] = _ij12[1];
                                                                                        vinfos[5].maxsolutions = _nj12;
                                                                                        std::vector<int> vfree ( 0 );
                                                                                        solutions.AddSolution ( vinfos, vfree );
                                                                                    }
                                                                                }
                                                                            }

                                                                        }

                                                                    }

                                                                } else
                                                                {
                                                                    {
                                                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                                                        bool j11valid[1] = {false};
                                                                        _nj11 = 1;
                                                                        IkReal x3001 = ( ( 1.0 ) * cj12 );
                                                                        CheckValue<IkReal> x3002 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * r01 * x3001 ) ) + ( ( ( -1.0 ) * r00 * sj12 ) ) ) ), -1 );
                                                                        if ( !x3002.valid ) {
                                                                            continue;
                                                                        }
                                                                        CheckValue<IkReal> x3003 = IKatan2WithCheck ( IkReal ( ( cj9 * r22 ) ), IkReal ( ( ( ( ( -1.0 ) * cj9 * r20 * x3001 ) ) + ( ( cj9 * r21 * sj12 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                                        if ( !x3003.valid ) {
                                                                            continue;
                                                                        }
                                                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x3002.value ) ) ) + ( x3003.value ) );
                                                                        sj11array[0] = IKsin ( j11array[0] );
                                                                        cj11array[0] = IKcos ( j11array[0] );
                                                                        if ( j11array[0] > IKPI )
                                                                        {
                                                                            j11array[0] -= IK2PI;
                                                                        }
                                                                        else if ( j11array[0] < -IKPI )
                                                                        {   j11array[0] += IK2PI;
                                                                        }
                                                                        j11valid[0] = true;
                                                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                                        {
                                                                            if ( !j11valid[ij11] )
                                                                            {
                                                                                continue;
                                                                            }
                                                                            _ij11[0] = ij11;
                                                                            _ij11[1] = -1;
                                                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                                            {
                                                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                                                {
                                                                                    j11valid[iij11] = false;
                                                                                    _ij11[1] = iij11;
                                                                                    break;
                                                                                }
                                                                            }
                                                                            j11 = j11array[ij11];
                                                                            cj11 = cj11array[ij11];
                                                                            sj11 = sj11array[ij11];
                                                                            {
                                                                                IkReal evalcond[9];
                                                                                IkReal x3004 = IKsin ( j11 );
                                                                                IkReal x3005 = IKcos ( j11 );
                                                                                IkReal x3006 = ( ( 1.0 ) * cj7 );
                                                                                IkReal x3007 = ( cj9 * sj8 );
                                                                                IkReal x3008 = ( cj10 * cj12 );
                                                                                IkReal x3009 = ( cj8 * sj9 );
                                                                                IkReal x3010 = ( r01 * sj12 );
                                                                                IkReal x3011 = ( cj12 * sj10 );
                                                                                IkReal x3012 = ( sj7 * sj8 );
                                                                                IkReal x3013 = ( ( 1.0 ) * sj7 );
                                                                                IkReal x3014 = ( r10 * sj12 );
                                                                                IkReal x3015 = ( ( 1.0 ) * sj10 );
                                                                                IkReal x3016 = ( r11 * sj12 );
                                                                                IkReal x3017 = ( cj10 * sj12 );
                                                                                IkReal x3018 = ( r21 * sj12 );
                                                                                IkReal x3019 = ( cj8 * cj9 );
                                                                                IkReal x3020 = ( ( 1.0 ) * cj12 );
                                                                                IkReal x3021 = ( sj10 * sj12 );
                                                                                IkReal x3022 = ( r20 * x3020 );
                                                                                IkReal x3023 = ( cj10 * x3005 );
                                                                                IkReal x3024 = ( r12 * x3004 );
                                                                                IkReal x3025 = ( ( 1.0 ) * x3005 );
                                                                                IkReal x3026 = ( r22 * x3004 );
                                                                                IkReal x3027 = ( r02 * x3004 );
                                                                                IkReal x3028 = ( x3005 * x3011 );
                                                                                evalcond[0] = ( ( ( x3004 * x3018 ) ) + ( ( ( -1.0 ) * x3004 * x3022 ) ) + ( ( ( -1.0 ) * r22 * x3025 ) ) );
                                                                                evalcond[1] = ( ( ( ( -1.0 ) * r12 * x3025 ) ) + ( ( ( -1.0 ) * r10 * x3004 * x3020 ) ) + cj9 + ( ( x3004 * x3016 ) ) );
                                                                                evalcond[2] = ( ( ( ( -1.0 ) * sj9 ) ) + ( ( x3004 * x3010 ) ) + ( ( ( -1.0 ) * r00 * x3004 * x3020 ) ) + ( ( ( -1.0 ) * r02 * x3025 ) ) );
                                                                                evalcond[3] = ( ( ( cj8 * sj7 ) ) + ( ( r21 * x3005 * x3017 ) ) + ( ( cj10 * x3026 ) ) + ( ( r20 * x3021 ) ) + ( ( ( -1.0 ) * r20 * x3008 * x3025 ) ) + ( ( cj7 * sj8 ) ) + ( ( r21 * x3011 ) ) );
                                                                                evalcond[4] = ( ( ( ( -1.0 ) * x3015 * x3026 ) ) + x3012 + ( ( ( -1.0 ) * x3005 * x3015 * x3018 ) ) + ( ( r20 * x3028 ) ) + ( ( r20 * x3017 ) ) + ( ( ( -1.0 ) * cj8 * x3006 ) ) + ( ( r21 * x3008 ) ) );
                                                                                evalcond[5] = ( ( ( r01 * x3011 ) ) + ( ( sj7 * x3007 ) ) + ( ( cj10 * x3027 ) ) + ( ( x3010 * x3023 ) ) + ( ( ( -1.0 ) * r00 * x3008 * x3025 ) ) + ( ( r00 * x3021 ) ) + ( ( ( -1.0 ) * x3006 * x3019 ) ) );
                                                                                evalcond[6] = ( ( ( sj9 * x3012 ) ) + ( ( cj10 * x3024 ) ) + ( ( sj10 * x3014 ) ) + ( ( r11 * x3011 ) ) + ( ( x3016 * x3023 ) ) + ( ( ( -1.0 ) * r10 * x3008 * x3025 ) ) + ( ( ( -1.0 ) * x3006 * x3009 ) ) );
                                                                                evalcond[7] = ( ( ( r00 * x3017 ) ) + ( ( r01 * x3008 ) ) + ( ( ( -1.0 ) * x3015 * x3027 ) ) + ( ( ( -1.0 ) * x3005 * x3010 * x3015 ) ) + ( ( r00 * x3028 ) ) + ( ( ( -1.0 ) * x3006 * x3007 ) ) + ( ( ( -1.0 ) * x3013 * x3019 ) ) );
                                                                                evalcond[8] = ( ( ( r10 * x3028 ) ) + ( ( ( -1.0 ) * x3015 * x3024 ) ) + ( ( ( -1.0 ) * x3005 * x3015 * x3016 ) ) + ( ( ( -1.0 ) * sj8 * sj9 * x3006 ) ) + ( ( r11 * x3008 ) ) + ( ( cj10 * x3014 ) ) + ( ( ( -1.0 ) * x3009 * x3013 ) ) );
                                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[8] ) > IKFAST_EVALCOND_THRESH  )
                                                                                {
                                                                                    continue;
                                                                                }
                                                                            }

                                                                            {
                                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                                vinfos[0].jointtype = 1;
                                                                                vinfos[0].foffset = j9;
                                                                                vinfos[0].indices[0] = _ij9[0];
                                                                                vinfos[0].indices[1] = _ij9[1];
                                                                                vinfos[0].maxsolutions = _nj9;
                                                                                vinfos[1].jointtype = 1;
                                                                                vinfos[1].foffset = j8;
                                                                                vinfos[1].indices[0] = _ij8[0];
                                                                                vinfos[1].indices[1] = _ij8[1];
                                                                                vinfos[1].maxsolutions = _nj8;
                                                                                vinfos[2].jointtype = 1;
                                                                                vinfos[2].foffset = j7;
                                                                                vinfos[2].indices[0] = _ij7[0];
                                                                                vinfos[2].indices[1] = _ij7[1];
                                                                                vinfos[2].maxsolutions = _nj7;
                                                                                vinfos[3].jointtype = 1;
                                                                                vinfos[3].foffset = j10;
                                                                                vinfos[3].indices[0] = _ij10[0];
                                                                                vinfos[3].indices[1] = _ij10[1];
                                                                                vinfos[3].maxsolutions = _nj10;
                                                                                vinfos[4].jointtype = 1;
                                                                                vinfos[4].foffset = j11;
                                                                                vinfos[4].indices[0] = _ij11[0];
                                                                                vinfos[4].indices[1] = _ij11[1];
                                                                                vinfos[4].maxsolutions = _nj11;
                                                                                vinfos[5].jointtype = 1;
                                                                                vinfos[5].foffset = j12;
                                                                                vinfos[5].indices[0] = _ij12[0];
                                                                                vinfos[5].indices[1] = _ij12[1];
                                                                                vinfos[5].maxsolutions = _nj12;
                                                                                std::vector<int> vfree ( 0 );
                                                                                solutions.AddSolution ( vinfos, vfree );
                                                                            }
                                                                        }
                                                                    }

                                                                }

                                                            }
                                                        }
                                                    }

                                                }

                                            }

                                        } else
                                        {
                                            {
                                                IkReal j11array[1], cj11array[1], sj11array[1];
                                                bool j11valid[1] = {false};
                                                _nj11 = 1;
                                                IkReal x3029 = cj12 * cj12;
                                                IkReal x3030 = r21 * r21;
                                                IkReal x3031 = r20 * r20;
                                                IkReal x3032 = ( r21 * sj12 );
                                                IkReal x3033 = ( cj7 * sj8 );
                                                IkReal x3034 = ( cj12 * sj10 );
                                                IkReal x3035 = ( ( 1.0 ) * cj10 );
                                                IkReal x3036 = ( cj8 * sj7 );
                                                IkReal x3037 = ( ( 2.0 ) * r20 );
                                                IkReal x3038 = ( r21 * sj10 );
                                                IkReal x3039 = ( ( 1.0 ) * x3031 );
                                                IkReal x3040 = ( cj10 * x3029 );
                                                IkReal x3041 = ( ( 1.0 ) * cj12 * r20 );
                                                CheckValue<IkReal> x3042 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * x3029 * x3031 * x3035 ) ) + ( ( ( -1.0 ) * x3030 * x3035 ) ) + ( ( x3030 * x3040 ) ) + ( ( ( -1.0 ) * x3035 * ( r22 * r22 ) ) ) + ( ( cj10 * cj12 * x3032 * x3037 ) ) ) ), -1 );
                                                if ( !x3042.valid ) {
                                                    continue;
                                                }
                                                CheckValue<IkReal> x3043 = IKatan2WithCheck ( IkReal ( ( ( ( r21 * r22 * x3034 ) ) + ( ( r22 * x3036 ) ) + ( ( r22 * x3033 ) ) + ( ( r20 * r22 * sj10 * sj12 ) ) ) ), IkReal ( ( ( ( ( -1.0 ) * x3033 * x3041 ) ) + ( ( ( -1.0 ) * sj12 * x3034 * x3039 ) ) + ( ( ( -1.0 ) * x3029 * x3037 * x3038 ) ) + ( ( sj12 * x3030 * x3034 ) ) + ( ( x3032 * x3036 ) ) + ( ( x3032 * x3033 ) ) + ( ( r20 * x3038 ) ) + ( ( ( -1.0 ) * x3036 * x3041 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                                if ( !x3043.valid ) {
                                                    continue;
                                                }
                                                j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x3042.value ) ) ) + ( x3043.value ) );
                                                sj11array[0] = IKsin ( j11array[0] );
                                                cj11array[0] = IKcos ( j11array[0] );
                                                if ( j11array[0] > IKPI )
                                                {
                                                    j11array[0] -= IK2PI;
                                                }
                                                else if ( j11array[0] < -IKPI )
                                                {   j11array[0] += IK2PI;
                                                }
                                                j11valid[0] = true;
                                                for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                                {
                                                    if ( !j11valid[ij11] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij11[0] = ij11;
                                                    _ij11[1] = -1;
                                                    for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                                    {
                                                        if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j11valid[iij11] = false;
                                                            _ij11[1] = iij11;
                                                            break;
                                                        }
                                                    }
                                                    j11 = j11array[ij11];
                                                    cj11 = cj11array[ij11];
                                                    sj11 = sj11array[ij11];
                                                    {
                                                        IkReal evalcond[3];
                                                        IkReal x3044 = IKsin ( j11 );
                                                        IkReal x3045 = IKcos ( j11 );
                                                        IkReal x3046 = ( r21 * sj12 );
                                                        IkReal x3047 = ( r20 * sj10 );
                                                        IkReal x3048 = ( cj12 * r21 );
                                                        IkReal x3049 = ( ( 1.0 ) * sj10 );
                                                        IkReal x3050 = ( cj10 * x3045 );
                                                        IkReal x3051 = ( ( 1.0 ) * cj12 * r20 );
                                                        IkReal x3052 = ( r22 * x3044 );
                                                        evalcond[0] = ( ( ( ( -1.0 ) * r22 * x3045 ) ) + ( ( ( -1.0 ) * x3044 * x3051 ) ) + ( ( x3044 * x3046 ) ) );
                                                        evalcond[1] = ( ( ( cj10 * x3052 ) ) + ( ( cj8 * sj7 ) ) + ( ( sj10 * x3048 ) ) + ( ( sj12 * x3047 ) ) + ( ( ( -1.0 ) * x3050 * x3051 ) ) + ( ( cj7 * sj8 ) ) + ( ( x3046 * x3050 ) ) );
                                                        evalcond[2] = ( ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( cj10 * r20 * sj12 ) ) + ( ( cj10 * x3048 ) ) + ( ( ( -1.0 ) * x3045 * x3046 * x3049 ) ) + ( ( sj7 * sj8 ) ) + ( ( ( -1.0 ) * x3049 * x3052 ) ) + ( ( cj12 * x3045 * x3047 ) ) );
                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        IkReal j9array[1], cj9array[1], sj9array[1];
                                                        bool j9valid[1] = {false};
                                                        _nj9 = 1;
                                                        IkReal x3053 = ( sj11 * sj12 );
                                                        IkReal x3054 = ( cj12 * sj11 );
                                                        if ( IKabs ( ( ( ( ( -1.0 ) *r00 * x3054 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x3053 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( cj11 * r12 ) ) + ( ( r10 * x3054 ) ) + ( ( ( -1.0 ) *r11 * x3053 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( ( -1.0 ) *r00 * x3054 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x3053 ) ) ) ) + IKsqr ( ( ( ( cj11 * r12 ) ) + ( ( r10 * x3054 ) ) + ( ( ( -1.0 ) *r11 * x3053 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                            continue;
                                                        j9array[0] = IKatan2 ( ( ( ( ( -1.0 ) * r00 * x3054 ) ) + ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( r01 * x3053 ) ) ), ( ( ( cj11 * r12 ) ) + ( ( r10 * x3054 ) ) + ( ( ( -1.0 ) * r11 * x3053 ) ) ) );
                                                        sj9array[0] = IKsin ( j9array[0] );
                                                        cj9array[0] = IKcos ( j9array[0] );
                                                        if ( j9array[0] > IKPI )
                                                        {
                                                            j9array[0] -= IK2PI;
                                                        }
                                                        else if ( j9array[0] < -IKPI )
                                                        {   j9array[0] += IK2PI;
                                                        }
                                                        j9valid[0] = true;
                                                        for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                        {
                                                            if ( !j9valid[ij9] )
                                                            {
                                                                continue;
                                                            }
                                                            _ij9[0] = ij9;
                                                            _ij9[1] = -1;
                                                            for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                            {
                                                                if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                                {
                                                                    j9valid[iij9] = false;
                                                                    _ij9[1] = iij9;
                                                                    break;
                                                                }
                                                            }
                                                            j9 = j9array[ij9];
                                                            cj9 = cj9array[ij9];
                                                            sj9 = sj9array[ij9];
                                                            {
                                                                IkReal evalcond[8];
                                                                IkReal x3055 = IKcos ( j9 );
                                                                IkReal x3056 = IKsin ( j9 );
                                                                IkReal x3057 = ( cj10 * r11 );
                                                                IkReal x3058 = ( cj11 * sj12 );
                                                                IkReal x3059 = ( sj11 * sj12 );
                                                                IkReal x3060 = ( cj10 * r00 );
                                                                IkReal x3061 = ( ( 1.0 ) * sj11 );
                                                                IkReal x3062 = ( cj12 * r00 );
                                                                IkReal x3063 = ( r10 * sj12 );
                                                                IkReal x3064 = ( ( 1.0 ) * cj11 );
                                                                IkReal x3065 = ( cj12 * r10 );
                                                                IkReal x3066 = ( ( 0.5723 ) * sj7 );
                                                                IkReal x3067 = ( r11 * sj10 );
                                                                IkReal x3068 = ( cj12 * r01 );
                                                                IkReal x3069 = ( ( 0.612 ) * cj8 );
                                                                IkReal x3070 = ( cj11 * sj10 );
                                                                IkReal x3071 = ( ( 1.0 ) * cj7 );
                                                                IkReal x3072 = ( cj10 * sj11 );
                                                                IkReal x3073 = ( r00 * sj12 );
                                                                IkReal x3074 = ( ( 1.0 ) * cj8 * sj7 );
                                                                IkReal x3075 = ( sj8 * x3055 );
                                                                IkReal x3076 = ( ( 0.5723 ) * cj7 * cj8 );
                                                                IkReal x3077 = ( sj8 * x3056 );
                                                                IkReal x3078 = ( x3056 * x3071 );
                                                                evalcond[0] = ( x3055 + ( ( ( -1.0 ) * x3061 * x3065 ) ) + ( ( ( -1.0 ) * r12 * x3064 ) ) + ( ( r11 * x3059 ) ) );
                                                                evalcond[1] = ( ( ( ( -1.0 ) * x3056 ) ) + ( ( ( -1.0 ) * x3061 * x3062 ) ) + ( ( ( -1.0 ) * r02 * x3064 ) ) + ( ( r01 * x3059 ) ) );
                                                                evalcond[2] = ( ( ( ( -0.1157 ) * x3073 ) ) + ( ( ( -1.0 ) * x3066 * x3075 ) ) + ( ( ( -0.163941 ) * x3056 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( x3055 * x3069 ) ) + ( ( x3055 * x3076 ) ) + ( ( ( -0.1157 ) * x3068 ) ) );
                                                                evalcond[3] = ( ( ( ( -1.0 ) * x3066 * x3077 ) ) + ( ( ( -0.1157 ) * cj12 * r11 ) ) + ( ( x3056 * x3076 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( x3056 * x3069 ) ) + ( ( ( 0.163941 ) * x3055 ) ) + ( ( ( -0.1157 ) * x3063 ) ) );
                                                                evalcond[4] = ( ( ( sj7 * x3075 ) ) + ( ( ( -1.0 ) * cj8 * x3055 * x3071 ) ) + ( ( ( -1.0 ) * cj12 * x3060 * x3064 ) ) + ( ( cj10 * r01 * x3058 ) ) + ( ( sj10 * x3073 ) ) + ( ( sj10 * x3068 ) ) + ( ( r02 * x3072 ) ) );
                                                                evalcond[5] = ( ( ( sj7 * x3077 ) ) + ( ( x3057 * x3058 ) ) + ( ( r12 * x3072 ) ) + ( ( ( -1.0 ) * cj8 * x3078 ) ) + ( ( ( -1.0 ) * cj10 * x3064 * x3065 ) ) + ( ( sj10 * x3063 ) ) + ( ( cj12 * x3067 ) ) );
                                                                evalcond[6] = ( ( ( x3062 * x3070 ) ) + ( ( ( -1.0 ) * r01 * sj10 * x3058 ) ) + ( ( ( -1.0 ) * x3055 * x3074 ) ) + ( ( ( -1.0 ) * x3071 * x3075 ) ) + ( ( sj12 * x3060 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x3061 ) ) + ( ( cj10 * x3068 ) ) );
                                                                evalcond[7] = ( ( ( ( -1.0 ) * x3056 * x3074 ) ) + ( ( cj12 * x3057 ) ) + ( ( x3065 * x3070 ) ) + ( ( ( -1.0 ) * x3071 * x3077 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x3061 ) ) + ( ( ( -1.0 ) * x3058 * x3067 ) ) + ( ( cj10 * x3063 ) ) );
                                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                                {
                                                                    continue;
                                                                }
                                                            }

                                                            {
                                                                std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                                vinfos[0].jointtype = 1;
                                                                vinfos[0].foffset = j9;
                                                                vinfos[0].indices[0] = _ij9[0];
                                                                vinfos[0].indices[1] = _ij9[1];
                                                                vinfos[0].maxsolutions = _nj9;
                                                                vinfos[1].jointtype = 1;
                                                                vinfos[1].foffset = j8;
                                                                vinfos[1].indices[0] = _ij8[0];
                                                                vinfos[1].indices[1] = _ij8[1];
                                                                vinfos[1].maxsolutions = _nj8;
                                                                vinfos[2].jointtype = 1;
                                                                vinfos[2].foffset = j7;
                                                                vinfos[2].indices[0] = _ij7[0];
                                                                vinfos[2].indices[1] = _ij7[1];
                                                                vinfos[2].maxsolutions = _nj7;
                                                                vinfos[3].jointtype = 1;
                                                                vinfos[3].foffset = j10;
                                                                vinfos[3].indices[0] = _ij10[0];
                                                                vinfos[3].indices[1] = _ij10[1];
                                                                vinfos[3].maxsolutions = _nj10;
                                                                vinfos[4].jointtype = 1;
                                                                vinfos[4].foffset = j11;
                                                                vinfos[4].indices[0] = _ij11[0];
                                                                vinfos[4].indices[1] = _ij11[1];
                                                                vinfos[4].maxsolutions = _nj11;
                                                                vinfos[5].jointtype = 1;
                                                                vinfos[5].foffset = j12;
                                                                vinfos[5].indices[0] = _ij12[0];
                                                                vinfos[5].indices[1] = _ij12[1];
                                                                vinfos[5].maxsolutions = _nj12;
                                                                std::vector<int> vfree ( 0 );
                                                                solutions.AddSolution ( vinfos, vfree );
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                        }

                                    }

                                } else
                                {
                                    {
                                        IkReal j11array[1], cj11array[1], sj11array[1];
                                        bool j11valid[1] = {false};
                                        _nj11 = 1;
                                        IkReal x3079 = r21 * r21;
                                        IkReal x3080 = cj12 * cj12;
                                        IkReal x3081 = r20 * r20;
                                        IkReal x3082 = ( sj7 * sj8 );
                                        IkReal x3083 = ( r21 * sj12 );
                                        IkReal x3084 = ( cj12 * r20 );
                                        IkReal x3085 = ( cj10 * cj12 );
                                        IkReal x3086 = ( cj10 * r20 * r21 );
                                        IkReal x3087 = ( ( 1.0 ) * cj7 * cj8 );
                                        IkReal x3088 = ( sj10 * x3079 );
                                        CheckValue<IkReal> x3089 = IKPowWithIntegerCheck ( IKsign ( ( ( ( ( -1.0 ) * x3080 * x3088 ) ) + x3088 + ( ( sj10 * ( r22 * r22 ) ) ) + ( ( sj10 * x3080 * x3081 ) ) + ( ( ( -2.0 ) * sj10 * x3083 * x3084 ) ) ) ), -1 );
                                        if ( !x3089.valid ) {
                                            continue;
                                        }
                                        CheckValue<IkReal> x3090 = IKatan2WithCheck ( IkReal ( ( ( ( cj10 * r20 * r22 * sj12 ) ) + ( ( ( -1.0 ) * r22 * x3087 ) ) + ( ( r22 * x3082 ) ) + ( ( r21 * r22 * x3085 ) ) ) ), IkReal ( ( x3086 + ( ( ( -1.0 ) * x3083 * x3087 ) ) + ( ( x3082 * x3083 ) ) + ( ( cj7 * cj8 * x3084 ) ) + ( ( ( -1.0 ) * x3082 * x3084 ) ) + ( ( ( -2.0 ) * x3080 * x3086 ) ) + ( ( sj12 * x3079 * x3085 ) ) + ( ( ( -1.0 ) * sj12 * x3081 * x3085 ) ) ) ), IKFAST_ATAN2_MAGTHRESH );
                                        if ( !x3090.valid ) {
                                            continue;
                                        }
                                        j11array[0] = ( ( -1.5707963267949 ) + ( ( ( 1.5707963267949 ) * ( x3089.value ) ) ) + ( x3090.value ) );
                                        sj11array[0] = IKsin ( j11array[0] );
                                        cj11array[0] = IKcos ( j11array[0] );
                                        if ( j11array[0] > IKPI )
                                        {
                                            j11array[0] -= IK2PI;
                                        }
                                        else if ( j11array[0] < -IKPI )
                                        {   j11array[0] += IK2PI;
                                        }
                                        j11valid[0] = true;
                                        for ( int ij11 = 0; ij11 < 1; ++ij11 )
                                        {
                                            if ( !j11valid[ij11] )
                                            {
                                                continue;
                                            }
                                            _ij11[0] = ij11;
                                            _ij11[1] = -1;
                                            for ( int iij11 = ij11 + 1; iij11 < 1; ++iij11 )
                                            {
                                                if ( j11valid[iij11] && IKabs ( cj11array[ij11] - cj11array[iij11] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj11array[ij11] - sj11array[iij11] ) < IKFAST_SOLUTION_THRESH )
                                                {
                                                    j11valid[iij11] = false;
                                                    _ij11[1] = iij11;
                                                    break;
                                                }
                                            }
                                            j11 = j11array[ij11];
                                            cj11 = cj11array[ij11];
                                            sj11 = sj11array[ij11];
                                            {
                                                IkReal evalcond[3];
                                                IkReal x3091 = IKsin ( j11 );
                                                IkReal x3092 = IKcos ( j11 );
                                                IkReal x3093 = ( r21 * sj12 );
                                                IkReal x3094 = ( r20 * sj10 );
                                                IkReal x3095 = ( cj12 * r21 );
                                                IkReal x3096 = ( ( 1.0 ) * sj10 );
                                                IkReal x3097 = ( cj10 * x3092 );
                                                IkReal x3098 = ( ( 1.0 ) * cj12 * r20 );
                                                IkReal x3099 = ( r22 * x3091 );
                                                evalcond[0] = ( ( ( x3091 * x3093 ) ) + ( ( ( -1.0 ) * x3091 * x3098 ) ) + ( ( ( -1.0 ) * r22 * x3092 ) ) );
                                                evalcond[1] = ( ( ( cj8 * sj7 ) ) + ( ( sj12 * x3094 ) ) + ( ( sj10 * x3095 ) ) + ( ( x3093 * x3097 ) ) + ( ( cj10 * x3099 ) ) + ( ( cj7 * sj8 ) ) + ( ( ( -1.0 ) * x3097 * x3098 ) ) );
                                                evalcond[2] = ( ( ( ( -1.0 ) * x3092 * x3093 * x3096 ) ) + ( ( ( -1.0 ) * cj7 * cj8 ) ) + ( ( cj12 * x3092 * x3094 ) ) + ( ( cj10 * r20 * sj12 ) ) + ( ( ( -1.0 ) * x3096 * x3099 ) ) + ( ( cj10 * x3095 ) ) + ( ( sj7 * sj8 ) ) );
                                                if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  )
                                                {
                                                    continue;
                                                }
                                            }

                                            {
                                                IkReal j9array[1], cj9array[1], sj9array[1];
                                                bool j9valid[1] = {false};
                                                _nj9 = 1;
                                                IkReal x3100 = ( sj11 * sj12 );
                                                IkReal x3101 = ( cj12 * sj11 );
                                                if ( IKabs ( ( ( ( ( -1.0 ) *r00 * x3101 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x3100 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( ( ( ( r10 * x3101 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x3100 ) ) ) ) < IKFAST_ATAN2_MAGTHRESH && IKabs ( IKsqr ( ( ( ( ( -1.0 ) *r00 * x3101 ) ) + ( ( ( -1.0 ) *cj11 * r02 ) ) + ( ( r01 * x3100 ) ) ) ) + IKsqr ( ( ( ( r10 * x3101 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) *r11 * x3100 ) ) ) ) - 1 ) <= IKFAST_SINCOS_THRESH )
                                                    continue;
                                                j9array[0] = IKatan2 ( ( ( ( ( -1.0 ) * r00 * x3101 ) ) + ( ( ( -1.0 ) * cj11 * r02 ) ) + ( ( r01 * x3100 ) ) ), ( ( ( r10 * x3101 ) ) + ( ( cj11 * r12 ) ) + ( ( ( -1.0 ) * r11 * x3100 ) ) ) );
                                                sj9array[0] = IKsin ( j9array[0] );
                                                cj9array[0] = IKcos ( j9array[0] );
                                                if ( j9array[0] > IKPI )
                                                {
                                                    j9array[0] -= IK2PI;
                                                }
                                                else if ( j9array[0] < -IKPI )
                                                {   j9array[0] += IK2PI;
                                                }
                                                j9valid[0] = true;
                                                for ( int ij9 = 0; ij9 < 1; ++ij9 )
                                                {
                                                    if ( !j9valid[ij9] )
                                                    {
                                                        continue;
                                                    }
                                                    _ij9[0] = ij9;
                                                    _ij9[1] = -1;
                                                    for ( int iij9 = ij9 + 1; iij9 < 1; ++iij9 )
                                                    {
                                                        if ( j9valid[iij9] && IKabs ( cj9array[ij9] - cj9array[iij9] ) < IKFAST_SOLUTION_THRESH && IKabs ( sj9array[ij9] - sj9array[iij9] ) < IKFAST_SOLUTION_THRESH )
                                                        {
                                                            j9valid[iij9] = false;
                                                            _ij9[1] = iij9;
                                                            break;
                                                        }
                                                    }
                                                    j9 = j9array[ij9];
                                                    cj9 = cj9array[ij9];
                                                    sj9 = sj9array[ij9];
                                                    {
                                                        IkReal evalcond[8];
                                                        IkReal x3102 = IKcos ( j9 );
                                                        IkReal x3103 = IKsin ( j9 );
                                                        IkReal x3104 = ( cj10 * r11 );
                                                        IkReal x3105 = ( cj11 * sj12 );
                                                        IkReal x3106 = ( sj11 * sj12 );
                                                        IkReal x3107 = ( cj10 * r00 );
                                                        IkReal x3108 = ( ( 1.0 ) * sj11 );
                                                        IkReal x3109 = ( cj12 * r00 );
                                                        IkReal x3110 = ( r10 * sj12 );
                                                        IkReal x3111 = ( ( 1.0 ) * cj11 );
                                                        IkReal x3112 = ( cj12 * r10 );
                                                        IkReal x3113 = ( ( 0.5723 ) * sj7 );
                                                        IkReal x3114 = ( r11 * sj10 );
                                                        IkReal x3115 = ( cj12 * r01 );
                                                        IkReal x3116 = ( ( 0.612 ) * cj8 );
                                                        IkReal x3117 = ( cj11 * sj10 );
                                                        IkReal x3118 = ( ( 1.0 ) * cj7 );
                                                        IkReal x3119 = ( cj10 * sj11 );
                                                        IkReal x3120 = ( r00 * sj12 );
                                                        IkReal x3121 = ( ( 1.0 ) * cj8 * sj7 );
                                                        IkReal x3122 = ( sj8 * x3102 );
                                                        IkReal x3123 = ( ( 0.5723 ) * cj7 * cj8 );
                                                        IkReal x3124 = ( sj8 * x3103 );
                                                        IkReal x3125 = ( x3103 * x3118 );
                                                        evalcond[0] = ( x3102 + ( ( r11 * x3106 ) ) + ( ( ( -1.0 ) * r12 * x3111 ) ) + ( ( ( -1.0 ) * x3108 * x3112 ) ) );
                                                        evalcond[1] = ( ( ( ( -1.0 ) * r02 * x3111 ) ) + ( ( ( -1.0 ) * x3103 ) ) + ( ( r01 * x3106 ) ) + ( ( ( -1.0 ) * x3108 * x3109 ) ) );
                                                        evalcond[2] = ( ( ( ( -0.1157 ) * x3120 ) ) + ( ( ( -1.0 ) * x3113 * x3122 ) ) + ( ( ( -0.1157 ) * x3115 ) ) + ( ( x3102 * x3123 ) ) + ( ( x3102 * x3116 ) ) + ( ( ( -1.0 ) * px ) ) + ( ( ( -0.163941 ) * x3103 ) ) );
                                                        evalcond[3] = ( ( ( ( -0.1157 ) * cj12 * r11 ) ) + ( ( ( -1.0 ) * x3113 * x3124 ) ) + ( ( ( -0.1157 ) * x3110 ) ) + ( ( x3103 * x3123 ) ) + ( ( x3103 * x3116 ) ) + ( ( ( -1.0 ) * py ) ) + ( ( ( 0.163941 ) * x3102 ) ) );
                                                        evalcond[4] = ( ( ( sj7 * x3122 ) ) + ( ( r02 * x3119 ) ) + ( ( sj10 * x3115 ) ) + ( ( sj10 * x3120 ) ) + ( ( ( -1.0 ) * cj8 * x3102 * x3118 ) ) + ( ( cj10 * r01 * x3105 ) ) + ( ( ( -1.0 ) * cj12 * x3107 * x3111 ) ) );
                                                        evalcond[5] = ( ( ( cj12 * x3114 ) ) + ( ( r12 * x3119 ) ) + ( ( sj7 * x3124 ) ) + ( ( sj10 * x3110 ) ) + ( ( ( -1.0 ) * cj10 * x3111 * x3112 ) ) + ( ( ( -1.0 ) * cj8 * x3125 ) ) + ( ( x3104 * x3105 ) ) );
                                                        evalcond[6] = ( ( ( cj10 * x3115 ) ) + ( ( ( -1.0 ) * x3102 * x3121 ) ) + ( ( sj12 * x3107 ) ) + ( ( ( -1.0 ) * r01 * sj10 * x3105 ) ) + ( ( x3109 * x3117 ) ) + ( ( ( -1.0 ) * x3118 * x3122 ) ) + ( ( ( -1.0 ) * r02 * sj10 * x3108 ) ) );
                                                        evalcond[7] = ( ( ( cj10 * x3110 ) ) + ( ( cj12 * x3104 ) ) + ( ( ( -1.0 ) * x3105 * x3114 ) ) + ( ( x3112 * x3117 ) ) + ( ( ( -1.0 ) * x3103 * x3121 ) ) + ( ( ( -1.0 ) * x3118 * x3124 ) ) + ( ( ( -1.0 ) * r12 * sj10 * x3108 ) ) );
                                                        if ( IKabs ( evalcond[0] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[1] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[2] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[3] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[4] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[5] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[6] ) > IKFAST_EVALCOND_THRESH  || IKabs ( evalcond[7] ) > IKFAST_EVALCOND_THRESH  )
                                                        {
                                                            continue;
                                                        }
                                                    }

                                                    {
                                                        std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos ( 6 );
                                                        vinfos[0].jointtype = 1;
                                                        vinfos[0].foffset = j9;
                                                        vinfos[0].indices[0] = _ij9[0];
                                                        vinfos[0].indices[1] = _ij9[1];
                                                        vinfos[0].maxsolutions = _nj9;
                                                        vinfos[1].jointtype = 1;
                                                        vinfos[1].foffset = j8;
                                                        vinfos[1].indices[0] = _ij8[0];
                                                        vinfos[1].indices[1] = _ij8[1];
                                                        vinfos[1].maxsolutions = _nj8;
                                                        vinfos[2].jointtype = 1;
                                                        vinfos[2].foffset = j7;
                                                        vinfos[2].indices[0] = _ij7[0];
                                                        vinfos[2].indices[1] = _ij7[1];
                                                        vinfos[2].maxsolutions = _nj7;
                                                        vinfos[3].jointtype = 1;
                                                        vinfos[3].foffset = j10;
                                                        vinfos[3].indices[0] = _ij10[0];
                                                        vinfos[3].indices[1] = _ij10[1];
                                                        vinfos[3].maxsolutions = _nj10;
                                                        vinfos[4].jointtype = 1;
                                                        vinfos[4].foffset = j11;
                                                        vinfos[4].indices[0] = _ij11[0];
                                                        vinfos[4].indices[1] = _ij11[1];
                                                        vinfos[4].maxsolutions = _nj11;
                                                        vinfos[5].jointtype = 1;
                                                        vinfos[5].foffset = j12;
                                                        vinfos[5].indices[0] = _ij12[0];
                                                        vinfos[5].indices[1] = _ij12[1];
                                                        vinfos[5].maxsolutions = _nj12;
                                                        std::vector<int> vfree ( 0 );
                                                        solutions.AddSolution ( vinfos, vfree );
                                                    }
                                                }
                                            }
                                        }
                                    }

                                }

                            }
                        }
                    }

                }

            }
        }
    }
// [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1), (3, 0), (3, 1)] (original are [(0, 0), (0, 1), (1, 0), (1, 1), (2, 0), (2, 1)])
    static inline bool checkconsistency8 ( const IkReal* Breal )
    {
        IkReal norm = 0.1;
        for ( int i = 0; i < 7; ++i ) {
            norm += IKabs ( Breal[i] );
        }
        // HACK should be 1e-5*norm
        IkReal tol = 1e-2 * norm; // have to increase the threshold since many computations are involved
        return IKabs ( Breal[0] * Breal[1] - Breal[2] ) < tol && IKabs ( Breal[1] * Breal[1] - Breal[3] ) < tol && IKabs ( Breal[0] * Breal[3] - Breal[4] ) < tol && IKabs ( Breal[1] * Breal[3] - Breal[5] ) < tol && IKabs ( Breal[0] * Breal[5] - Breal[6] ) < tol;
    }
    template<int D>
    static inline bool matrixinverse ( IkReal* A )
    {
        int n = D;
        int info;
        IkReal IKFAST_ALIGNED16 ( work[D * D * ( D - 1 )] );
        int ipiv[D];
        dgetrf_ ( &n, &n, A, &n, &ipiv[0], &info );
        if ( info != 0 ) {
            return false;
        }
        int worksize = D * D * ( D - 1 );
        dgetri_ ( &n, A, &n, &ipiv[0], &work[0], &worksize, &info );
        return info == 0;
    }

/// \brief Solve the det Ax^2+Bx+C = 0 problem using the Manocha and Canny method (1994)
///
/// matcoeffs is of length 54*3, for 3 matrices
    static inline void solvedialyticpoly8qep ( const IkReal* matcoeffs, IkReal* rawroots, int& numroots )
    {
        const IkReal tol = 128.0 * std::numeric_limits<IkReal>::epsilon();
        IkReal IKFAST_ALIGNED16 ( M[16 * 16] ) = {0};
        IkReal IKFAST_ALIGNED16 ( A[8 * 8] );
        IkReal IKFAST_ALIGNED16 ( work[16 * 16 * 15] );
        int ipiv[8];
        int info, coeffindex;
        const int worksize = 16 * 16 * 15;
        const int matrixdim = 8;
        const int matrixdim2 = 16;
        numroots = 0;
        // first setup M = [0 I; -C -B] and A
        coeffindex = 0;
        for ( int j = 0; j < 4; ++j ) {
            for ( int k = 0; k < 6; ++k ) {
                M[matrixdim + ( j + 4 ) + 2 * matrixdim * k] = M[matrixdim + j + 2 * matrixdim * ( k + 2 )] = -matcoeffs[coeffindex++];
            }
        }
        for ( int j = 0; j < 4; ++j ) {
            for ( int k = 0; k < 6; ++k ) {
                M[matrixdim + ( j + 4 ) + 2 * matrixdim * k + matrixdim * 2 * matrixdim] = M[matrixdim + j + 2 * matrixdim * ( k + 2 ) + matrixdim * 2 * matrixdim] = -matcoeffs[coeffindex++];
            }
        }
        for ( int j = 0; j < 4; ++j ) {
            for ( int k = 0; k < 6; ++k ) {
                A[ ( j + 4 ) + matrixdim * k] = A[j + matrixdim * ( k + 2 )] = matcoeffs[coeffindex++];
            }
            for ( int k = 0; k < 2; ++k ) {
                A[j + matrixdim * k] = A[ ( j + 4 ) + matrixdim * ( k + 6 )] = 0;
            }
        }
        const IkReal lfpossibilities[4][4] = {{1, -1, 1, 1}, {1, 0, -2, 1}, {1, 1, 2, 0}, {1, -1, 4, 1}};
        int lfindex = -1;
        bool bsingular = true;
        do {
            dgetrf_ ( &matrixdim, &matrixdim, A, &matrixdim, &ipiv[0], &info );
            if ( info == 0 ) {
                bsingular = false;
                for ( int j = 0; j < matrixdim; ++j ) {
                    if ( IKabs ( A[j * matrixdim + j] ) < 100 * tol ) {
                        bsingular = true;
                        break;
                    }
                }
                if ( !bsingular ) {
                    break;
                }
            }
            if ( lfindex == 3 ) {
                break;
            }
            // transform by the linear functional
            lfindex++;
            const IkReal* lf = lfpossibilities[lfindex];
            // have to reinitialize A
            coeffindex = 0;
            for ( int j = 0; j < 4; ++j ) {
                for ( int k = 0; k < 6; ++k ) {
                    IkReal a = matcoeffs[coeffindex + 48], b = matcoeffs[coeffindex + 24], c = matcoeffs[coeffindex];
                    A[ ( j + 4 ) + matrixdim * k] = A[j + matrixdim * ( k + 2 )] = lf[0] * lf[0] * a + lf[0] * lf[2] * b + lf[2] * lf[2] * c;
                    M[matrixdim + ( j + 4 ) + 2 * matrixdim * k] = M[matrixdim + j + 2 * matrixdim * ( k + 2 )] = - ( lf[1] * lf[1] * a + lf[1] * lf[3] * b + lf[3] * lf[3] * c );
                    M[matrixdim + ( j + 4 ) + 2 * matrixdim * k + matrixdim * 2 * matrixdim] = M[matrixdim + j + 2 * matrixdim * ( k + 2 ) + matrixdim * 2 * matrixdim] = - ( 2 * lf[0] * lf[1] * a + ( lf[0] * lf[3] + lf[1] * lf[2] ) * b + 2 * lf[2] * lf[3] * c );
                    coeffindex++;
                }
                for ( int k = 0; k < 2; ++k ) {
                    A[j + matrixdim * k] = A[ ( j + 4 ) + matrixdim * ( k + 6 )] = 0;
                }
            }
        } while ( lfindex < 4 );

        if ( bsingular ) {
            return;
        }
        dgetrs_ ( "No transpose", &matrixdim, &matrixdim2, A, &matrixdim, &ipiv[0], &M[matrixdim], &matrixdim2, &info );
        if ( info != 0 ) {
            return;
        }

        // set identity in upper corner
        for ( int j = 0; j < matrixdim; ++j ) {
            M[matrixdim * 2 * matrixdim + j + matrixdim * 2 * j] = 1;
        }
        IkReal IKFAST_ALIGNED16 ( wr[16] );
        IkReal IKFAST_ALIGNED16 ( wi[16] );
        IkReal IKFAST_ALIGNED16 ( vr[16 * 16] );
        int one = 1;
        dgeev_ ( "N", "V", &matrixdim2, M, &matrixdim2, wr, wi, NULL, &one, vr, &matrixdim2, work, &worksize, &info );
        if ( info != 0 ) {
            return;
        }
        IkReal Breal[matrixdim - 1];
        for ( int i = 0; i < matrixdim2; ++i ) {
            // HACK should be tol*100
            if ( IKabs ( wi[i] ) < 5e-5 ) {
                IkReal* ev = vr + matrixdim2 * i;
                if ( IKabs ( wr[i] ) > 1 ) {
                    ev += matrixdim;
                }
                // consistency has to be checked!!
                if ( IKabs ( ev[0] ) < tol ) {
                    continue;
                }
                IkReal iconst = 1 / ev[0];
                for ( int j = 1; j < matrixdim; ++j ) {
                    Breal[j - 1] = ev[j] * iconst;
                }
                if ( checkconsistency8 ( Breal ) ) {
                    if ( lfindex >= 0 ) {
                        const IkReal* lf = lfpossibilities[lfindex];
                        rawroots[numroots++] = ( wr[i] * lf[0] + lf[1] ) / ( wr[i] * lf[2] + lf[3] );
                    }
                    else {
                        rawroots[numroots++] = wr[i];
                    }
                    bool bsmall0 = IKabs ( ev[0] ) > IKabs ( ev[2] );
                    bool bsmall1 = IKabs ( ev[0] ) > IKabs ( ev[1] );
                    if ( bsmall0 && bsmall1 ) {
                        rawroots[numroots++] = ev[2] / ev[0];
                        rawroots[numroots++] = ev[1] / ev[0];
                    }
                    else if ( bsmall0 && !bsmall1 ) {
                        rawroots[numroots++] = ev[3] / ev[1];
                        rawroots[numroots++] = ev[1] / ev[0];
                    }
                    else if ( !bsmall0 && bsmall1 ) {
                        rawroots[numroots++] = ev[6] / ev[4];
                        rawroots[numroots++] = ev[7] / ev[6];
                    }
                    else if ( !bsmall0 && !bsmall1 ) {
                        rawroots[numroots++] = ev[7] / ev[5];
                        rawroots[numroots++] = ev[7] / ev[6];
                    }
                }
            }
        }
    }
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk ( const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions ) {
    IKSolver solver;
    return solver.ComputeIk ( eetrans, eerot, pfree, solutions );
}

IKFAST_API bool ComputeIk2 ( const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip ) {
    IKSolver solver;
    return solver.ComputeIk ( eetrans, eerot, pfree, solutions );
}

IKFAST_API const char* GetKinematicsHash() {
    return "9cdea7bfe45ba25d7b1a5c841e230e33";
}

IKFAST_API const char* GetIkFastVersion() {
    return "0x10000049";
}

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main ( int argc, char** argv )
{
    if ( argc != 12 + GetNumFreeParameters() + 1 ) {
        printf ( "\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
                 "Returns the ik solutions given the transformation of the end effector specified by\n"
                 "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
                 "There are %d free parameters that have to be specified.\n\n", GetNumFreeParameters() );
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree ( GetNumFreeParameters() );
    IkReal eerot[9], eetrans[3];
    eerot[0] = atof ( argv[1] );
    eerot[1] = atof ( argv[2] );
    eerot[2] = atof ( argv[3] );
    eetrans[0] = atof ( argv[4] );
    eerot[3] = atof ( argv[5] );
    eerot[4] = atof ( argv[6] );
    eerot[5] = atof ( argv[7] );
    eetrans[1] = atof ( argv[8] );
    eerot[6] = atof ( argv[9] );
    eerot[7] = atof ( argv[10] );
    eerot[8] = atof ( argv[11] );
    eetrans[2] = atof ( argv[12] );
    for ( std::size_t i = 0; i < vfree.size(); ++i )
        vfree[i] = atof ( argv[13 + i] );
    bool bSuccess = ComputeIk ( eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions );

    if ( !bSuccess ) {
        fprintf ( stderr, "Failed to get ik solution\n" );
        return -1;
    }

    printf ( "Found %d ik solutions:\n", ( int ) solutions.GetNumSolutions() );
    std::vector<IkReal> solvalues ( GetNumJoints() );
    for ( std::size_t i = 0; i < solutions.GetNumSolutions(); ++i ) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution ( i );
        printf ( "sol%d (free=%d): ", ( int ) i, ( int ) sol.GetFree().size() );
        std::vector<IkReal> vsolfree ( sol.GetFree().size() );
        sol.GetSolution ( &solvalues[0], vsolfree.size() > 0 ? &vsolfree[0] : NULL );
        for ( std::size_t j = 0; j < solvalues.size(); ++j )
            printf ( "%.15f, ", solvalues[j] );
        printf ( "\n" );
    }
    return 0;
}

#endif
